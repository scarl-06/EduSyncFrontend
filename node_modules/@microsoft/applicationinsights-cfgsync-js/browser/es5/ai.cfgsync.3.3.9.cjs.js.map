{"version":3,"file":"ai.cfgsync.3.3.9.cjs.js","sources":["https://raw.githubusercontent.com/microsoft/ApplicationInsights-JS/refs/tags/3.3.9/tools/shims/src/Constants.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/internal/treeshake_helpers.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/internal/constants.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/internal/poly_helpers.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/helpers/safe.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/helpers/base.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/internal/stubs.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/string/as_string.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/helpers/diagnostics.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/helpers/throw.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/internal/throwIf.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/object/has_own_prop.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/object/has_own.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/object/for_each_key.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/array/forEach.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/internal/unwrapFunction.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/object/define.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/internal/map.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/object/object_state.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/object/object.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/helpers/enum.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/symbol/well_known.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/internal/global.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/internal/poly_utils.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/object/create.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/helpers/date.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/funcs/funcs.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/helpers/lazy.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/math/random.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/internal/instance.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/polyfills/symbol.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/helpers/cache.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/helpers/environment.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/symbol/symbol.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/iterator/iterator.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/iterator/forOf.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/array/append.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/array/indexOf.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/object/set_proto.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/helpers/customError.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/math/floor.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/object/is_plain_object.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/object/copy.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/helpers/extend.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/string/split.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/helpers/get_set_value.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/object/get_own_property.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/string/index_of.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/timer/handler.ts","https://raw.githubusercontent.com/nevware21/ts-utils/refs/tags/0.12.5/lib/src/timer/timeout.ts","https://raw.githubusercontent.com/microsoft/ApplicationInsights-JS/refs/tags/3.3.9/tools/shims/src/Constants.ts","https://raw.githubusercontent.com/microsoft/dynamicproto-js/refs/tags/2.0.3/lib/src/DynamicProto.ts","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/__DynamicConstants.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/JavaScriptSDK/AggregationError.js","https://raw.githubusercontent.com/nevware21/ts-async/refs/tags/0.5.4/lib/src/internal/constants.ts","https://raw.githubusercontent.com/nevware21/ts-async/refs/tags/0.5.4/lib/src/promise/await.ts","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/JavaScriptSDK/InternalConstants.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/JavaScriptSDK/HelperFuncs.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/JavaScriptSDK/EnvUtils.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/JavaScriptSDK/RandomHelper.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/JavaScriptSDK/DataCacheHelper.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/Config/ConfigDefaults.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/Config/DynamicSupport.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/Config/DynamicProperty.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/Config/DynamicState.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/Config/DynamicConfig.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/JavaScriptSDK/DbgExtensionUtils.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/JavaScriptSDK/DiagnosticLogger.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/JavaScriptSDK/PerfManager.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/JavaScriptSDK/TelemetryHelpers.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/JavaScriptSDK/ProcessTelemetryContext.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/JavaScriptSDK/UnloadHandlerContainer.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/JavaScriptSDK/UnloadHookContainer.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/JavaScriptSDK/BaseTelemetryPlugin.js","ai.cfgsync@3.3.9/shared/AppInsightsCore/dist-es5/JavaScriptSDK/EventHelpers.js","ai.cfgsync@3.3.9/shared/AppInsightsCommon/dist-es5/Constants.js","ai.cfgsync@3.3.9/dist-es5/__DynamicConstants.js","ai.cfgsync@3.3.9/dist-es5/CfgSyncHelperFuncs.js","ai.cfgsync@3.3.9/dist-es5/CfgSyncPlugin.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport const strShimFunction = \"function\";\r\nexport const strShimObject = \"object\";\r\nexport const strShimUndefined = \"undefined\";\r\nexport const strShimPrototype = \"prototype\";\r\nexport const strDefault = \"default\";\r\n\r\nexport const ObjClass = Object;\r\nexport const ObjProto = ObjClass[strShimPrototype];\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2024 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal tree shaking helper to return the first available function from the two provided.\r\n * This is required to ensure that tree-shaking can remove any unused functions as this ensures\r\n * that the alias assignments are not considered side-effects and are tagged correctly as pure.\r\n * @param func1 - The system function to use if available\r\n * @param func2 - The polyfill function to use if the static function is not available\r\n * @returns The first available function from the two provided\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _pureAssign<F>(func1: F, func2?: F): F {\r\n    return func1 || func2;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal tree shaking helper to return the value of the named property from the provided object.\r\n * By using this helper, we can explicitly tell the tree-shaking tool that this function is pure and\r\n * has no side effects. As some tree-shaking tools may not be able to determine this automatically.\r\n * @param value - The object to get the property value from\r\n * @param name - The name of the property to get the value of\r\n * @returns The value of the named property from the provided object\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _pureRef<R extends T[keyof T], T = any>(value: T, name: keyof T): R {\r\n    return value[name] as R;\r\n}","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022-2025 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { _pureAssign, _pureRef } from \"./treeshake_helpers\";\r\n\r\n// These constants are currently NOT exported directly, we may export them later associated with a frozen namespace (maybe)\r\n// For now do NOT expect that we will export these values.\r\n\r\nexport const UNDEF_VALUE: undefined = undefined;\r\nexport const NULL_VALUE: null = null;\r\n\r\nexport const EMPTY = \"\";\r\nexport const FUNCTION = \"function\";\r\nexport const OBJECT = \"object\";\r\nexport const PROTOTYPE = \"prototype\";\r\nexport const __PROTO__ = \"__proto__\";\r\nexport const UNDEFINED = \"undefined\";\r\nexport const CONSTRUCTOR = \"constructor\";\r\nexport const SYMBOL = \"Symbol\";\r\nexport const LENGTH = \"length\";\r\nexport const NAME = \"name\";\r\nexport const CALL = \"call\";\r\nexport const TO_STRING = \"toString\";\r\n\r\nexport const GET_OWN_PROPERTY_DESCRIPTOR = \"getOwnPropertyDescriptor\";\r\nexport const GET_OWN_PROPERTY_NAMES = \"getOwnPropertyNames\";\r\nexport const GET_OWN_PROPERTY_SYMBOLS = \"getOwnPropertySymbols\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const ObjClass = (/*#__PURE__*/_pureAssign(Object));\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const ObjProto = (/*#__PURE__*/_pureRef<typeof Object.prototype>(ObjClass, PROTOTYPE));\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const StrCls = (/*#__PURE__*/_pureAssign(String));\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const StrProto = (/*#__PURE__*/_pureRef<typeof String.prototype>(StrCls, PROTOTYPE)) as String;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const MathCls = (/*#__PURE__*/_pureAssign(Math)) as Math;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const ArrCls = (/*#__PURE__*/_pureAssign(Array));\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const ArrProto = (/*#__PURE__*/_pureRef<typeof ArrCls.prototype>(ArrCls, PROTOTYPE));\r\n\r\n/**\r\n * @ignore\r\n *\r\n */\r\nexport const ArrSlice = (/*#__PURE__*/_pureRef<typeof ArrProto.slice>(ArrProto, \"slice\"));\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const NumberCls = (/*#__PURE__*/_pureAssign(Number));\r\n\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022-2025 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { LENGTH } from \"./constants\";\r\n\r\nexport const POLYFILL_TAG = \"_polyfill\";\r\nexport const POLYFILL_TYPE_NAME = \"__nw21$polytype__\";\r\n\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function makePolyFn<T extends Function>(poly: T): T {\r\n    return function(): T {\r\n        let theArgs = [ this ];\r\n        for (let lp = 0; lp < arguments[LENGTH]; lp++) {\r\n            theArgs[lp + 1] = arguments[lp];\r\n        }\r\n        \r\n        return poly.apply(this, theArgs);\r\n    } as any;\r\n}\r\n\r\n\r\n/**\r\n * Checks if the target object is a polyfill.\r\n * @internal\r\n * @ignore\r\n * @group Polyfill\r\n * @param obj - The object to check.\r\n * @returns True if the object is a polyfill, false otherwise.\r\n */\r\nexport function _isPolyfill(obj: any): boolean {\r\n    return !!(obj && obj[POLYFILL_TAG]);\r\n}\r\n\r\n/**\r\n * Checks if the target object is of a specific polyfill type.\r\n * @internal\r\n * @ignore\r\n * @group Polyfill\r\n * @param obj - The object to check.\r\n * @param polyfillTypeName - The type name of the polyfill.\r\n * @returns True if the object is of the specified polyfill type, false otherwise.\r\n */\r\nexport function _isPolyfillType(obj: any, polyfillTypeName: string): boolean {\r\n    return !!(obj && obj[POLYFILL_TYPE_NAME] === polyfillTypeName);\r\n}","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\n/**\r\n * Infers the return type of the specified function\r\n * @since 0.10.5\r\n * @group Safe\r\n * @typeParam T - The type of the function which to infer the return type\r\n */\r\nexport type SafeReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any\r\n\r\n/**\r\n * Defines the return value of the {@link safe} function, which is an object with either a value or an error\r\n * @since 0.10.5\r\n * @group Safe\r\n * @typeParam T - The type of the function to call\r\n * @typeParam R - The return type of the function\r\n */\r\nexport interface ISafeReturn<T extends (...args: any) => R, R = SafeReturnType<T>> {\r\n    /**\r\n     * The value returned by the function call\r\n     */\r\n    v?: R;\r\n\r\n    /**\r\n     * The error thrown by the function call\r\n     */\r\n    e?: Error;\r\n}\r\n\r\n/**\r\n * Call the specified function with zero or more individual arguments, the call will be wrapped in a try / catch\r\n * block and the result returned wrapped in an {@link ISafeReturn} instance. If the function call throws an\r\n * exception the {@link ISafeReturn.e | error} property will contain the exception otherwise the {@link ISafeReturn.v | value}\r\n * property will contain the value returned from the function.\r\n * @since 0.10.5\r\n * @group Safe\r\n * @typeParam F - The type of the function to call\r\n * @typeParam R - The return type of the function to call\r\n * @param func - The function to call\r\n * @param argArray - An array of the arguments to pass to the function\r\n * @returns The return value of the function or undefined if an exception is thrown\r\n * @example\r\n * ```ts\r\n * let result = safe((value: string) => {\r\n *    return JSON.parse(value);\r\n * }, [\"{ invalid: json value\"]);\r\n *\r\n * // result.e instanceof SyntaxError\r\n *\r\n * let result2 = safe((value: string) => {\r\n *   return JSON.parse(value);\r\n * }, [\"{ valid: 'json value' }\"]);\r\n *\r\n * // result2.v === { valid: \"json value\" }\r\n * ```\r\n */\r\nexport function safe<F extends (...args: unknown[]) => R, R = any>(func: F, argArray?: any[]): ISafeReturn<F, R> {\r\n    try {\r\n        return {\r\n            v: func.apply(this, argArray)\r\n        };\r\n    } catch (e) {\r\n        return { e };\r\n    }\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022-2025 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ArrCls, FUNCTION, NULL_VALUE, OBJECT, ObjProto, TO_STRING, UNDEFINED, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { _isPolyfillType } from \"../internal/poly_helpers\";\r\nimport { _pureRef } from \"../internal/treeshake_helpers\";\r\nimport { safeGet } from \"./safe_get\";\r\n\r\nlet _primitiveTypes: string[];\r\n\r\n/**\r\n * @ignore\r\n * @internal\r\n * Create and returns a function that will return `true` if the argument passed\r\n * to it matches the provided type.\r\n * @param theType - The type to match against the `typeof value`\r\n * @returns A function which takes a single argument and returns a boolean\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _createIs<T>(theType: string): (value: any) => value is T {\r\n    return function (value: any): value is T {\r\n        return typeof value === theType;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @internal\r\n * Create and returns a function that will return `true` if the argument passed\r\n * to it matches the provided type or the type is a polyfill for the provided type.\r\n * @param theType - The type to match against the `typeof value`\r\n * @returns A function which takes a single argument and returns a boolean\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _createIsWithPoly<T>(theType: string): (value: any) => value is T {\r\n    return function (value: any): value is T {\r\n        return typeof value === theType || _isPolyfillType(value, theType);\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @internal\r\n * Create and returns a function that will return `true` if the argument passed\r\n * to it matches the object type specified based on {@link objToString}.\r\n * @param - The object name to match for the `objToString(value)`\r\n * @returns A function which takes a single argument and returns a boolean\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _createObjIs<T>(theName: string): (value: any) => value is T {\r\n    const theType = \"[object \" + theName + \"]\";\r\n    return function (value: any): value is T {\r\n        return !!(value && objToString(value) === theType);\r\n    }\r\n}\r\n\r\n/**\r\n * The `objToString()` method returns a string representing the object. This explicitly\r\n * always calls the `Object.prototype.toString()` method.\r\n *\r\n * An object's toString() method is most commonly invoked when that object undergoes:\r\n * - explicit type conversion to a string (for example, String(myObject))\r\n * - implicit type coercion into a string (for example, myObject + \"hello world\")\r\n *\r\n * @group Object\r\n * @param value - The object to be converted into a string\r\n * @returns A string representation of the object\r\n * @example\r\n * ```ts\r\n * objToString(new Date()); // [object Date]\r\n * objToString(new String()); // [object String]\r\n *\r\n * // Math has its Symbol.toStringTag\r\n * objToString(Math); // [object Math]\r\n *\r\n * objToString(undefined); // [object Undefined]\r\n * objToString(null); // [object Null]\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function objToString(value: any): string {\r\n    return ObjProto[TO_STRING].call(value);\r\n}\r\n\r\n/**\r\n * Validate if the provided value object is of the expected type\r\n * @group Type Identity\r\n * @param value - The value to check\r\n * @param theType - The expected type name as a string\r\n * @returns `true` if the value matches the provided type\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isTypeof(value: any, theType: string): boolean {\r\n    return typeof value === theType;\r\n}\r\n\r\n/**\r\n * Checks if the provided value is undefined or contains the string value \"undefined\",\r\n * if you want to consider the string value as undefined see {@link isStrictUndefined}\r\n * @group Type Identity\r\n * @group Value Check\r\n * @param value - The value to check\r\n * @returns true if the value is undefined or \"undefined\", otherwise false\r\n * @example\r\n * ```ts\r\n * isUndefined(undefined);              // true\r\n * isUndefined(\"undefined\");            // true\r\n *\r\n * isUndefined(null);                   // false\r\n * isUndefined(\"null\");                 // false\r\n * isUndefined(\"1\");                    // false\r\n * isUndefined(\"aa\");                   // false\r\n * isUndefined(new Date());             // false\r\n * isUndefined(1);                      // false\r\n * isUndefined(\"\");                     // false\r\n * isUndefined(_dummyFunction);         // false\r\n * isUndefined([]);                     // false\r\n * isUndefined(new Array(1));           // false\r\n * isUndefined(true);                   // false\r\n * isUndefined(false);                  // false\r\n * isUndefined(\"true\");                 // false\r\n * isUndefined(\"false\");                // false\r\n * isUndefined(new Boolean(true));      // false\r\n * isUndefined(new Boolean(false));     // false\r\n * isUndefined(new Boolean(\"true\"));    // false\r\n * isUndefined(new Boolean(\"false\"));   // false\r\n * isUndefined(Boolean(true));          // false\r\n * isUndefined(Boolean(false));         // false\r\n * isUndefined(Boolean(\"true\"));        // false\r\n * isUndefined(Boolean(\"false\"));       // false\r\n * isUndefined(new RegExp(\"\"));         // false\r\n * isUndefined(new ArrayBuffer(0));     // false\r\n * isUndefined(new Error(\"Test Error\"));// false\r\n * isUndefined(new TypeError(\"Test TypeError\"));    // false\r\n * isUndefined(new TestError(\"Test TestError\"));    // false\r\n * isUndefined(_dummyError());          // false\r\n * isUndefined(Promise.reject());       // false\r\n * isUndefined(Promise.resolve());      // false\r\n * isUndefined(new Promise(() => {}));  // false\r\n * isUndefined(_simplePromise());       // false\r\n * isUndefined(_simplePromiseLike());   // false\r\n * isUndefined(Object.create(null));    // false\r\n * isUndefined(polyObjCreate(null));    // false\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isUndefined(value: any) {\r\n    return typeof value === UNDEFINED || value === UNDEFINED;\r\n}\r\n\r\n/**\r\n * Checks if the provided value is undefined, a string value of \"undefined\" is NOT considered\r\n * to be undefined.\r\n * @group Type Identity\r\n * @group Value Check\r\n * @param arg - The value to check\r\n * @returns true if the typeof value === UNDEFINED\r\n * @example\r\n * ```ts\r\n * isStrictUndefined(undefined);    // true\r\n *\r\n * isStrictUndefined(null);         // false\r\n * isStrictUndefined(\"null\");       // false\r\n * isStrictUndefined(\"undefined\");  // false\r\n * isStrictUndefined(\"1\");          // false\r\n * isStrictUndefined(\"aa\");         // false\r\n * isStrictUndefined(new Date());   // false\r\n * isStrictUndefined(0);            // false\r\n * isStrictUndefined(1);            // false\r\n * isStrictUndefined(\"\");           // false\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isStrictUndefined(arg: any): arg is undefined {\r\n    return arg === UNDEF_VALUE;\r\n}\r\n\r\n/**\r\n * Checks if the provided value is null, undefined or contains the string value of \"undefined\".\r\n * @group Type Identity\r\n * @group Value Check\r\n * @param value - The value to check\r\n * @returns `true` if the value is `null` or `undefined`\r\n * @example\r\n * ```ts\r\n * isNullOrUndefined(null);         // true\r\n * isNullOrUndefined(undefined);    // true\r\n * isNullOrUndefined(\"undefined\");  // true\r\n *\r\n * let value = null;\r\n * isNullOrUndefined(value);        // true\r\n * let value = undefined;\r\n * isNullOrUndefined(value);        // true\r\n *\r\n * isNullOrUndefined(\"\");           // false\r\n * isNullOrUndefined(0);            // false\r\n * isNullOrUndefined(new Date());   // false\r\n * isNullOrUndefined(true);         // false\r\n * isNullOrUndefined(false);        // false\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isNullOrUndefined(value:  any): boolean {\r\n    return value === NULL_VALUE || isUndefined(value);\r\n}\r\n\r\n/**\r\n * Checks if the provided value is null, undefined only, a string value of \"undefined\" is NOT considered\r\n * to be undefined.\r\n * @group Type Identity\r\n * @group Value Check\r\n * @param value - The value to check\r\n * @returns\r\n * @example\r\n * ```ts\r\n * isStrictNullOrUndefined(null);         // true\r\n * isStrictNullOrUndefined(undefined);    // true\r\n * isStrictNullOrUndefined(\"undefined\");  // false\r\n *\r\n * let value = null;\r\n * isStrictNullOrUndefined(value);        // true\r\n * let value = undefined;\r\n * isStrictNullOrUndefined(value);        // true\r\n *\r\n * isStrictNullOrUndefined(\"\");           // false\r\n * isStrictNullOrUndefined(0);            // false\r\n * isStrictNullOrUndefined(new Date());   // false\r\n * isStrictNullOrUndefined(true);         // false\r\n * isStrictNullOrUndefined(false);        // false\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isStrictNullOrUndefined(value: any): boolean {\r\n    return value === NULL_VALUE || value === UNDEF_VALUE;\r\n}\r\n\r\n/**\r\n * Checks if the passed value is defined, which means it has any value and is not undefined.\r\n * A string value of \"undefined\" is considered to be defined.\r\n * @group Value Check\r\n * @param arg - The value to check\r\n * @returns true if arg has a value (is not === undefined)\r\n * @example\r\n * ```ts\r\n * isDefined(null);         // false\r\n * isDefined(undefined);    // false\r\n * isDefined(\"undefined\");  // true\r\n *\r\n * let value = null;\r\n * isDefined(value);        // false\r\n * let value = undefined;\r\n * isDefined(value);        // false\r\n *\r\n * isDefined(\"\");           // true\r\n * isDefined(0);            // true\r\n * isDefined(new Date());   // true\r\n * isDefined(true);         // true\r\n * isDefined(false);        // true\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isDefined(arg: any): boolean {\r\n    return !!arg || arg !== UNDEF_VALUE;\r\n}\r\n\r\n/**\r\n * Identifies whether the provided value is a JavaScript [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive)\r\n * which is when is it not an object and has no methods or properties. There are 7 primitive data types:\r\n * - string\r\n * - number\r\n * - bigint\r\n * - boolean\r\n * - undefined\r\n * - null\r\n * - symbol\r\n *\r\n * Most of the time, a primitive value is represented directly at the lowest level of the language implementation.\r\n *\r\n * All primitives are immutable; that is, they cannot be altered. It is important not to confuse a primitive itself\r\n * with a variable assigned a primitive value. The variable may be reassigned to a new value, but the existing value\r\n * can not be changed in the ways that objects, arrays, and functions can be altered. The language does not offer\r\n * utilities to mutate primitive values.\r\n * @since 0.4.4\r\n * @group Type Identity\r\n * @param value - The value to check whether it's a primitive value\r\n * @example\r\n * ```ts\r\n * isPrimitive(null);                   // true\r\n * isPrimitive(undefined);              // true\r\n * isPrimitive(\"null\");                 // true\r\n * isPrimitive(\"undefined\");            // true\r\n * isPrimitive(\"1\");                    // true\r\n * isPrimitive(\"aa\");                   // true\r\n * isPrimitive(1);                      // true\r\n * isPrimitive(Number(2));              // true\r\n * isPrimitive(\"\");                     // true\r\n * isPrimitive(String(\"\"));             // true\r\n * isPrimitive(true);                   // true\r\n * isPrimitive(false);                  // true\r\n * isPrimitive(\"true\");                 // true\r\n * isPrimitive(\"false\");                // true\r\n * isPrimitive(BigInt(42));             // true\r\n * isPrimitive(Symbol.for(\"Hello\"));    // true\r\n *\r\n * isPrimitive(new String(\"aa\"));       // false\r\n * isPrimitive(new Date());             // false\r\n * isPrimitive(_dummyFunction);         // false\r\n * isPrimitive([]);                     // false\r\n * isPrimitive(new Array(1));           // false\r\n * isPrimitive(new Boolean(true));      // false\r\n * isPrimitive(new Boolean(false));     // false\r\n * isPrimitive(new Boolean(\"true\"));    // false\r\n * isPrimitive(new Boolean(\"false\"));   // false\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isPrimitive(value: any): value is string | number | bigint | boolean | undefined | symbol | null {\r\n    return value === NULL_VALUE || isPrimitiveType(typeof value);\r\n}\r\n\r\n/**\r\n * Identifies whether the provided value is a JavaScript [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive)\r\n * which is when is it not an object and has no methods or properties. There are 6 primitive data types:\r\n * - string\r\n * - number\r\n * - bigint\r\n * - boolean\r\n * - undefined\r\n * - symbol\r\n *\r\n * Most of the time, a primitive value is represented directly at the lowest level of the language implementation.\r\n *\r\n * All primitives are immutable; that is, they cannot be altered. It is important not to confuse a primitive itself\r\n * with a variable assigned a primitive value. The variable may be reassigned to a new value, but the existing value\r\n * can not be changed in the ways that objects, arrays, and functions can be altered. The language does not offer\r\n * utilities to mutate primitive values.\r\n * @since 0.9.6\r\n * @group Type Identity\r\n * @param theType - The type as a string value to be checked whther it's a primitive type, this should be the value\r\n * returned from `typeof value`.\r\n * @example\r\n * ```ts\r\n * isPrimitiveType(null);                   // false\r\n * isPrimitiveType(undefined);              // false\r\n * isPrimitiveType(\"null\");                 // false\r\n * isPrimitiveType(\"undefined\");            // false\r\n * isPrimitiveType(\"1\");                    // false\r\n * isPrimitiveType(\"aa\");                   // false\r\n * isPrimitiveType(1);                      // false\r\n * isPrimitiveType(Number(2));              // false\r\n * isPrimitiveType(\"\");                     // false\r\n * isPrimitiveType(String(\"\"));             // false\r\n * isPrimitiveType(true);                   // false\r\n * isPrimitiveType(false);                  // false\r\n * isPrimitiveType(\"true\");                 // false\r\n * isPrimitiveType(\"false\");                // false\r\n * isPrimitiveType(BigInt(42));             // false\r\n * isPrimitiveType(Symbol.for(\"Hello\"));    // false\r\n *\r\n * isPrimitiveType(\"string\");               // true\r\n * isPrimitiveType(\"number\");               // true\r\n * isPrimitiveType(\"boolean\");              // true\r\n * isPrimitiveType(\"undefined\");            // true\r\n * isPrimitiveType(\"symbol\");               // true\r\n * isPrimitiveType(\"bigint\");               // true\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isPrimitiveType(theType: string): boolean {\r\n    !_primitiveTypes && (_primitiveTypes = [ \"string\", \"number\", \"boolean\", UNDEFINED, \"symbol\", \"bigint\" ]);\r\n\r\n    return !!(theType !== OBJECT && _primitiveTypes.indexOf(theType) !== -1);\r\n}\r\n\r\n/**\r\n * Checks to see if the past value is a string value\r\n * @function\r\n * @group Type Identity\r\n * @group String\r\n * @param value - The value to check\r\n * @returns\r\n * @example\r\n * ```ts\r\n * isString(\"\");            // true\r\n * isString(\"null\");        // true\r\n * isString(\"undefined\");   // true\r\n * isString(String(\"\"));    // true\r\n *\r\n * isString(null);          // false\r\n * isString(undefined);     // false\r\n * isString(0);             // false\r\n * ```\r\n */\r\nexport const isString: (value: any) => value is string = (/*#__PURE__*/_createIs<string>(\"string\"));\r\n\r\n/**\r\n * Checks to see if the past value is a function value\r\n * @function\r\n * @group Type Identity\r\n * @param value - The value to check\r\n * @returns\r\n * @example\r\n * ```ts\r\n * function myFunction() { }\r\n * isFunction(null);            // false\r\n * isFunction(undefined);       // false\r\n * isFunction(\"null\");          // false\r\n * isFunction(\"undefined\");     // false\r\n * isFunction(\"1\");             // false\r\n * isFunction(\"aa\");            // false\r\n * isFunction(new Date());      // false\r\n * isFunction(1);               // false\r\n * isFunction(\"\");              // false\r\n * isFunction(myFunction);      // true\r\n * isFunction([]);              // false\r\n * isFunction(new Array(1));    // false\r\n * ```\r\n */\r\nexport const isFunction: (value: any) => value is Function = (/*#__PURE__*/_createIs<Function>(FUNCTION));\r\n\r\n/**\r\n * Checks if the provided value is an AsyncFunction\r\n * @function\r\n * @group Type Identity\r\n * @since 0.12.3\r\n * @param value - Value to be checked\r\n * @returns True if the value is an AsyncFunction, false otherwise\r\n * @remarks\r\n * This function checks if the provided value is an AsyncFunction, which is a special type of function\r\n * that returns a Promise and can be used with the `await` keyword. Note that this function does not\r\n * check if the function is a generator or an async generator function. And when using TypeScript\r\n * and targetting earlier versions of JavaScript, the type of the function may NOT be AsyncFunction\r\n * and instead be a regular function. This is because the type of the function is determined by the\r\n * JavaScript engine and not the TypeScript compiler.\r\n * @example\r\n * ```ts\r\n * async function asyncFn() { }\r\n * isAsyncFunction(asyncFn);               // true\r\n * isAsyncFunction(function() {});         // false\r\n * isAsyncFunction(function* () {});       // false\r\n * isAsyncFunction(async function* () {}); // false\r\n * isAsyncFunction(null);                  // false\r\n * isAsyncFunction(undefined);             // false\r\n * ```\r\n */\r\nexport const isAsyncFunction: (value: any) => value is Function = (/*#__PURE__*/_createObjIs<Function>(\"AsyncFunction\"));\r\n\r\n/**\r\n * Checks if the provided value is a GeneratorFunction\r\n * @function\r\n * @group Type Identity\r\n * @since 0.12.3\r\n * @param value - Value to be checked\r\n * @returns True if the value is a GeneratorFunction, false otherwise\r\n * @remarks\r\n * This function checks if the provided value is a GeneratorFunction, which is a special type of function\r\n * that returns a Generator and can be used with the `yield` keyword. Note that this function does not\r\n * check if the function is an async function or an async generator function. And when using TypeScript\r\n * and targetting earlier versions of JavaScript, the type of the function may NOT be GeneratorFunction\r\n * and instead be a regular function.\r\n * @example\r\n * ```ts\r\n * function* genFn() { }\r\n * isGenerator(genFn);                     // true\r\n * isGenerator(function() {});             // false\r\n * isGenerator(async function() {});       // false\r\n * isGenerator(async function* () {});     // false\r\n * isGenerator(null);                      // false\r\n * isGenerator(undefined);                 // false\r\n * ```\r\n */\r\nexport const isGenerator: (value: any) => value is GeneratorFunction = (/*#__PURE__*/_createObjIs<GeneratorFunction>(\"GeneratorFunction\"));\r\n\r\n/**\r\n * Checks if the provided value is an AsyncGeneratorFunction\r\n * @function\r\n * @group Type Identity\r\n * @since 0.12.3\r\n * @param value - Value to be checked\r\n * @returns True if the value is an AsyncGeneratorFunction, false otherwise\r\n * @remarks\r\n * This function checks if the provided value is an AsyncGeneratorFunction, which is a special type of function\r\n * that returns an AsyncGenerator and can be used with the `await` keyword. Note that this function does not\r\n * check if the function is a generator or an async function. And when using TypeScript and targetting earlier\r\n * versions of JavaScript, the type of the function may NOT be AsyncGeneratorFunction and instead be a regular function.\r\n * @example\r\n * ```ts\r\n * async function* asyncGenFn() { }\r\n * isAsyncGenerator(asyncGenFn);           // true\r\n * isAsyncGenerator(function() {});        // false\r\n * isAsyncGenerator(async function() {});  // false\r\n * isAsyncGenerator(function* () {});      // false\r\n * isAsyncGenerator(null);                 // false\r\n * isAsyncGenerator(undefined);            // false\r\n * ```\r\n */\r\nexport const isAsyncGenerator: (value: any) => value is AsyncGeneratorFunction = (/*#__PURE__*/_createObjIs<AsyncGeneratorFunction>(\"AsyncGeneratorFunction\"));\r\n\r\n/**\r\n * Checks to see if the past value is an object value\r\n * @function\r\n * @group Type Identity\r\n * @group Object\r\n * @typeParam T - The object type, defaults to any\r\n * @param value - The value to check\r\n * @returns\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isObject<T>(value: T): value is T {\r\n    if (!value && isNullOrUndefined(value)) {\r\n        return false;\r\n    }\r\n\r\n    return !!value && typeof value === OBJECT;\r\n}\r\n\r\n/**\r\n * Checks if the type of value is an Array.\r\n *\r\n * @function\r\n * @group Type Identity\r\n * @group Array\r\n * @param arg - Value to be checked.\r\n * @return True if the value is a Array, false otherwise.\r\n * @example\r\n * ```ts\r\n * import { isArray, isObject } from \"@nevware21/ts-utils\";\r\n *\r\n * function performAction(value: any) {\r\n *     if (isArray(value) || isObject(value)) {\r\n *         // Do something\r\n *     } else {\r\n *         // Do something else\r\n *     }\r\n * }\r\n * ```\r\n */\r\nexport const isArray: <T = any>(arg: any) => arg is Array<T> = (/* #__PURE__*/_pureRef<typeof ArrCls.isArray>(ArrCls as any, \"isArray\"));\r\n\r\n/**\r\n * Check if an object is of type Date\r\n * @function\r\n * @group Type Identity\r\n * @example\r\n * ```ts\r\n * import { isDate } from \"@nevware21/ts-utils\";\r\n *\r\n * let _theDate = null;\r\n *\r\n * function getSetDate(newDate?: any) {\r\n *     _theDate = isDate(newDate) ? newDate : new Date();\r\n *\r\n *     return _theDate;\r\n * }\r\n * ```\r\n */\r\nexport const isDate: (value: any) => value is Date = (/*#__PURE__*/_createObjIs<Date>(\"Date\"));\r\n\r\n/**\r\n * Checks if the type of value is a number.\r\n * @function\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a number, false otherwise.\r\n */\r\nexport const isNumber: (value: any) => value is number = (/*#__PURE__*/_createIs<number>(\"number\"));\r\n\r\n/**\r\n * Checks if the type of value is a boolean.\r\n * @function\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a boolean, false otherwise.\r\n */\r\nexport const isBoolean: (value: any) => value is boolean = (/*#__PURE__*/_createIs<boolean>(\"boolean\"));\r\n\r\n/**\r\n * Determines if a value is a regular expression object.\r\n * @function\r\n * @group Type Identity\r\n * @param value - Reference to check.\r\n * @returns True if `value` is a `RegExp`.\r\n */\r\nexport const isRegExp: (value: any) => value is RegExp = (/*#__PURE__*/_createObjIs<RegExp>(\"RegExp\"));\r\n\r\n/**\r\n * Checks if the type of value is a File object.\r\n * @function\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a File, false otherwise.\r\n */\r\nexport const isFile: (value: any) => value is File = (/*#__PURE__*/_createObjIs<File>(\"File\"));\r\n\r\n/**\r\n * Checks if the type of value is a FormData object.\r\n * @function\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a FormData, false otherwise.\r\n */\r\nexport const isFormData: (value: any) => value is FormData = (/*#__PURE__*/_createObjIs<FormData>(\"FormData\"));\r\n\r\n/**\r\n * Checks if the type of value is a Blob object.\r\n * @function\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a Blob, false otherwise.\r\n */\r\nexport const isBlob: (value: any) => value is Blob = (/*#__PURE__*/_createObjIs<Blob>(\"Blob\"));\r\n\r\n/**\r\n * Checks if the type of value is a ArrayBuffer object.\r\n * @function\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a ArrayBuffer, false otherwise.\r\n */\r\nexport const isArrayBuffer: (value: any) => value is ArrayBuffer = (/*#__PURE__*/_createObjIs<ArrayBuffer>(\"ArrayBuffer\"));\r\n\r\n/**\r\n * Checks if the type of value is a Error object.\r\n * @function\r\n * @group Type Identity\r\n * @group Error\r\n * @param value - Value to be checked.\r\n * @return True if the value is a Error, false otherwise.\r\n */\r\nexport const isError: (value: any) => value is Error = (/*#__PURE__*/_createObjIs<Error>(\"Error\"));\r\n\r\n/**\r\n * Checks if the type of value is a PromiseLike instance (contains a then function).\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a PromiseLike, false otherwise.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isPromiseLike<T>(value: any): value is PromiseLike<T> {\r\n    return !!(value && value.then && isFunction(value.then));\r\n}\r\n\r\n/**\r\n * Checks if the type of value is a PromiseLike instance (contains a then function).\r\n * This is an alias for {@link isPromiseLike}.\r\n * @function\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a PromiseLike, false otherwise.\r\n */\r\nexport const isThenable: <T>(value: any) => value is PromiseLike<T> = isPromiseLike;\r\n\r\n/**\r\n * Checks if the type of value is a Promise instance (contains then and catch functions).\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a Promise, false otherwise.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isPromise<T>(value: any): value is Promise<T> {\r\n    return !!(value && value.then && value.catch && isFunction(value.then) && isFunction((value as any).catch));\r\n}\r\n\r\n/**\r\n * Checks if the type of value is a Map object.\r\n * @function\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a Map, false otherwise.\r\n * @example\r\n * ```ts\r\n * isMap(new Map());        // true\r\n * isMap(new WeakMap());    // false\r\n * isMap({});               // false\r\n * isMap(null);             // false\r\n * ```\r\n */\r\nexport const isMap: <K = any, V = any>(value: any) => value is Map<K, V> = (/*#__PURE__*/_createObjIs<Map<any, any>>(\"Map\"));\r\n\r\n/**\r\n * Checks if the type of value is a WeakMap object.\r\n * @function\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a WeakMap, false otherwise.\r\n * @example\r\n * ```ts\r\n * isWeakMap(new WeakMap());    // true\r\n * isWeakMap(new Map());        // false\r\n * isWeakMap({});               // false\r\n * isWeakMap(null);             // false\r\n * ```\r\n */\r\nexport const isWeakMap: <K extends object = object, V = any>(value: any) => value is WeakMap<K, V> = (/*#__PURE__*/_createObjIs<WeakMap<any, any>>(\"WeakMap\"));\r\n\r\n/**\r\n * Checks if the type of value is a Set object.\r\n * @function\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a Set, false otherwise.\r\n * @example\r\n * ```ts\r\n * isSet(new Set());        // true\r\n * isSet(new WeakSet());    // false\r\n * isSet({});               // false\r\n * isSet(null);             // false\r\n * ```\r\n */\r\nexport const isSet: <T = any>(value: any) => value is Set<T> = (/*#__PURE__*/_createObjIs<Set<any>>(\"Set\"));\r\n\r\n/**\r\n * Checks if the type of value is a WeakSet object.\r\n * @function\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a WeakSet, false otherwise.\r\n * @example\r\n * ```ts\r\n * isWeakSet(new WeakSet());    // true\r\n * isWeakSet(new Set());        // false\r\n * isWeakSet({});               // false\r\n * isWeakSet(null);             // false\r\n * ```\r\n */\r\nexport const isWeakSet: <T extends object = object>(value: any) => value is WeakSet<T> = (/*#__PURE__*/_createObjIs<WeakSet<any>>(\"WeakSet\"));\r\n\r\n/**\r\n * Checks if the type of value is Map-like (has essential Map methods).\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value implements the Map interface, false otherwise.\r\n * @example\r\n * ```ts\r\n * isMapLike(new Map());                // true\r\n *\r\n * // Custom map-like implementation\r\n * const myMap = {\r\n *   get: (key) => { return null; },\r\n *   set: (key, value) => { return myMap; },\r\n *   has: (key) => { return false; },\r\n *   delete: (key) => { return false; },\r\n *   size: 0\r\n * };\r\n * isMapLike(myMap);                    // true\r\n *\r\n * isMapLike({});                       // false\r\n * isMapLike(null);                     // false\r\n * isMapLike(undefined);                // false\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isMapLike<K = any, V = any>(value: any): value is Map<K, V> {\r\n    return !!(value &&\r\n        isFunction(value.get) &&\r\n        isFunction(value.set) &&\r\n        isFunction(value.has) &&\r\n        isFunction(value.delete) &&\r\n        isNumber(value.size));\r\n}\r\n\r\n/**\r\n * Checks if the type of value is Set-like (has essential Set methods).\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value implements the Set interface, false otherwise.\r\n * @example\r\n * ```ts\r\n * isSetLike(new Set());                // true\r\n *\r\n * // Custom set-like implementation\r\n * const mySet = {\r\n *   add: (value) => { return mySet; },\r\n *   has: (value) => { return false; },\r\n *   delete: (value) => { return false; },\r\n *   size: 0\r\n * };\r\n * isSetLike(mySet);                    // true\r\n *\r\n * isSetLike({});                       // false\r\n * isSetLike(null);                     // false\r\n * isSetLike(undefined);                // false\r\n * ```\r\n */\r\nexport function isSetLike<T = any>(value: any): value is Set<T> {\r\n    return !!(value &&\r\n        isFunction(value.add) &&\r\n        isFunction(value.has) &&\r\n        isFunction(value.delete) &&\r\n        isNumber(value.size));\r\n}\r\n\r\n/**\r\n * Checks if the type of value does not evaluate to true value, handling some special\r\n * case usages of Boolean(true/false) and new Boolean(true/false).\r\n * @group Value Check\r\n * @param value - Value to be checked.\r\n * @return True if the value is not truthy, false otherwise.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isNotTruthy(value: any) {\r\n    return !value || !isTruthy(value);\r\n}\r\n\r\n/**\r\n * Checks if the type of value evaluates to true value, handling some special\r\n * case usages of Boolean(true/false) and new Boolean(true/false).\r\n * @group Value Check\r\n * @param value - Value to be checked.\r\n * @return True if the value is not truthy, false otherwise.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isTruthy(value: any) {\r\n    // Objects created with no prototype (Object.create(null)) cannot be converted to primitives\r\n    // Which causes this code to throw, additionally just using !! also fails for Boolean objects\r\n    // !!(new Boolean(false)) evaluates to true\r\n    return !(!value || safeGet(() => !(value && (0 + value)), !value));\r\n    //return !(!value || !(value && (0 + value)));\r\n}\r\n\r\n/**\r\n * Checks if the type of value is a BigInt.\r\n * @function\r\n * @group Type Identity\r\n * @param value - Value to be checked.\r\n * @return True if the value is a BigInt, false otherwise.\r\n * @example\r\n * ```ts\r\n * isBigInt(BigInt(42));           // true\r\n * isBigInt(42n);                  // true\r\n *\r\n * isBigInt(42);                   // false\r\n * isBigInt(\"42\");                 // false\r\n * isBigInt(null);                 // false\r\n * isBigInt(undefined);            // false\r\n * ```\r\n */\r\nexport const isBigInt: (value: any) => value is bigint = (/*#__PURE__*/_createIsWithPoly<bigint>(\"bigint\"));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2025 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\n/**\r\n * Stub function that returns nothing.\r\n * This is used as a placeholder for polyfills or other functions that do not return a value.\r\n * @internal\r\n * @returns undefined\r\n * @template T - The type of the return value\r\n */\r\nexport function _returnNothing<T>(): T | undefined {\r\n    return;\r\n}\r\n\r\n/**\r\n * Stub function that returns an empty array.\r\n * This is used as a placeholder for polyfills or other functions that expect an array return value.\r\n * @internal\r\n * @returns An empty array of type T\r\n * @template T - The type of the array elements\r\n */\r\nexport function _returnEmptyArray<T>(): T[] {\r\n    return [];\r\n}\r\n\r\n/**\r\n * Stub function that returns false.\r\n * @internal\r\n * @returns false\r\n */\r\nexport function _returnFalse(): boolean {\r\n    return false;\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { StrCls } from \"../internal/constants\";\r\nimport { _pureAssign } from \"../internal/treeshake_helpers\";\r\n\r\n/**\r\n * The asString() method returns a string representing the value by\r\n * explicitly using `String(`value`)`.\r\n *\r\n * @function\r\n * @since 0.4.3\r\n * @group String\r\n * @group Conversion\r\n * @group Value\r\n * @param value - The value to get a string representation of\r\n * @example\r\n * ```ts\r\n * const arr = [ 1, 2, 3];\r\n * asString(arr);       // \"1,2,3\"\r\n * asString(null);      // \"null\"\r\n * asString(undefined); // \"undefined\"\r\n * asString(42);        // \"42\"\r\n * asString(Symbol.for(\"Hello\"));   // \"Symbol(Hello)\"\r\n * ```\r\n */\r\nexport const asString: (value: any) => string = (/*#__PURE__*/_pureAssign(StrCls));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { CALL, EMPTY, NULL_VALUE, ObjProto, TO_STRING, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { asString } from \"../string/as_string\";\r\n\r\nconst ERROR_TYPE = \"[object Error]\";\r\n\r\n/**\r\n * Returns string representation of an object suitable for diagnostics logging.\r\n * @group Error\r\n * @group Diagnostic\r\n * @param object - The object to be converted to a diagnostic string value\r\n * @param format - Identifies whether the JSON value should be formated\r\n * - `true` - Format with 4 spaces\r\n * - 'number' - The number of spaces to format with\r\n * - `false` (or not Truthy) - Do not format\r\n * @returns A string representation of the object suitable for diagnostics logging\r\n * @example\r\n * ```ts\r\n * let obj = { a: 1, b: \"Hello\", c: { d: 2, e: \"Darkness\" } };\r\n *\r\n * let objStr = dumpObj(obj);\r\n * // objStr === \"[object Object]: { a: 1, b: \"Hello\", c: { d: 2, e: \"Darkness\" } }\"\r\n *\r\n * let objStrFmt = dumpObj(obj, true);\r\n * // objStrFmt === \"[object Object]: {\\n    a: 1,\\n    b: \"Hello\",\\n    c: {\\n        d: 2,\\n        e: \"Darkness\"\\n    }\\n}\"\r\n *\r\n * let objStrFmt2 = dumpObj(obj, 2);\r\n * // objStrFmt2 === \"[object Object]: {\\n  a: 1,\\n  b: \"Hello\",\\n  c: {\\n    d: 2,\\n    e: \"Darkness\"\\n  }\\n}\"\r\n *\r\n * let objStrFmt3 = dumpObj(obj, 0);\r\n * // objStrFmt3 === \"[object Object]: { a: 1, b: \"Hello\", c: { d: 2, e: \"Darkness\" } }\"\r\n *\r\n * let objStrFmt4 = dumpObj(obj, false);\r\n * // objStrFmt4 === \"[object Object]: { a: 1, b: \"Hello\", c: { d: 2, e: \"Darkness\" } }\"\r\n *\r\n * let objStrFmt5 = dumpObj(obj, null);\r\n * // objStrFmt5 === \"[object Object]: { a: 1, b: \"Hello\", c: { d: 2, e: \"Darkness\" } }\"\r\n *\r\n * let objStrFmt6 = dumpObj(obj, undefined);\r\n * // objStrFmt6 === \"[object Object]: { a: 1, b: \"Hello\", c: { d: 2, e: \"Darkness\" } }\"\r\n *\r\n * let objStrFmt7 = dumpObj(obj, \"\");\r\n * // objStrFmt7 === \"[object Object]: { a: 1, b: \"Hello\", c: { d: 2, e: \"Darkness\" } }\"\r\n *\r\n * let err = new Error(\"Hello Darkness\");\r\n * let errStr = dumpObj(err);\r\n * // errStr === \"[object Error]: { stack: 'Error: Hello Darkness\\n    at <anonymous>:1:13', message: 'Hello Darkness', name: 'Error'\"\r\n *\r\n * let errStrFmt = dumpObj(err, true);\r\n * // errStrFmt === \"[object Error]: {\\n    stack: \"Error: Hello Darkness\\n    at <anonymous>:1:13\",\\n    message: \"Hello Darkness\",\\n    name: \"Error\"\\n}\"\r\n *\r\n * let errStrFmt2 = dumpObj(err, 2);\r\n * // errStrFmt2 === \"[object Error]: {\\n  stack: \"Error: Hello Darkness\\n    at <anonymous>:1:13\",\\n  message: \"Hello Darkness\",\\n  name: \"Error\"\\n}\"\r\n *\r\n * let errStrFmt3 = dumpObj(err, 0);\r\n * // errStrFmt3 === \"[object Error]: { stack: \"Error: Hello Darkness\\n    at <anonymous>:1:13\", message: \"Hello Darkness\", name: \"Error\" }\"\r\n *\r\n * ```\r\n * @see {@link dumpObj}\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function dumpObj(object: any, format?: boolean | number): string {\r\n    let propertyValueDump = EMPTY;\r\n    const objType = ObjProto[TO_STRING][CALL](object);\r\n    if (objType === ERROR_TYPE) {\r\n        object = { stack: asString(object.stack), message: asString(object.message), name: asString(object.name) };\r\n    }\r\n\r\n    try {\r\n        propertyValueDump = JSON.stringify(object, NULL_VALUE, format ? (((typeof format as unknown) === \"number\") ? format as number : 4) : UNDEF_VALUE);\r\n        propertyValueDump = (propertyValueDump ? propertyValueDump.replace(/\"(\\w+)\"\\s*:\\s{0,1}/g, \"$1: \") : NULL_VALUE) || asString(object);\r\n    } catch(e) {\r\n        // Unable to convert object (probably circular)\r\n        propertyValueDump = \" - \" + dumpObj(e, format);\r\n    }\r\n\r\n    return objType + \": \" + propertyValueDump;\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022-2025 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\n/**\r\n * Throw an error exception with the specified optional message\r\n * @group Error\r\n * @param message - The optional message to include in the error\r\n */\r\nexport function throwError(message?: string): never {\r\n    throw new Error(message);\r\n}\r\n\r\n/**\r\n * Throw a type error with the specified optional message\r\n * @group Error\r\n * @param message - The optional message to include in the error\r\n */\r\nexport function throwTypeError(message?: string): never {\r\n    throw new TypeError(message);\r\n}\r\n\r\n/**\r\n * Throw a RangeError with the specified optional message\r\n * @group Error\r\n * @param message - The optional message to include in the error\r\n */\r\nexport function throwRangeError(message?: string): never {\r\n    throw new RangeError(message);\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2025 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { isStrictNullOrUndefined, isString } from \"../helpers/base\";\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\n\r\n/**\r\n * Throws a TypeError if the provided object is null or undefined.\r\n * This is a utility function to ensure that the object is valid before performing operations on it.\r\n * @param obj - The object to check\r\n * @internal\r\n * @since 0.12.0\r\n */\r\nexport function _throwIfNullOrUndefined(obj: any): void {\r\n    // Ensure we're working with an object\r\n    if (isStrictNullOrUndefined(obj)) {\r\n        throwTypeError(\"Cannot convert undefined or null to object\");\r\n    }\r\n}\r\n\r\n/**\r\n * Throws a TypeError if the provided value is not a string.\r\n * This is a utility function to ensure that the value is a string before performing string operations.\r\n * @param value - The value to check\r\n * @internal\r\n * @since 0.12.0\r\n */\r\nexport function _throwIfNotString(value: any): void {\r\n    if (!isString(value)) {\r\n        throwTypeError(\"'\" + dumpObj(value) + \"' is not a string\");\r\n    }\r\n}","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { CALL, ObjProto } from \"../internal/constants\";\r\n\r\n/**\r\n * The objHasOwnProperty() method returns a boolean indicating whether the object\r\n * has the specified property as its own property (as opposed to inheriting it).\r\n *\r\n * The objHasOwnProperty() method returns true if the specified property is a direct\r\n * property of the object — even if the value is null or undefined. The method returns\r\n * false if the property is inherited, or has not been declared at all. Unlike the in\r\n * operator, this method does not check for the specified property in the object's\r\n * prototype chain.\r\n *\r\n * The method can be called on most JavaScript objects, because most objects descend\r\n * from Object, and hence inherit its methods. For example Array is an Object, so you\r\n * can use objHasOwnProperty() method to check whether an index exists:\r\n * @group Object\r\n * @param obj - The object being evaluated\r\n * @param prop - The String or Symbol of the property to test\r\n * @returns `true` if the object has the specified property as own property; otherwise `false`\r\n * @example\r\n * ```ts\r\n * let example = {};\r\n * objHasOwnProperty(example, 'prop');   // false\r\n *\r\n * example.prop = 'exists';\r\n * objHasOwnProperty(example, 'prop');   // true - 'prop' has been defined\r\n *\r\n * example.prop = null;\r\n * objHasOwnProperty(example, 'prop');   // true - own property exists with value of null\r\n *\r\n * example.prop = undefined;\r\n * objHasOwnProperty(example, 'prop');   // true - own property exists with value of undefined\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function objHasOwnProperty<T = any>(obj: T, prop: PropertyKey): boolean {\r\n    return !!obj && ObjProto.hasOwnProperty[CALL](obj, prop);\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022-2025 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { GET_OWN_PROPERTY_DESCRIPTOR, ObjClass } from \"../internal/constants\";\r\nimport { _returnNothing } from \"../internal/stubs\";\r\nimport { _throwIfNullOrUndefined } from \"../internal/throwIf\";\r\nimport { _pureAssign, _pureRef } from \"../internal/treeshake_helpers\";\r\nimport { objHasOwnProperty } from \"./has_own_prop\";\r\n\r\nconst _objGetOwnPropertyDescriptor: (target: any, prop: PropertyKey) => PropertyDescriptor | undefined = (/*#__PURE__*/_pureAssign((/*#__PURE__*/_pureRef<typeof Object.getOwnPropertyDescriptor>(ObjClass as any, GET_OWN_PROPERTY_DESCRIPTOR)), _returnNothing));\r\n\r\n/**\r\n * The objHasOwn() method returns a boolean indicating whether the object\r\n * has the specified property as its own property (as opposed to inheriting it).\r\n * If the property is inherited, or does not exist, the method returns false.\r\n *\r\n * The objHasOwn() method returns true if the specified property is a direct property\r\n * of the object — even if the property value is null or undefined. The method returns\r\n * false if the property is inherited, or has not been declared at all. Unlike the in operator,\r\n * this method does not check for the specified property in the object's prototype chain.\r\n *\r\n * It is recommended over {@link objHasOwnProperty} () because it works for objects created using\r\n * objCreate(null) and with objects that have overridden the inherited hasOwnProperty() method.\r\n * While it is possible to workaround these problems by calling Object.prototype.hasOwnProperty()\r\n * on an external object, Object.hasOwn() is more intuitive.\r\n *\r\n * @function\r\n * @since 0.4.3\r\n * @group Object\r\n * @param obj - The object being evaluated\r\n * @param prop - The String or Symbol of the property to test\r\n * @returns `true` if the object has the specified property as own property; otherwise `false`\r\n * @example\r\n * ```ts\r\n * let example = {};\r\n * objHasOwn(example, 'prop');   // false\r\n *\r\n * example.prop = 'exists';\r\n * objHasOwn(example, 'prop');   // true - 'prop' has been defined\r\n *\r\n * example.prop = null;\r\n * objHasOwn(example, 'prop');   // true - own property exists with value of null\r\n *\r\n * example.prop = undefined;\r\n * objHasOwn(example, 'prop');   // true - own property exists with value of undefined\r\n * ```\r\n */\r\nexport const objHasOwn: <T = any>(obj: T, prop: PropertyKey) => boolean = (/*#__PURE__*/_pureAssign((/*#__PURE__*/_pureRef(ObjClass as any, \"hasOwn\")), polyObjHasOwn));\r\n\r\n\r\n/**\r\n * The polyObjHasOwn() method is a polyfill for {@link objHasOwn} when the native\r\n * [Object.hasOwnreturns](https://caniuse.com/?search=hasOwn) is not supported, it returns a\r\n * boolean indicating whether the object has the specified property as its own property (as\r\n * opposed to inheriting it). If the property is inherited, or does not exist, the method\r\n * returns false.\r\n *\r\n * The objHasOwn() method returns true if the specified property is a direct property\r\n * of the object — even if the property value is null or undefined. The method returns\r\n * false if the property is inherited, or has not been declared at all. Unlike the in operator,\r\n * this method does not check for the specified property in the object's prototype chain.\r\n *\r\n * It is recommended over objHasOwnProperty() because it works for objects created using\r\n * objCreate(null) and with objects that have overridden the inherited hasOwnProperty() method.\r\n * While it is possible to workaround these problems by calling Object.prototype.hasOwnProperty()\r\n * on an external object, Object.hasOwn() is more intuitive.\r\n *\r\n * @since 0.4.3\r\n * @group Object\r\n * @group Polyfill\r\n * @param obj - The object being evaluated\r\n * @param prop - The String or Symbol of the property to test\r\n * @returns `true` if the object has the specified property as own property; otherwise `false`\r\n * @example\r\n * ```ts\r\n * let example = {};\r\n * polyObjHasOwn(example, 'prop');   // false\r\n *\r\n * example.prop = 'exists';\r\n * polyObjHasOwn(example, 'prop');   // true - 'prop' has been defined\r\n *\r\n * example.prop = null;\r\n * polyObjHasOwn(example, 'prop');   // true - own property exists with value of null\r\n *\r\n * example.prop = undefined;\r\n * polyObjHasOwn(example, 'prop');   // true - own property exists with value of undefined\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polyObjHasOwn<T = any>(obj: T, prop: PropertyKey): boolean {\r\n    // Ensure we're working with an object\r\n    _throwIfNullOrUndefined(obj);\r\n        \r\n    return objHasOwnProperty(obj, prop) || !!_objGetOwnPropertyDescriptor(obj, prop)\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022-2025 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { isFunction, isObject } from \"../helpers/base\";\r\nimport { CALL } from \"../internal/constants\";\r\nimport { objHasOwn } from \"./has_own\";\r\n\r\n/**\r\n * Calls the provided `callbackFn` function once for each key in an object. This is equivelent to `arrForEach(Object.keys(theObject), callbackFn)` or\r\n * if not using the array helper `Object.keys(theObject).forEach(callbackFn)` except that this helper avoid creating a temporary of the object\r\n * keys before iterating over them and like the `arrForEach` helper you CAN stop or break the iteration by returning -1 from the `callbackFn` function.\r\n * @group Object\r\n * @typeParam T - The object type\r\n * @param callbackfn - A function that accepts up to two arguments, the key name and the current value of the property represented by the key.\r\n * @param thisArg - [Optional] An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, null or undefined\r\n * the object will be used as the this value.\r\n * @example\r\n * ```ts\r\n * function performAction<T>(target: T, source: any) {\r\n *    if (!isNullOrUndefined(source)) {\r\n *        objForEachKey(source, (key, value) => {\r\n *            // Set the target with a reference to the same value with the same name\r\n *            target[key] = value;\r\n *        });\r\n *    }\r\n *\r\n *    return target;\r\n * }\r\n * ```\r\n */\r\nexport function objForEachKey<T>(theObject: T, callbackfn: (key: string, value: T[keyof T]) => void | number, thisArg?: any): void {\r\n    if (theObject && (isObject(theObject) || isFunction(theObject))) {\r\n        for (const prop in theObject) {\r\n            if (objHasOwn(theObject, prop)) {\r\n                if (callbackfn[CALL](thisArg || theObject, prop, theObject[prop]) === -1) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { CALL, LENGTH } from \"../internal/constants\";\r\n\r\n/**\r\n * Calls the provided `callbackFn` function once for each element in an array in ascending index order. It is not invoked for index properties\r\n * that have been deleted or are uninitialized. And unlike the ES6 forEach() you CAN stop or break the iteration by returning -1 from the\r\n * `callbackFn` function.\r\n *\r\n * The range (number of elements) processed by arrForEach() is set before the first call to the `callbackFn`. Any elements added beyond the range\r\n * or elements which as assigned to indexes already processed will not be visited by the `callbackFn`.\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the element type of the array\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackfn - A `synchronous` function that accepts up to three arguments. arrForEach calls the callbackfn function one time for each element in the array.\r\n * @param thisArg - An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, null or undefined\r\n * the array will be used as the this value.\r\n * @remarks\r\n * arrForEach expects a `synchronous` function.\r\n * arrForEach does not wait for promises. Make sure you are aware of the implications while using promises (or async functions) as forEach callback.\r\n * @example\r\n * ```ts\r\n * const items = ['item1', 'item2', 'item3'];\r\n * const copyItems = [];\r\n *\r\n * // before using for loop\r\n * for (let i = 0; i < items.length; i++) {\r\n *   copyItems.push(items[i]);\r\n * }\r\n *\r\n * // before using forEach()\r\n * items.forEach((item) => {\r\n *   copyItems.push(item);\r\n * });\r\n *\r\n * // after\r\n * arrForEach(items, (item) => {\r\n *   copyItems.push(item);\r\n *   // May return -1 to abort the iteration\r\n * });\r\n *\r\n * // Also supports input as an array like object\r\n * const items = { length: 3, 0: 'item1', 1: 'item2', 2: 'item3' };\r\n * ```\r\n */\r\nexport function arrForEach<T = any>(theArray: ArrayLike<T>, callbackfn: (value: T, index: number, array: T[]) => void | number, thisArg?: any): void {\r\n    if (theArray) {\r\n        const len = theArray[LENGTH] >>> 0;\r\n        for (let idx = 0; idx < len; idx++) {\r\n            if (idx in theArray) {\r\n                if (callbackfn[CALL](thisArg || theArray, theArray[idx], idx, theArray) === -1) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { asString } from \"../string/as_string\";\r\nimport { ArrSlice, CALL, NULL_VALUE } from \"./constants\";\r\n\r\n/**\r\n * @function\r\n * @internal\r\n * @ignore\r\n * Internal helper to run the named function on the passed first argument, this does not support polyfill\r\n * or prototype fallback, so the function must exist on the provided first argument.\r\n * If the first argument is null, undefined or the function does not exist an exception will be thrown\r\n * by the runtime\r\n * @param funcName - The function name to call on the first argument passed to the wrapped function\r\n * @returns A function which will call the funcName against the first passed argument and pass on the remaining arguments\r\n */\r\nexport const _unwrapInstFunction:<R, T>(funcName: keyof T) => <T>(this: T, ..._args:any) => R = (/*#__PURE__*/_unwrapFunctionWithPoly);\r\n\r\n/**\r\n * @function\r\n * @internal\r\n * @ignore\r\n * Internal helper to convert an expanded function back into an instance `this` function call\r\n * @param funcName - The function name to call on the first argument passed to the wrapped function\r\n * @param clsProto - The Class or class prototype to fallback to if the instance doesn't have the function.\r\n * @returns A function which will call the funcName against the first passed argument and pass on the remaining arguments\r\n */\r\nexport const _unwrapFunction:<R, T>(funcName: keyof T, clsProto: T) => <T>(this: T, ..._args:any) => R = (/*#__PURE__*/_unwrapFunctionWithPoly);\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal helper to convert an expanded function back into an instance `this` function call\r\n * @param funcName - The function name to call on the first argument passed to the wrapped function\r\n * @param clsProto - The Class or class prototype to fallback to if the instance doesn't have the function.\r\n * @param polyFunc - The function to call if not available on the thisArg, act like the polyfill\r\n * @returns A function which will call the funcName against the first passed argument and pass on the remaining arguments\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _unwrapFunctionWithPoly<T, P extends (...args: any) => any>(funcName: keyof T, clsProto?: T, polyFunc?: P) {\r\n    let clsFn = clsProto ? clsProto[funcName] : NULL_VALUE;\r\n\r\n    return function(thisArg: any): ReturnType<P> {\r\n        let theFunc = (thisArg ? thisArg[funcName] : NULL_VALUE) || clsFn;\r\n        if (theFunc || polyFunc) {\r\n            let theArgs = arguments;\r\n            return ((theFunc || polyFunc) as Function).apply(thisArg, theFunc ? ArrSlice[CALL](theArgs, 1) : theArgs);\r\n        }\r\n\r\n        throwTypeError(\"\\\"\" + asString(funcName) + \"\\\" not defined for \" + dumpObj(thisArg));\r\n    };\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal helper to lookup and return the named property from the first argument (which becomes the this)\r\n *\r\n * @since 0.4.2\r\n * @typeParam T - The type of the object which contains the propName\r\n * @param propName - The property name\r\n * @returns The value of the property\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _unwrapProp<T>(propName: keyof T) {\r\n    return function (thisArg: T) {\r\n        return thisArg[propName];\r\n    };\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022-2025 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { GET_OWN_PROPERTY_DESCRIPTOR, GET_OWN_PROPERTY_SYMBOLS, ObjClass } from \"../internal/constants\";\r\nimport { isFunction, isStrictUndefined } from \"../helpers/base\";\r\nimport { objForEachKey } from \"./for_each_key\";\r\nimport { ILazyValue } from \"../helpers/lazy\";\r\nimport { _pureAssign, _pureRef } from \"../internal/treeshake_helpers\";\r\nimport { arrForEach } from \"../array/forEach\";\r\nimport { objPropertyIsEnumerable } from \"./property_is_enumerable\";\r\nimport { _returnEmptyArray, _returnNothing } from \"../internal/stubs\";\r\n\r\nconst _objGetOwnPropertyDescriptor: (target: any, prop: PropertyKey) => PropertyDescriptor | undefined = (/*#__PURE__*/_pureAssign((/*#__PURE__*/_pureRef<typeof Object.getOwnPropertyDescriptor>(ObjClass as any, GET_OWN_PROPERTY_DESCRIPTOR)), _returnNothing));\r\nconst _objGetOwnPropertySymbols: (obj: any) => symbol[] = (/*#__PURE__*/_pureAssign((/*#__PURE__*/_pureRef<typeof Object.getOwnPropertySymbols>(ObjClass, GET_OWN_PROPERTY_SYMBOLS)), _returnEmptyArray));\r\n\r\n/**\r\n * Definition of the Property Descriptor mappings for the objDefine functions.\r\n * If a descriptor has neither of value, writable, get and set keys, it is treated as a data descriptor.\r\n * If a descriptor has both [value or writable] and [get or set] keys, an exception is thrown.\r\n * Bear in mind that these attributes are not necessarily the descriptor's own properties. Inherited\r\n * properties will be considered as well. In order to ensure these defaults are preserved, you might\r\n * freeze existing objects in the descriptor object's prototype chain upfront, specify all options\r\n * explicitly, or point to null with {@link objCreate}(null).\r\n * @since 0.6.0\r\n * @group Object\r\n */\r\nexport interface ObjDefinePropDescriptor<V = any> {\r\n    /**\r\n     * Identifies if this property should be configurable (true) when this value is set to false,\r\n     * - the type of this property cannot be changed between data property and accessor property, and\r\n     * - the property may not be deleted, and\r\n     * - other attributes of its descriptor cannot be changed (however, if it's a data descriptor with writable: true,\r\n     * the value can be changed, and writable can be changed to false).\r\n     * Defaults to true.\r\n     */\r\n    c?: boolean;\r\n\r\n    /**\r\n     * Identifies if this property will be visible during enumeration of the properties on the corresponding object.\r\n     * Defaults to true.\r\n     */\r\n    e?: boolean;\r\n\r\n    /**\r\n     * __data descriptor__\r\n     * The value associated with the property. Can be any valid JavaScript value (number, object, function, etc.).\r\n     * Defaults to undefined.\r\n     */\r\n    v?: V;\r\n\r\n    /**\r\n     * A Lazy value instance which will be used to return the value, this will be wrapped in a getter function.\r\n     * @since 0.9.4\r\n     */\r\n    l?: ILazyValue<V>;\r\n\r\n    /**\r\n     * true if the value associated with the property may be changed with an assignment operator. Defaults to false.\r\n     */\r\n    w?: boolean;\r\n\r\n    /**\r\n     * A function which serves as a getter for the property, or undefined if there is no getter. When the property\r\n     * is accessed, this function is called without arguments and with this set to the object through which the\r\n     * property is accessed (this may not be the object on which the property is defined due to inheritance). The\r\n     * return value will be used as the value of the property. Defaults to undefined.\r\n     */\r\n    g?(): V;\r\n\r\n    /**\r\n     * A function which serves as a setter for the property, or undefined if there is no setter. When the property\r\n     * is assigned, this function is called with one argument (the value being assigned to the property) and with\r\n     * this set to the object through which the property is assigned. Defaults to undefined.\r\n     * @param value - The value to set the property to.\r\n     */\r\n    s?(value: V): void;\r\n}\r\n\r\n/**\r\n * An object whose keys represent the names of properties to be defined or modified and whose values are objects\r\n * describing those properties. Each value in props must be either a data descriptor or an accessor descriptor;\r\n * it cannot be both (see {@link ObjDefinePropDescriptor} for more details).\r\n * @since 0.6.0\r\n * @group Object\r\n */\r\nexport type ObjDefinePropDescriptorMap = {\r\n    [key: PropertyKey]: ObjDefinePropDescriptor\r\n};\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Mapping from ObjDefinePropDescriptor key to PropertyDescriptor key\r\n */\r\nconst propMap: { [key in keyof ObjDefinePropDescriptor]: keyof PropertyDescriptor } = {\r\n    e: \"enumerable\",\r\n    c: \"configurable\",\r\n    v: \"value\",\r\n    w: \"writable\",\r\n    g: \"get\",\r\n    s: \"set\"\r\n};\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Helper to convert ObjDefinePropDescriptor into PropertyDescriptor\r\n * @param value - The prop descriptor to convert\r\n * @returns\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nfunction _createProp(value: ObjDefinePropDescriptor): PropertyDescriptor {\r\n    let prop: PropertyDescriptor = {};\r\n    prop[propMap[\"c\"]] = true;\r\n    prop[propMap[\"e\"]] = true;\r\n\r\n    if (value.l) {\r\n        // Asign a getter function to return the value when requested\r\n        prop.get = () => value.l.v;\r\n\r\n        // If it has a setter then expose it as well\r\n        let desc = _objGetOwnPropertyDescriptor(value.l, \"v\");\r\n        if (desc && desc.set) {\r\n            prop.set = (newValue: any) => {\r\n                value.l.v = newValue;\r\n            };\r\n        }\r\n    }\r\n\r\n    objForEachKey(value, (key: keyof ObjDefinePropDescriptor, value) => {\r\n        prop[propMap[key]] = isStrictUndefined(value) ? prop[propMap[key]] : value;\r\n    });\r\n\r\n    return prop;\r\n}\r\n\r\n/**\r\n * Defines a new property directly on an object, or modifies an existing property on an object, and returns the object.\r\n * This is a wrapper for [Object.defineProperty](https://developer.mozilla.org/en-US/docs/web/javascript/reference/global_objects/object/defineproperty)\r\n *\r\n * This method allows a precise addition to or modification of a property on an object. Normal property addition through\r\n * assignment creates properties which show up during property enumeration (for...in loop or objKeys method), whose\r\n * values may be changed, and which may be deleted. This method allows these extra details to be changed from their\r\n * defaults. By default, properties added using objDefineProp() are not writable, not enumerable, and not configurable.\r\n *\r\n * Property descriptors present in objects come in two main flavors: data descriptors and accessor descriptors. A data\r\n * descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property\r\n * described by a getter-setter pair of functions. A descriptor must be one of these two flavors; it cannot be both.\r\n *\r\n * This is an alias for Object.defineProperty\r\n * @function\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param key - The name or Symbol of the property to be defined or modified.\r\n * @param descriptor - The descriptor for the property being defined or modified.\r\n * @returns The object that was passed to the function with the new or updated property.\r\n */\r\nexport const objDefineProp: <T>(target: T, key: PropertyKey, descriptor: PropertyDescriptor & ThisType<any>) => T = (/*#__PURE__*/_pureRef<typeof Object.defineProperty>(ObjClass as any, \"defineProperty\"));\r\n\r\n/**\r\n * The objDefineProperties() method defines new or modifies existing properties directly on an object, returning the object.\r\n * This is a wrapper for [Object.defineProperties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)\r\n * @function\r\n * @since 0.6.0\r\n * @group Object\r\n * @param target - The object on which to define or modify properties.\r\n * @param props - An object whose keys represent the names of properties to be defined or modified and whose values are\r\n * objects describing those properties. Each value in props must be either a data descriptor or an accessor descriptor;\r\n * it cannot be both (see {@link ObjDefinePropDescriptorMap} for more details).\r\n * @returns\r\n */\r\nexport const objDefineProperties: <T>(target: T, props: PropertyDescriptorMap & ThisType<any>) => T = (/*#__PURE__*/_pureRef<typeof Object.defineProperties>(ObjClass as any, \"defineProperties\"));\r\n\r\n/**\r\n * Try to define a get object property accessor for the target object, if a function is past as the value this will\r\n * be assumed to be a getter function and NOT the value.\r\n * @deprecated It is recommended that you use {@link objDefine} instead {@link objDefineGet} or {@link objDefineAccessors}\r\n * as it provides a deterministic way for identifying whether the value is a value or a function rather than wrapping any\r\n * function value in another function.\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param key - The name of the property to be defined or modified\r\n * @param value - The value or a function that returns the value\r\n * @param configurable - Can the value be changed, defaults to true.\r\n * @param enumerable - Should this get property be enumerable, defaults to true.\r\n * @returns The object that was passed to the function\r\n */\r\nexport function objDefineGet<T, V = any>(target: T, key: PropertyKey, value: (() => V) | V, configurable?: boolean, enumerable?: boolean): T {\r\n    return objDefineProp(target, key, _createProp({\r\n        e: enumerable,\r\n        c: configurable,\r\n        [isFunction(value) ? \"g\" : \"v\"]: value\r\n    }));\r\n}\r\n\r\n/**\r\n * Try to define get/set object property accessors for the target object/prototype, this will provide compatibility with\r\n * existing API definition when run within an ES5+ container that supports accessors but still enable the code to be loaded\r\n * and executed in an ES3 container, providing basic IE8 compatibility.\r\n * @deprecated It is recommended that you use {@link objDefine} instead {@link objDefineAccessors} as this internally creates\r\n * the {@link ObjDefinePropDescriptor} definition based on your provided arguments. And only using a minimum set of functions\r\n * reduces your overall bundle size.\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param prop - The name of the property to be defined or modified.\r\n * @param getProp - The getter function to wire against the getter.\r\n * @param setProp - The setter function to wire against the setter.\r\n * @param configurable - Can the value be changed, defaults to true\r\n * @param enumerable - Should this get property be enumerable, defaults to true.\r\n * @returns The object that was passed to the function\r\n */\r\nexport function objDefineAccessors<T, V = any>(target: T, prop: PropertyKey, getProp?: (() => V) | null, setProp?: ((v: V) => void) | null, configurable?: boolean, enumerable?: boolean): T {\r\n    let desc: ObjDefinePropDescriptor = {\r\n        e: enumerable,\r\n        c: configurable\r\n    };\r\n\r\n    if (getProp) {\r\n        desc.g = getProp;\r\n    }\r\n\r\n    if (setProp) {\r\n        desc.s = setProp;\r\n    }\r\n    \r\n    return objDefineProp(target, prop, _createProp(desc));\r\n}\r\n\r\n/**\r\n * The objDefine() method defines a new or modifies an existing single property accessors for the target object based\r\n * on the configuration defined for the propDesc argument of type {@link ObjDefinePropDescriptor}. This will call\r\n * {@link objDefineProp} after creating the required PropertyDescriptor populating defaults for the propDesc values.\r\n * Note, the default values (true) for `configurable` and `enumerable` are different from the defaults provided by objDefineProp.\r\n * @since 0.6.0\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param key - The name of the property to be defined or modified\r\n * @param propDesc - An object which defines the Property Descriptor mappings for the mapping.\r\n * @returns The target object.\r\n */\r\nexport function objDefine<T>(target: T, key: keyof T, propDesc: ObjDefinePropDescriptor): T {\r\n    return objDefineProp(target, key, _createProp(propDesc));\r\n}\r\n\r\n/**\r\n * The objDefineProps() method defines new or modifies existing properties directly for the target object using the keys\r\n * and configuration from the propDescMap argument. This will call {@link objDefineProperties} after creating the required\r\n * PropertyDescriptorMap from the propDescMap values.\r\n * Note, the default values (true) for `configurable` and `enumerable` are different from the defaults provided by objDefineProperties.\r\n * @since 0.6.0\r\n * @group Object\r\n * @param target - The object on which to define or modify properties.\r\n * @param propDescMap - An object whose keys represent the names of properties to be defined or modified and whose values are\r\n * objects describing those properties. Each value in props must be either a data descriptor or an accessor descriptor;\r\n * it cannot be both (see {@link ObjDefinePropDescriptorMap} for more details).\r\n * @returns The target object.\r\n */\r\nexport function objDefineProps<T>(target: T, propDescMap: ObjDefinePropDescriptorMap) {\r\n    let props: PropertyDescriptorMap = {};\r\n\r\n    objForEachKey(propDescMap, (key, value: ObjDefinePropDescriptor) => {\r\n        props[key] = _createProp(value);\r\n    });\r\n\r\n    arrForEach(_objGetOwnPropertySymbols(propDescMap), (sym) => {\r\n        if (objPropertyIsEnumerable(propDescMap, sym)) {\r\n            props[sym] = _createProp(propDescMap[sym]);\r\n        }\r\n    });\r\n\r\n    return objDefineProperties(target, props);\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { objDefineProp } from \"../object/define\";\r\nimport { objForEachKey } from \"../object/for_each_key\";\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal constant enum used to identify the mapping values for the _createMap function\r\n */\r\nexport const enum eMapValues {\r\n    Key = 0,\r\n    Value = 1\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal Helper function to create a key and value mapped representation of the values\r\n * @param values - The source values\r\n * @param keyType - Identifies the value to populate against the key\r\n * @param valueType - Identifies the value to populate against the value\r\n * @param completeFn - The function to call to complete the map (used to freeze the instance)\r\n * @param writable - Flag to indicate if the map should be writable\r\n * @returns\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _createKeyValueMap(values: any, keyType: eMapValues, valueType: eMapValues, completeFn?: <T>(value: T) => T, writable?: boolean) {\r\n    let theMap: any = {};\r\n    objForEachKey(values, (key, value) => {\r\n        _assignMapValue(theMap, key, keyType ? value : key, writable);\r\n        _assignMapValue(theMap, value, valueType ? value : key, writable);\r\n    });\r\n\r\n    return completeFn ? completeFn(theMap) : theMap;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal Helper function to assign a key and value to the map\r\n * @param theMap - The map to assign the key and value to\r\n * @param key - The key to assign\r\n * @param value - The value to assign\r\n * @param writable - Flag to indicate if the map should be writable\r\n */\r\nexport function _assignMapValue(theMap: any, key: any, value: any, writable?: boolean) {\r\n    objDefineProp(theMap, key, {\r\n        value: value,\r\n        enumerable: true,\r\n        writable: !!writable\r\n    });\r\n}","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2025 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ObjClass } from \"../internal/constants\";\r\nimport { _returnFalse } from \"../internal/stubs\";\r\nimport { _pureAssign, _pureRef } from \"../internal/treeshake_helpers\";\r\n\r\n/**\r\n * The `objIsFrozen()` method determines if an object is frozen. An object is frozen if and only if it is not\r\n * extensible, all its properties are non-configurable, and all its data properties are non-writable.\r\n *\r\n * @function\r\n * @since 0.12.0\r\n * @group Object\r\n * @param obj - The object to check if it is frozen.\r\n * @returns A Boolean indicating whether or not the given object is frozen.\r\n * @example\r\n * ```typescript\r\n * const obj = { a: 1 };\r\n * console.log(objIsFrozen(obj)); // false\r\n *\r\n * const frozen = objFreeze({ b: 2 });\r\n * console.log(objIsFrozen(frozen)); // true\r\n * ```\r\n */\r\nexport const objIsFrozen: (obj: any) => boolean = (/*#__PURE__*/_pureAssign((/*#__PURE__*/_pureRef<typeof Object.isFrozen>(ObjClass, \"isFrozen\")), _returnFalse));\r\n\r\n/**\r\n * The `objIsSealed()` method determines if an object is sealed. An object is sealed if it is not\r\n * extensible and if all its properties are non-configurable (but potentially still writable).\r\n *\r\n * @function\r\n * @since 0.12.0\r\n * @group Object\r\n * @param obj - The object to check if it is sealed.\r\n * @returns A Boolean indicating whether or not the given object is sealed.\r\n * @example\r\n * ```typescript\r\n * const obj = { a: 1 };\r\n * console.log(objIsSealed(obj)); // false\r\n *\r\n * const sealed = objSeal({ b: 2 });\r\n * console.log(objIsSealed(sealed)); // true\r\n *\r\n * // Frozen objects are also sealed\r\n * const frozen = objFreeze({ c: 3 });\r\n * console.log(objIsSealed(frozen)); // true\r\n * ```\r\n */\r\nexport const objIsSealed: (obj: any) => boolean = (/*#__PURE__*/_pureAssign((/*#__PURE__*/_pureRef<typeof Object.isSealed>(ObjClass, \"isSealed\")), _returnFalse));","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022-2025 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { NULL_VALUE, ObjClass, __PROTO__ } from \"../internal/constants\";\r\nimport { isArray, isFunction, isObject } from \"../helpers/base\";\r\nimport { objForEachKey } from \"./for_each_key\";\r\nimport { polyObjEntries, polyObjValues } from \"../polyfills/object/objKeys\";\r\nimport { polyObjIs } from \"../polyfills/object/objIs\";\r\nimport { _pureAssign, _pureRef } from \"../internal/treeshake_helpers\";\r\nimport { objIsFrozen } from \"./object_state\";\r\nimport { _throwIfNullOrUndefined } from \"../internal/throwIf\";\r\n\r\nconst _objFreeze = (/*#__PURE__*/_pureRef<typeof Object.freeze>(ObjClass, \"freeze\"));\r\n\r\nexport function _doNothing<T>(value: T) {\r\n    return  value;\r\n}\r\n\r\n/**\r\n * Fallback implementation of Object.getPrototypeOf for environments that do not support it.\r\n * This function retrieves the prototype of a given object. If the object does not have a prototype, it returns null.\r\n * @internal\r\n * @ignore\r\n * @param value - The object whose prototype is to be returned, which may be null.\r\n * @returns true if the value is an object, false otherwise.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _getProto(value: any) {\r\n    _throwIfNullOrUndefined(value);\r\n    return value[__PROTO__] || NULL_VALUE;\r\n}\r\n\r\n/**\r\n * The `objAssign()` method copies all enumerable own properties from one or more source objects\r\n * to a target object. It returns the modified target object.\r\n *\r\n * Properties in the target object are overwritten by properties in the sources if they have the\r\n * same key. Later sources' properties overwrite earlier ones.\r\n *\r\n * The objAssign() method only copies enumerable and own properties from a source object to a\r\n * target object. It uses `Get` on the source and `Set` on the target, so it will invoke\r\n * [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) and\r\n * [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set).\r\n * Therefore it assigns properties, versus copying or defining new properties. This may make it\r\n * unsuitable for merging new properties into a prototype if the merge sources contain getters.\r\n *\r\n * For copying property definitions (including their enumerability) into prototypes, use\r\n * {@link objGetOwnPropertyDescriptor} and {@link objDefineProp} instead.\r\n *\r\n * Both String and Symbol properties are copied.\r\n *\r\n * In case of an error, for example if a property is non-writable, a TypeError is raised, and\r\n * the target object is changed if any properties are added before the error is raised.\r\n * @function\r\n * @group Object\r\n * @example\r\n * ```ts\r\n * const obj = { a: 1 };\r\n * const copy = objAssign({}, obj);\r\n * console.log(copy); // { a: 1 }\r\n *\r\n * const o1 = { a: 1 };\r\n * const o2 = { b: 2 };\r\n * const o3 = { c: 3 };\r\n *\r\n * const obj = objAssign(o1, o2, o3);\r\n * console.log(obj); // { a: 1, b: 2, c: 3 }\r\n * console.log(o1);  // { a: 1, b: 2, c: 3 }, target object itself is changed.\r\n * ```\r\n */\r\nexport const objAssign = (/*#__PURE__*/_pureRef<typeof Object.assign>(ObjClass, \"assign\"));\r\n\r\n/**\r\n * The `objKeys()` method returns an array of a given object's own enumerable property names, iterated in\r\n * the same order that a normal loop would.\r\n *\r\n * objKeys() returns an array whose elements are strings corresponding to the enumerable properties found\r\n * directly upon object. The ordering of the properties is the same as that given by looping over the\r\n * properties of the object manually.\r\n * @function\r\n * @group Object\r\n * @param value - The object to obtain a copy of the keys from\r\n * @returns An array of the properties names for the value object.\r\n * @example\r\n * ```ts\r\n * // simple array\r\n * const arr = ['a', 'b', 'c'];\r\n * console.log(objKeys(arr)); // console: ['0', '1', '2']\r\n *\r\n * // array-like object\r\n * const obj = { 0: 'a', 1: 'b', 2: 'c' };\r\n * console.log(objKeys(obj)); // console: ['0', '1', '2']\r\n *\r\n * // array-like object with random key ordering\r\n * const anObj = { 100: 'a', 2: 'b', 7: 'c' };\r\n * console.log(objKeys(anObj)); // console: ['2', '7', '100']\r\n *\r\n * // getFoo is a property which isn't enumerable\r\n * const myObj = objCreate({}, {\r\n *   getFoo: {\r\n *     value() { return this.foo; }\r\n *   }\r\n * });\r\n * myObj.foo = 1;\r\n * console.log(objKeys(myObj)); // console: ['foo']\r\n * ```\r\n */\r\nexport const objKeys: (value: any) => string[] = (/*#__PURE__*/_pureRef<typeof Object.keys>(ObjClass, \"keys\"));\r\n\r\n/**\r\n * Internal helper function with a visited array to track objects we've seen, this is used\r\n * to prevent infinite recursion when we have circular references in the object graph.\r\n * @internal\r\n * @ignore\r\n * @param val - The object to be frozen.\r\n * @param visited - An array to track visited objects to prevent infinite recursion.\r\n */\r\nfunction _deepFreeze(val: any, visited: any[]): any {\r\n    if ((isArray(val) || isObject(val) || isFunction(val)) && !objIsFrozen(val)) {\r\n        // If already visited, don't process again to prevent infinite recursion\r\n        for (let lp = 0; lp < visited.length; lp++) {\r\n            if (visited[lp] === val) {\r\n                return val;\r\n            }\r\n        }\r\n        \r\n        // Mark this object as visited by adding it to the array\r\n        visited.push(val);\r\n        \r\n        // Freeze properties recursively\r\n        objForEachKey(val, (_key, propValue) => {\r\n            _deepFreeze(propValue, visited);\r\n        });\r\n        \r\n        objFreeze(val);\r\n    }\r\n    \r\n    return val;\r\n}\r\n/**\r\n * Perform a deep freeze on the object and all of it's contained values / properties by recursively calling\r\n * `objFreeze()` on all enumerable properties of the object and on each property returned.\r\n * This implementation handles recursive objects (objects that reference themselves) by tracking visited objects.\r\n * @group Object\r\n * @param value - the object to be completly frozen.\r\n * @returns The originally passed in object.\r\n */\r\nexport function objDeepFreeze<T>(value: T): T {\r\n    return _objFreeze ? _deepFreeze(value, []) : value;\r\n}\r\n\r\n/**\r\n * The `objFreeze()` method freezes an object. A frozen object can no longer be changed; freezing an object\r\n * prevents new properties from being added to it, existing properties from being removed, prevents changing the\r\n * enumerability, configurability, or writability of existing properties, and prevents the values of existing\r\n * properties from being changed. In addition, freezing an object also prevents its prototype from being changed.\r\n * `objFreeze()` returns the same object that was passed in.\r\n *\r\n * Nothing can be added to or removed from the properties set of a frozen object. Any attempt to do so will fail,\r\n * either silently or by throwing a TypeError exception (most commonly, but not exclusively, when in strict mode).\r\n *\r\n * For data properties of a frozen object, values cannot be changed, the writable and configurable attributes are\r\n * set to false. Accessor properties (getters and setters) work the same (and still give the illusion that you are\r\n * changing the value). Note that values that are objects can still be modified, unless they are also frozen. As\r\n * an object, an array can be frozen; after doing so, its elements cannot be altered and no elements can be added\r\n * to or removed from the array.\r\n *\r\n * `objFreeze()` returns the same object that was passed into the function. It does not create a frozen copy.\r\n * @function\r\n * @group Object\r\n * @param value - The object to freeze.\r\n * @returns The object that was passed to the function.\r\n */\r\nexport const objFreeze: <T>(value: T) => T = (/*#__PURE__*/_pureAssign(_objFreeze, _doNothing));\r\n\r\n/**\r\n * The `objSeal()` method seals an object, preventing new properties from being added to it and marking all\r\n * existing properties as non-configurable. Values of present properties can still be changed as long as they\r\n * are writable.\r\n * @function\r\n * @group Object\r\n * @param value - The object which should be sealed.\r\n * @returns The object being sealed.\r\n */\r\nexport const objSeal: <T>(value: T) => T = (/*#__PURE__*/_pureAssign((/*#__PURE__*/_pureRef<typeof Object.seal>(ObjClass, \"seal\")), _doNothing));\r\n\r\n/**\r\n * The objGetPrototypeOf() method returns the prototype (i.e. the value of the internal `Prototype` property)\r\n * of the specified value.\r\n * @function\r\n * @since 0.4.4\r\n * @group Object\r\n * @param value - The object whose prototype is to be returned, which may be null.\r\n */\r\nexport const objGetPrototypeOf: (value: any) => any = (/*#__PURE__*/_pureAssign((/*#__PURE__*/_pureRef<typeof Object.getPrototypeOf>(ObjClass, \"getPrototypeOf\")), _getProto));\r\n\r\n/**\r\n * Returns an array of key/values of the enumerable properties of an object\r\n * @function\r\n * @since 0.9.7\r\n * @group Object\r\n * @group ArrayLike\r\n * @param value - Object that contains the properties and methods.\r\n * @example\r\n * ```ts\r\n * objEntries({ Hello: \"Darkness\", my: \"old\", friend: \".\" });\r\n * // [ [ \"Hello\", \"Darkness\" ], [ \"my\", \"old\"], [ \"friend\", \".\" ] ]\r\n *\r\n * // Array-like object\r\n * objEntries({ 0: \"a\", 1: \"b\", 2: \"c\" }));\r\n * // [ ['0', 'a'], ['1', 'b'], ['2', 'c'] ]\r\n *\r\n * // Array-like object with random key ordering\r\n * objEntries({ 100: \"a\", 2: \"b\", 7: \"c\" });\r\n * // [ ['2', 'b'], ['7', 'c'], ['100', 'a'] ]*\r\n * ```\r\n */\r\nexport const objEntries: <T = any>(value: {} | { [s: string]: T } | ArrayLike<T>) => [string, T][] = (/*#__PURE__*/_pureAssign((/*#__PURE__*/_pureRef<typeof Object.entries>(ObjClass, \"entries\")), polyObjEntries));\r\n\r\n/**\r\n * The objValues() returns an array whose elements are values of enumerable string-keyed properties found\r\n * directly upon object. This is the same as iterating with a for...in loop, except that a for...in loop\r\n * enumerates properties in the prototype chain as well. The order of the array returned by objValues()\r\n * is the same as that provided by a for...in loop.\r\n *\r\n * If you need the property keys, use objKeys() instead. If you need both the property keys and values, use objEntries() instead.\r\n * @function\r\n * @since 0.9.7\r\n * @group Object\r\n * @group ArrayLike\r\n * @param value - The object that contains the properties and methods.\r\n * @returns An array containing the given object's own enumerable string-keyed property values.\r\n * @example\r\n * ```ts\r\n * objValues({ Hello: \"Darkness\", my: \"old\", friend: \".\" });\r\n * // [ \"Darkness\", \"old\", \".\" ]\r\n *\r\n * // Array-like object\r\n * objValues({ 0: \"a\", 1: \"b\", 2: \"c\" }));\r\n * // [ 'a', 'b', 'c']\r\n *\r\n * // Array-like object with random key ordering\r\n * objValues({ 100: \"a\", 2: \"b\", 7: \"c\" });\r\n * // [ 'b', 'c', 'a']\r\n * ```\r\n */\r\nexport const objValues: <T = any>(value: {} | { [s: string]: T } | ArrayLike<T>) => T[] = (/*#__PURE__*/_pureAssign((/*#__PURE__*/_pureRef<typeof Object.values>(ObjClass, \"values\")), polyObjValues));\r\n\r\n// Add after objValues definition\r\n\r\n/**\r\n * The objIs() method determines whether two values are the same value.\r\n *\r\n * Two values are the same if one of the following holds:\r\n * - both undefined\r\n * - both null\r\n * - both true or both false\r\n * - both strings of the same length with the same characters in the same order\r\n * - both the same object (meaning both values reference the same object in memory)\r\n * - both numbers and both +0, both -0, both NaN, or both non-zero and both not NaN and both have the same value\r\n *\r\n * This is different from the === operator in that:\r\n * - NaN is equal to NaN\r\n * - +0 is not equal to -0\r\n *\r\n * @function\r\n * @since 0.12.0\r\n * @group Object\r\n * @param value1 - The first value to compare\r\n * @param value2 - The second value to compare\r\n * @returns True if the values are the same value, false otherwise\r\n * @example\r\n * ```ts\r\n * // Case 1: NaN\r\n * objIs(NaN, NaN);                  // true\r\n * NaN === NaN;                      // false\r\n *\r\n * // Case 2: Signed zeros\r\n * objIs(0, -0);                     // false\r\n * objIs(+0, -0);                    // false\r\n * objIs(-0, -0);                    // true\r\n * 0 === -0;                         // true\r\n *\r\n * // Regular comparison\r\n * objIs('hello', 'hello');          // true\r\n * objIs('hello', 'goodbye');        // false\r\n * objIs(1, 1);                      // true\r\n * objIs(1, 2);                      // false\r\n *\r\n * // Objects\r\n * const obj = { a: 1 };\r\n * objIs(obj, obj);                  // true\r\n * objIs(obj, { a: 1 });             // false (different objects with same content)\r\n * ```\r\n */\r\nexport const objIs: (value1: any, value2: any) => boolean = (/*#__PURE__*/_pureAssign((/*#__PURE__*/_pureRef<typeof Object.is>(ObjClass, \"is\")), polyObjIs));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { eMapValues, _createKeyValueMap, _assignMapValue } from \"../internal/map\";\r\nimport { objForEachKey } from \"../object/for_each_key\";\r\nimport { objFreeze } from \"../object/object\";\r\n\r\n/**\r\n * A type that identifies an enum class generated from a constant enum.\r\n * @group Enum\r\n * @typeParam E - The constant enum type\r\n *\r\n * Returned from {@link createEnum}\r\n */\r\nexport declare type EnumCls<E = any> = {\r\n    readonly [key in keyof E extends string | number | symbol ? keyof E : never]: key extends string ? E[key] : key\r\n} & { readonly [key in keyof E]: E[key] };\r\n\r\n/**\r\n * A type that identifies an object whose property values are generally mapped to the key of the source type.\r\n * @group Enum\r\n * @typeParam E - The source constant enum type which identifies the keys and values\r\n * @typeParam T - The resulting type with the keys from the source type.\r\n *\r\n * Returned from {@link createEnumKeyMap}\r\n */\r\nexport declare type EnumNameMap<E = any, T = { readonly [key in keyof E]: key extends string ? key : keyof E }> = {\r\n    readonly [key in keyof E extends string | number | symbol ? keyof E : never]: key extends string ? key : keyof E\r\n} & T;\r\n\r\n/**\r\n * A type that identifies an object whose property values are mapped to the resulting values of the source objects keys.\r\n * @group Enum\r\n * @typeParam E - The source type which identifies the keys.\r\n * @typeParam T - The resulting type with the keys from the source type.\r\n *\r\n * Returned from {@link createEnumValueMap}\r\n */\r\nexport declare type EnumValueMap<E = any, T = { readonly [key in keyof E]: E[keyof E] }> = {\r\n    readonly [key in keyof E extends string | number | symbol ? keyof E : never]: key extends string ? E[key] : E[key]\r\n} & T;\r\n\r\n/**\r\n * A type that maps the keys of E to the type of V.\r\n * @group Enum\r\n * @typeParam E - The type of object that defines the Key (typically a constant enum)\r\n * @typeParam V - The value type, typically `string`, `number` but may also be a complex type.\r\n * @typeParam T - The resulting type with the keys from the source type.\r\n *\r\n * Returned from {@link createSimpleMap}\r\n */\r\nexport declare type EnumTypeMap<E, V, T = { readonly [key in keyof E]: V }> = {\r\n    readonly [key in keyof E extends string ? keyof E : never]: V\r\n} & T;\r\n\r\n/**\r\n * Create a TypeScript style enum class which is a mapping that maps from the key -\\> value and the value -\\> key.\r\n * This is effectively the same as defining a non-constant enum, but this only repeats the \"Name\" of the enum value once.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * const enum Animal {\r\n *    Dog = 0,\r\n *    Cat = 1,\r\n *    Butterfly = 2,\r\n *    Bear = 3\r\n * }\r\n * const Animals = createEnum<typeof Animal>({\r\n *    Dog: Animal.Dog,\r\n *    Cat: Animal.Cat,\r\n *    Butterfly: Animal.Butterfly,\r\n *    Bear: Animal.Bear\r\n * });\r\n * // You end up with an object that maps everything to the name\r\n * Animals.Dog === 0;           // true\r\n * Animals[0] === \"Dog\";        // true\r\n * Animals[\"Dog\"] === 0;        // true\r\n * Animals.Cat === 1;           // true\r\n * Animals[1] === \"Cat\";        // true\r\n * Animals[\"Cat\"] === 1;        // true\r\n * ```\r\n\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the const enum type being mapped\r\n * @returns A new frozen (immutable) object which looks and acts like a TypeScript Enum class.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createEnum<E>(values: { [key in keyof E]: E[keyof E] }): EnumCls<E> {\r\n    return _createKeyValueMap(values, eMapValues.Value, eMapValues.Key, objFreeze);\r\n}\r\n\r\n/**\r\n * Create a map object which contains both the property key and value which both map to the key,\r\n * E[key] =\\> key and E[value] =\\> key.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * const enum Animal {\r\n *    Dog = 0,\r\n *    Cat = 1,\r\n *    Butterfly = 2,\r\n *    Bear = 3\r\n * }\r\n * const animalMap = createEnumKeyMap<typeof Animal>({\r\n *    Dog: Animal.Dog,\r\n *    Cat: Animal.Cat,\r\n *    Butterfly: Animal.Butterfly,\r\n *    Bear: Animal.Bear\r\n * });\r\n * // You end up with an object that maps everything to the name\r\n * animalMap.Dog === \"Dog\";         // true\r\n * animalMap[0] === \"Dog\";          // true\r\n * animalMap[\"Dog\"] === \"Dog\";      // true\r\n * animalMap.Cat === \"Cat\";         // true\r\n * animalMap[1] === \"Cat\";          // true\r\n * animalMap[\"Cat\"] === \"Cat\";      // true\r\n * // Helper function to always return the \"Name\" of the type of animal\r\n * function getAnimalType(type: string | number | Animal) {\r\n *     return animalMap[type];\r\n * }\r\n * ```\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the const enum type being mapped\r\n * @returns A new frozen (immutable) object which contains a property for each key and value that returns the value.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createEnumKeyMap<E>(values: { [key in keyof E]: E[keyof E] }): EnumNameMap<E> {\r\n    return _createKeyValueMap(values, eMapValues.Key, eMapValues.Key, objFreeze);\r\n}\r\n\r\n/**\r\n * Create a map object which contains both the perperty key and value which both map to the resulting value,\r\n * E[key] =\\> value and E[value] =\\> value.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * const enum Animal {\r\n *    Dog = 0,\r\n *    Cat = 1,\r\n *    Butterfly = 2,\r\n *    Bear = 3\r\n * }\r\n * const animalMap = createEnumValueMap<typeof Animal>({\r\n *    Dog: Animal.Dog,\r\n *    Cat: Animal.Cat,\r\n *    Butterfly: Animal.Butterfly,\r\n *    Bear: Animal.Bear\r\n * });\r\n * // You end up with an object that maps everything to the name\r\n * animalMap.Dog === 0;     // true\r\n * animalMap[0] === 0;      // true\r\n * animalMap[\"Dog\"] === 0;  // true\r\n * animalMap.Cat === 1;     // true\r\n * animalMap[1] === 1;      // true\r\n * animalMap[\"Cat\"] === 1;  // true\r\n *\r\n * // Helper function to always return the \"Name\" of the type of animal\r\n * function getAnimalValue(type: string | number | Animal) {\r\n *     return animalMap[type];\r\n * }\r\n * ```\r\n\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the const enum type being mapped\r\n * @returns A new frozen (immutable) object which contains a property for each key and value that returns the value.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createEnumValueMap<E>(values: { [key in keyof E]: E[keyof E] }): EnumValueMap<E> {\r\n    return _createKeyValueMap(values, eMapValues.Value, eMapValues.Value, objFreeze);\r\n}\r\n\r\n/**\r\n * Create a map object which contains both the perperty key and value which both map to the requested\r\n * generic mapValue with a type of V, E[key] =\\> mapValue and E[value] =\\> mapValue.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * const enum Animal {\r\n *    Dog = 0,\r\n *    Cat = 1,\r\n *    Butterfly = 2,\r\n *    Bear = 3\r\n * };\r\n * // Creates a simple mapping to a string value\r\n * const animalFamilyMap = createValueMap<typeof Animal, string>({\r\n *    Dog: [ Animal.Dog, \"Canidae\"],\r\n *    Cat: [ Animal.Cat, \"Felidae\"],\r\n *    Butterfly: [ Animal.Butterfly, \"Papilionidae\"],\r\n *    Bear: [ Animal.Bear, \"Ursidae\"]\r\n * });\r\n * // You end up with an object that maps everything to the name\r\n * animalMap.Dog === \"Canidae\";     // true with typeof animalMap.Dog is \"string\"\r\n * animalMap[0] === \"Canidae\";      // true with typeof animalMap[0] is \"string\"\r\n * animalMap[\"Dog\"] === \"Canidae\";  // true with typeof animalMap[\"Dog\"] is \"string\"\r\n * animalMap.Cat === \"Felidae\";     // true with typeof animalMap.Cat is \"string\"\r\n * animalMap[1] === \"Felidae\";      // true with typeof animalMap[1] is \"string\"\r\n * animalMap[\"Cat\"] === \"Felidae\";  // true with typeof animalMap[\"Cat\"] is \"string\"\r\n * ```\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the const enum type (eg. typeof Animal);\r\n * @typeParam V - Identifies the type of the mapping `string`; `number`; etc is not restructed to primitive types.\r\n * @returns A new frozen (immutable) object which contains a property for each key and value that returns the defiend mapped value.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createSimpleMap<E, V>(values: { [key in keyof E]: [ E[keyof E], V] }): EnumTypeMap<E, V> {\r\n    let mapClass: any = {};\r\n    objForEachKey(values, (key, value) => {\r\n        _assignMapValue(mapClass, key, value[1]);\r\n        _assignMapValue(mapClass, value[0], value[1]);\r\n    });\r\n\r\n    return objFreeze(mapClass);\r\n}\r\n\r\n/**\r\n * Create a strongly types map object which contains both the perperty key and value which both map\r\n * to the requested mapValue,\r\n * E[key] =\\> mapValue and E[value] =\\> mapValue.\r\n * - E = the const enum type (typeof Animal);\r\n * - V = Identifies the valid values for the keys, this should include both the enum numeric and string key of the type. The\r\n * resulting \"Value\" of each entry identifies the valid values withing the assignments.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * // Create a strongly types map\r\n * const animalFamilyMap = createTypeMap<typeof Animal, {\r\n *     // Defined the enum lookups\r\n *     [Animal.Dog]: \"Canidae\",\r\n *     [Animal.Cat]: \"Felidae\",\r\n *     [Animal.Butterfly]: \"Papilionidae\",\r\n *     [Animal.Bear]: \"Ursidae\",\r\n *     // Defined Named reference\r\n *     Dog: \"Canidae\",\r\n *     Cat: \"Felidae\",\r\n *     Butterfly: \"Papilionidae\",\r\n *     Bear: \"Ursidae\",\r\n * }>({\r\n *     Dog: [ Animal.Dog, \"Canidae\"],\r\n *     Cat: [ Animal.Cat, \"Felidae\"],\r\n *     Butterfly: [ Animal.Butterfly, \"Papilionidae\"],\r\n *     Bear: [ Animal.Bear, \"Ursidae\"]\r\n * });\r\n * // You end up with a strongly types result for each value\r\n * animalMap.Dog === \"Canidae\";     // true with typeof animalMap.Dog is (const) \"Canidae\"\r\n * animalMap[0] === \"Canidae\";      // true with typeof animalMap[0] is \"Canidae\"\r\n * animalMap[\"Dog\"] === \"Canidae\";  // true with typeof animalMap[\"Dog\"] is \"Canidae\"\r\n * animalMap.Cat === \"Felidae\";     // true with typeof animalMap.Cat is \"Felidae\"\r\n * animalMap[1] === \"Felidae\";      // true with typeof animalMap[1] is \"Felidae\"\r\n * animalMap[\"Cat\"] === \"Felidae\";  // true with typeof animalMap[\"Cat\"] is \"Felidae\"\r\n *\r\n * or using an interface to define the direct string mappings\r\n *\r\n * interface IAnimalFamilyMap {\r\n *     Dog: \"Canidae\",\r\n *     Cat: \"Felidae\",\r\n *     Butterfly: \"Papilionidae\",\r\n *     Bear: \"Ursidae\"\r\n * }\r\n *\r\n * // Create a strongly types map\r\n * const animalFamilyMap = createTypeMap<typeof Animal, IAnimalFamilyMap & {\r\n *     // Defined the enum lookups\r\n *     [Animal.Dog]: \"Canidae\",\r\n *     [Animal.Cat]: \"Felidae\",\r\n *     [Animal.Butterfly]: \"Papilionidae\",\r\n *     [Animal.Bear]: \"Ursidae\"\r\n * }>({\r\n *     Dog: [ Animal.Dog, \"Canidae\"],\r\n *     Cat: [ Animal.Cat, \"Felidae\"],\r\n *     Butterfly: [ Animal.Butterfly, \"Papilionidae\"],\r\n *     Bear: [ Animal.Bear, \"Ursidae\"]\r\n * });\r\n *\r\n * // You also end up with a strongly types result for each value\r\n * animalMap.Dog === \"Canidae\";     // true with typeof animalMap.Dog is (const) \"Canidae\"\r\n * animalMap[0] === \"Canidae\";      // true with typeof animalMap[0] is \"Canidae\"\r\n * animalMap[\"Dog\"] === \"Canidae\";  // true with typeof animalMap[\"Dog\"] is \"Canidae\"\r\n * animalMap.Cat === \"Felidae\";     // true with typeof animalMap.Cat is \"Felidae\"\r\n * animalMap[1] === \"Felidae\";      // true with typeof animalMap[1] is \"Felidae\"\r\n * animalMap[\"Cat\"] === \"Felidae\";  // true with typeof animalMap[\"Cat\"] is \"Felidae\"\r\n * ```\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the enum type\r\n * @typeParam T - Identifies the return type that is being created via the mapping.\r\n * @returns A new frozen (immutable) object which contains a property for each key and value that returns the defined mapped value.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createTypeMap<E, T>(values: { [key in keyof E]: [ E[keyof E], T[keyof T] ] }): T {\r\n    return createSimpleMap<E, T>(values as any) as unknown as T;\r\n}","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { createEnumKeyMap } from \"../helpers/enum\";\r\n\r\n/**\r\n * Identifies the Symbol static properties which are symbols themselves as a constant\r\n * enum to aid in minification when fetching them from the global symbol implementation.\r\n *\r\n * See: [Well Known Symbols](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols)\r\n * @group Symbol\r\n */\r\nexport const enum WellKnownSymbols {\r\n    /**\r\n     * The Symbol.asyncIterator symbol is a builtin symbol that is used to access an\r\n     * object's `Symbol.asyncIterator` method. In order for an object to be async iterable,\r\n     * it must have a Symbol.asyncIterator key.\r\n     *\r\n     * See: [Symbol.asyncIterator](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator)\r\n     */\r\n    asyncIterator = 0,\r\n\r\n    /**\r\n     * The `Symbol.hasInstance` well-known symbol is used to determine if a constructor\r\n     * object recognizes an object as its instance. The instanceof operator's behavior\r\n     * can be customized by this symbol.\r\n     *\r\n     * See: [Symbol.hasInstance](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance)\r\n     */\r\n    hasInstance = 1,\r\n\r\n    /**\r\n     * The `Symbol.isConcatSpreadable` symbol (Symbol.isConcatSpreadable) can be defined as an\r\n     * own or inherited property and its value is a boolean. It can control behavior for\r\n     * arrays and array-like objects:\r\n     * - For array objects, the default behavior is to spread (flatten) elements.\r\n     * Symbol.isConcatSpreadable can avoid flattening in these cases.\r\n     * - For array-like objects, the default behavior is no spreading or flattening.\r\n     * Symbol.isConcatSpreadable can force flattening in these cases.\r\n     *\r\n     * See: [Symbol.isConcatSpreadable](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable)\r\n     */\r\n    isConcatSpreadable = 2,\r\n\r\n    /**\r\n     * Whenever an object needs to be iterated (such as at the beginning of a for..of loop),\r\n     * its `Symbol.iterator` method is called with no arguments, and the returned iterator is used\r\n     * to obtain the values to be iterated.\r\n     *\r\n     * See: [Symbol.iterator](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator)\r\n     */\r\n    iterator = 3,\r\n\r\n    /**\r\n     * This function is also used to identify if objects have the behavior of regular expressions.\r\n     * For example, the methods String.prototype.startsWith(), String.prototype.endsWith() and\r\n     * String.prototype.includes(), check if their first argument is a regular expression and\r\n     * will throw a TypeError if they are. Now, if the match symbol is set to false (or a Falsy\r\n     * value), it indicates that the object is not intended to be used as a regular expression object.\r\n     *\r\n     * See: [Symbol.match](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match)\r\n     */\r\n    match = 4,\r\n\r\n    /**\r\n     * The `Symbol.matchAll` well-known symbol returns an iterator, that yields matches of the regular\r\n     * expression against a string. This function is called by the String.prototype.matchAll() method.\r\n     *\r\n     * See: [Symbol.matchAll](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll)\r\n     */\r\n    matchAll = 5,\r\n\r\n    /**\r\n     * The `Symbol.replace` well-known symbol specifies the method that replaces matched substrings\r\n     * of a string. This function is called by the String.prototype.replace() method.\r\n     *\r\n     * For more information, [RegExp.prototype[Symbol.replace]](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RegExp/\\@\\@replace)()\r\n     * and [String.prototype.replace](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/replace)().\r\n     *\r\n     * See: [Symbol.replace](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace)\r\n     */\r\n    replace = 6,\r\n\r\n    /**\r\n     * The `Symbol.search` well-known symbol specifies the method that returns the index within a\r\n     * string that matches the regular expression. This function is called by the\r\n     * [String.prototype.search()](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/search)\r\n     * method.\r\n     *\r\n     * For more information, see [RegExp.prototype[\\@\\@search]](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RegExp/\\@\\@search)()\r\n     * and [String.prototype.search()](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/search).\r\n     *\r\n     * See: [Symbol.species](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species)\r\n     */\r\n    search = 7,\r\n\r\n    /**\r\n     * The well-known symbol `Symbol.species` specifies a function-valued property that the constructor\r\n     * function uses to create derived objects.\r\n     * See: [Symbol.species](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species)\r\n     */\r\n    species = 8,\r\n\r\n    /**\r\n     * The `Symbol.split` well-known symbol specifies the method that splits a string at the indices\r\n     * that match a regular expression. This function is called by the String.prototype.split() method.\r\n     *\r\n     * For more information, see [RegExp.prototype[\\@\\@split]](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RegExp/\\@\\@split)()\r\n     * and [String.prototype.split()](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/split).\r\n     * See: [Symbol.split](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split)\r\n     */\r\n    split = 9,\r\n\r\n    /**\r\n     * With the help of the `Symbol.toPrimitive` property (used as a function value), an object can be\r\n     * converted to a primitive value. The function is called with a string argument hint, which\r\n     * specifies the preferred type of the result primitive value. The hint argument can be one of\r\n     * \"number\", \"string\", and \"default\".\r\n     *\r\n     * See: [Symbol.toPrimitive](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive)\r\n     */\r\n    toPrimitive = 10,\r\n\r\n    /**\r\n     * The `Symbol.toStringTag` well-known symbol is a string valued property that is used in the\r\n     * creation of the default string description of an object. It is accessed internally by the\r\n     * [Object.prototype.toString](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/toString)()\r\n     * method.\r\n     *\r\n     * See: [Symbol.toStringTag](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag)\r\n     */\r\n    toStringTag = 11,\r\n\r\n    /**\r\n     * The `Symbol.unscopables` well-known symbol is used to specify an object value of whose own\r\n     * and inherited property names are excluded from the with environment bindings of the associated\r\n     * object.\r\n     *\r\n     * See: [Symbol.unscopables](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables)\r\n     */\r\n    unscopables = 12\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @internal\r\n */\r\nexport const _wellKnownSymbolMap = (/*#__PURE__*/createEnumKeyMap<typeof WellKnownSymbols>({\r\n    asyncIterator: WellKnownSymbols.asyncIterator,\r\n    hasInstance: WellKnownSymbols.hasInstance,\r\n    isConcatSpreadable: WellKnownSymbols.isConcatSpreadable,\r\n    iterator: WellKnownSymbols.iterator,\r\n    match: WellKnownSymbols.match,\r\n    matchAll: WellKnownSymbols.matchAll,\r\n    replace: WellKnownSymbols.replace,\r\n    search: WellKnownSymbols.search,\r\n    species: WellKnownSymbols.species,\r\n    split: WellKnownSymbols.split,\r\n    toPrimitive: WellKnownSymbols.toPrimitive,\r\n    toStringTag: WellKnownSymbols.toStringTag,\r\n    unscopables: WellKnownSymbols.unscopables\r\n}));\r\n\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { safe } from \"../helpers/safe\";\r\nimport { TimeoutOverrideFuncs } from \"../timer/timeout\";\r\nimport { UNDEFINED } from \"./constants\";\r\n\r\nconst GLOBAL_CONFIG_KEY = \"__tsUtils$gblCfg\";\r\n\r\ndeclare let globalThis: Window;\r\ndeclare let global: Window;\r\ndeclare let self: any;\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal interface for holding the global polyfill symbols\r\n */\r\nexport interface _GlobalPolySymbols {\r\n    k: { [key: string ]: symbol },\r\n    s: { [sym: symbol ]: string },\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal interface for defining global test hooks\r\n */\r\nexport interface _GlobalTestHooks {\r\n    lzy?: boolean;\r\n}\r\n\r\nexport interface TsUtilsGlobalConfig extends _GlobalTestHooks {\r\n    gblSym?: _GlobalPolySymbols,\r\n    tmOut?: TimeoutOverrideFuncs,\r\n}\r\n\r\nlet _globalCfg: { [key: string ]: any };\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Helper to get the current global value\r\n * @returns\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _getGlobalValue(): Window {\r\n    var result: Window;\r\n\r\n    if (typeof globalThis !== UNDEFINED) {\r\n        result = globalThis;\r\n    }\r\n\r\n    if (!result && typeof self !== UNDEFINED) {\r\n        result = self;\r\n    }\r\n\r\n    if (!result && typeof window !== UNDEFINED) {\r\n        result = window;\r\n    }\r\n\r\n    if (!result && typeof global !== UNDEFINED) {\r\n        result = global;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Gets/Sets the named value from the global config store, this is used to share configuration across\r\n * multiple modules. Primarily used for poly symbol and test hooks.\r\n * @returns The globally registered value.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _getGlobalConfig(): TsUtilsGlobalConfig {\r\n    if (!_globalCfg) {\r\n        let gbl: any = safe(_getGlobalValue).v || {};\r\n        _globalCfg = gbl[GLOBAL_CONFIG_KEY] = gbl[GLOBAL_CONFIG_KEY] || {};\r\n    }\r\n\r\n    return _globalCfg;\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2025 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { safe } from \"../helpers/safe\";\r\nimport { objDefine } from \"../object/define\";\r\nimport { POLYFILL_TAG, POLYFILL_TYPE_NAME } from \"./poly_helpers\";\r\n\r\n/**\r\n * Tags the target object as a polyfill with the specified type name.\r\n * This is used to identify polyfills in the codebase.\r\n * @internal\r\n * @ignore\r\n * @group Polyfill\r\n * @param target - The target object to tag as a polyfill.\r\n * @param polyfillTypeName - The type name of the polyfill.\r\n * @returns\r\n */\r\nexport function _tagAsPolyfill<T>(target: T, polyfillTypeName: string): T {\r\n    if (target) {\r\n        safe(() => {\r\n            (target as any)[POLYFILL_TAG] = true;\r\n            (target as any)[POLYFILL_TYPE_NAME] = polyfillTypeName;\r\n        });\r\n        // Attempt to define the POLYFILL_TAG property on the target object)\r\n        safe(objDefine, [target, POLYFILL_TAG, {\r\n            v: true,\r\n            w: false,\r\n            e: false\r\n        }]);\r\n\r\n        // Attempt to define the POLYFILL_TYPE_NAME property on the target object\r\n        safe(objDefine, [target, POLYFILL_TYPE_NAME, {\r\n            v: polyfillTypeName,\r\n            w: false,\r\n            e: false\r\n        }]);\r\n    }\r\n\r\n    return target;\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022-2025 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { __PROTO__, FUNCTION, ObjClass, OBJECT, PROTOTYPE } from \"../internal/constants\";\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { _pureAssign, _pureRef } from \"../internal/treeshake_helpers\";\r\nimport { objDefineProperties } from \"./define\";\r\nimport { safe } from \"../helpers/safe\";\r\nimport { isStrictNullOrUndefined } from \"../helpers/base\";\r\n\r\n/**\r\n * Creates an object that has the specified prototype, and that optionally contains specified properties. This helper exists to avoid adding a polyfil\r\n * for older browsers that do not define Object.create eg. ES3 only, IE8 just in case any page checks for presence/absence of the prototype implementation.\r\n * Note: For consistency this will not use the Object.create implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @function\r\n * @group Object\r\n * @param obj - Object to use as a prototype. May be null\r\n * @param properties - JavaScript object that contains one or more property descriptors.\r\n */\r\nexport const objCreate: (obj: any, properties?: PropertyDescriptorMap & ThisType<any>) => any = (/* #__PURE__*/_pureAssign((/* #__PURE__*/_pureRef<typeof Object.create>(ObjClass as any, \"create\")), polyObjCreate));\r\n\r\n/**\r\n * Creates an object that has the specified prototype, and that optionally contains specified properties. This helper exists to avoid adding a polyfil\r\n * for older browsers that do not define Object.create eg. ES3 only, IE8 just in case any page checks for presence/absence of the prototype implementation.\r\n * Note: For consistency this will not use the Object.create implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @group Polyfill\r\n * @group Object\r\n * @param obj - Object to use as a prototype. May be null\r\n * @param properties - JavaScript object that contains one or more property descriptors.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polyObjCreate(obj: any, properties?: PropertyDescriptorMap & ThisType<any>): any {\r\n    let newObj: any = null;\r\n\r\n    // Create a temporary constructor function to set the prototype\r\n    function tempFunc() {}\r\n\r\n    if (!isStrictNullOrUndefined(obj)) {\r\n        let type = typeof obj;\r\n        if (type !== OBJECT && type !== FUNCTION) {\r\n            throwTypeError(\"Prototype must be an Object or function: \" + dumpObj(obj));\r\n        }\r\n\r\n        tempFunc[PROTOTYPE] = obj;\r\n        safe(() => {\r\n            (tempFunc as any)[__PROTO__] = obj;\r\n        });\r\n        newObj = new (tempFunc as any)();\r\n    } else {\r\n        // If obj is null or undefined, create an empty object\r\n        newObj = {};\r\n    }\r\n\r\n    // Apply property descriptors if provided\r\n    if (properties) {\r\n        safe(objDefineProperties, [newObj, properties]);\r\n    }\r\n    \r\n    return newObj;\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\n/**\r\n * Return the number of milliseconds that have elapsed since January 1, 1970 00:00:00 UTC.\r\n *\r\n * To offer protection against timing attacks and fingerprinting, the precision of utcNow()\r\n * might get rounded depending on browser settings. In Firefox, the privacy.reduceTimerPrecision\r\n * preference is enabled by default and defaults to 20µs in Firefox 59; in 60 it will be 2ms.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @returns A Number representing the milliseconds elapsed since the UNIX epoch.\r\n * @example\r\n * ```ts\r\n * let now = utcNow();\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function utcNow() {\r\n    return (Date.now || polyUtcNow)();\r\n}\r\n\r\n/**\r\n * Polyfill fallback to return the number of milliseconds that have elapsed since January 1, 1970 00:00:00 UTC.\r\n *\r\n * To offer protection against timing attacks and fingerprinting, the precision of utcNow()\r\n * might get rounded depending on browser settings. In Firefox, the privacy.reduceTimerPrecision\r\n * preference is enabled by default and defaults to 20µs in Firefox 59; in 60 it will be 2ms.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n * @group Polyfill\r\n *\r\n * @returns A Number representing the milliseconds elapsed since the UNIX epoch.\r\n  * @example\r\n * ```ts\r\n * let now = polyUtcNow();\r\n * ```\r\n*/\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polyUtcNow() {\r\n    return new Date().getTime();\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2023 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ArrSlice, CALL } from \"../internal/constants\";\r\n\r\n/**\r\n * The `fnApply` function calls the specified `fn` function with the given `thisArg` as the `this` value,\r\n * and the optional `argArray` arguments provided as an array (or an Array-Like Object).\r\n *\r\n * Normally, when calling a function, the value of `this` inside the function is the object that the\r\n * function was accessed on. With `fnApply()`, you can assign an arbitrary value as this when calling an\r\n * existing function, without first attaching the function to the object as a property. This allows you\r\n * to use methods of one object as generic utility functions.\r\n *\r\n * You can also use any kind of object which is ArrayLike as the second parameter. In practice, this means\r\n * that it needs to have a length property, and integer (\"index\") properties in the range (0..length - 1).\r\n * For example, you could use a NodeList, or a custom object like `{ 'length': 2, '0': 'eat', '1': 'bananas' }`.\r\n * You can also use `arguments`.\r\n *\r\n * @since 0.9.8\r\n * @group Function\r\n *\r\n * @param fn - The function to be called\r\n * @param thisArg - The value of `this` provided for the call to `fn`. If the function is not in strict mode,\r\n * `null` and `undefined` will be replaced with the global object, and primitive values will be converted to objects.\r\n * @param argArray - An array-like object, specifying the arguments with which `fn` should be called, or `null` or\r\n * `undefined` if no arguments should be provided to the function.\r\n * @returns The result of calling the function with the specified `this` value and arguments.\r\n * @example\r\n * ```ts\r\n * // min / max number in an array\r\n * let max = fnApply(Math.max, null, [ 21, 42, 84, 168, 7, 3 ]);\r\n * // 168\r\n *\r\n * let min = fnApply(Math.min, null, [ 21, 42, 84, 168, 7, 3 ]);\r\n * // 3\r\n *\r\n * const module1 = {\r\n *     prefix: \"Hello\",\r\n *     x: 21,\r\n *     getX() {\r\n *         return this.x;\r\n *     },\r\n *     log(value: string) {\r\n *         return this.prefix + \" \" + value + \" : \" + this.x\r\n *     }\r\n * };\r\n *\r\n * // The 'this' parameter of 'getX' is bound to 'module'.\r\n * module1.getX(); // 21\r\n * module1.log(\"Darkness\"); // Hello Darkness : 21\r\n *\r\n * // Create a new function 'boundGetX' with the 'this' parameter bound to 'module'.\r\n * let module2 = {\r\n *     prefix: \"my\",\r\n *     x: 42\r\n * };\r\n *\r\n * // Call the function of module1 with module2 as it's this\r\n * fnApply(module1.getX, module2); // 42\r\n * fnApply(module1.log, module2, [ \"friend\" ]); // my friend : 42\r\n * ```\r\n */\r\nexport function fnApply<F extends (...args: any) => any, T>(fn: F, thisArg: T, argArray?: ArrayLike<any>): ReturnType<F> {\r\n    return fn.apply(thisArg, argArray);\r\n}\r\n\r\n/**\r\n * The `fnCall` function calls the function with the given `thisArg` as the `this` value and with\r\n * al of the `_args` provided as it's `arguments`.\r\n *\r\n * Note: This is almost identical to `fnApply`, except that the function arguments are passed to `fnCall`\r\n * individually as a list, while with `fnApply` that are combined into a single array argument.\r\n *\r\n * Normally, when calling a function, the value of `this` inside the function is the object that the\r\n * function was accessed on. With `fnCall()`, you can pass an arbitrary value as the `this` when calling an\r\n * existing function, without first attaching the function to the object as a property. This allows you\r\n * to use methods of one object as generic utility functions.\r\n *\r\n * @since 0.9.8\r\n * @group Function\r\n *\r\n * @param fn - The function to be called\r\n * @param thisArg - The value of `this` provided for the call to `fn`. If the function is not in strict mode,\r\n * `null` and `undefined` will be replaced with the global object, and primitive values will be converted to objects.\r\n * @param _args - The zero or more arguments to be passed to the `fn` function.\r\n * @returns The result of calling the function with the specified `this` value and arguments.\r\n * @example\r\n * ```ts\r\n * // min / max number in an array\r\n * let max = fnCall(Math.max, null, 21, 42, 84, 168, 7, 3);\r\n * // 168\r\n *\r\n * let min = fnCall(Math.min, null, 21, 42, 84, 168, 7, 3);\r\n * // 3\r\n *\r\n * const module1 = {\r\n *     prefix: \"Hello\",\r\n *     x: 21,\r\n *     getX() {\r\n *         return this.x;\r\n *     },\r\n *     log(value: string) {\r\n *         return this.prefix + \" \" + value + \" : \" + this.x\r\n *     }\r\n * };\r\n *\r\n * // The 'this' parameter of 'getX' is bound to 'module'.\r\n * module1.getX(); // 21\r\n * module1.log(\"Darkness\"); // Hello Darkness : 21\r\n *\r\n * // Create a new function 'boundGetX' with the 'this' parameter bound to 'module'.\r\n * let module2 = {\r\n *     prefix: \"my\",\r\n *     x: 42\r\n * };\r\n *\r\n * // Call the function of module1 with module2 as it's this\r\n * fnCall(module1.getX, module2); // 42\r\n * fnCall(module1.log, module2, \"friend\"); // my friend : 42\r\n * ```\r\n */\r\nexport function fnCall<F extends (...args: any) => any, T>(fn: F, thisArg: T, ...args: Parameters<F>): ReturnType<F>;\r\n\r\n/**\r\n * The `fnCall` function calls the function with the given `thisArg` as the `this` value and with\r\n * al of the `_args` provided as it's `arguments.\r\n *\r\n * > This is almost identical to `fnApply`, except that the function arguments are passed to `fnCall`\r\n * individually as a list, while with `fnApply` that are combined into a single array argument.\r\n *\r\n * Normally, when calling a function, the value of `this` inside the function is the object that the\r\n * function was accessed on. With `fnCall()`, you can pass an arbitrary value as the `this` when calling an\r\n * existing function, without first attaching the function to the object as a property. This allows you\r\n * to use methods of one object as generic utility functions.\r\n *\r\n * @since 0.9.8\r\n * @group Function\r\n *\r\n * @param fn - The function to be called\r\n * @param thisArg - The value of `this` provided for the call to `fn`. If the function is not in strict mode,\r\n * `null` and `undefined` will be replaced with the global object, and primitive values will be converted to objects.\r\n * @param args - The zero or more arguments to be passed to the `fn` function.\r\n * @returns The result of calling the function with the specified `this` value and arguments.\r\n * @example\r\n * ```ts\r\n * const module1 = {\r\n *     prefix: \"Hello\",\r\n *     x: 21,\r\n *     getX() {\r\n *         return this.x;\r\n *     },\r\n *     log(value: string) {\r\n *         return this.prefix + \" \" + value + \" : \" + this.x\r\n *     }\r\n * };\r\n *\r\n * // The 'this' parameter of 'getX' is bound to 'module'.\r\n * module1.getX(); // 21\r\n * module1.log(\"Darkness\"); // Hello Darkness : 21\r\n *\r\n * // Create a new function 'boundGetX' with the 'this' parameter bound to 'module'.\r\n * let module2 = {\r\n *     prefix: \"my\",\r\n *     x: 42\r\n * };\r\n *\r\n * // Call the function of module1 with module2 as it's this\r\n * fnCall(module1.getX, module2); // 42\r\n * fnCall(module1.log, module2, \"friend\"); // my friend : 42\r\n * ```\r\n */\r\nexport function fnCall<F extends (...args: any) => any, T>(fn: F, thisArg: T): ReturnType<F> {\r\n    return fn.apply(thisArg, ArrSlice[CALL](arguments, 2));\r\n}\r\n\r\n/**\r\n * Creates a new function that when called will set the value of `thisArg` as the `this` keyword\r\n * value whrn calling the provided `fn` instance, and all of the arguments passed to the new\r\n * function will be passed along to the original provided instance.\r\n * @param fn - The function instance to be called\r\n * @param thisArg - The value to be used as the `this` when calling the `fn`\r\n * @returns The value returned by the original `fn` after executing with the provided `thisArg`.\r\n * @since 0.9.8\r\n * @group Function\r\n * @example\r\n * ```ts\r\n * const module1 = {\r\n *     x: 21,\r\n *     getX() {\r\n *         return this.x;\r\n *     },\r\n * };\r\n *\r\n * // The 'this' parameter of 'getX' is bound to 'module'.\r\n * console.log(module1.getX()); // 21\r\n *\r\n * // Create a new function 'boundGetX' with the 'this' parameter bound to 'module'.\r\n * let module2 = {\r\n *     x: 42\r\n * };\r\n *\r\n * module2.getX = fnBind(module1.getX, module2);\r\n * module2.getX(); // 42\r\n *\r\n * // It can also be used to proxy to the original function from the new one\r\n * module2.getX = fnBind(module1.getX, module1);\r\n * module2.getX(); // 21\r\n * ```\r\n */\r\nexport function fnBind<F extends Function, T>(fn: F, thisArg: T, ...argArray: any[]): F;\r\n\r\n/**\r\n * Creates a new function that when called will set the value of `thisArg` as the `this` keyword\r\n * value whrn calling the provided `fn` instance, and all of the arguments passed to the new\r\n * function will be passed along to the original provided instance.\r\n * @param fn - The function instance to be called\r\n * @param thisArg - The value to be used as the `this` when calling the `fn`\r\n * @returns The value returned by the original `fn` after executing with the provided `thisArg`.\r\n * @since 0.9.8\r\n * @group Function\r\n * @example\r\n * ```ts\r\n * const module1 = {\r\n *     x: 21,\r\n *     getX() {\r\n *         return this.x;\r\n *     },\r\n * };\r\n *\r\n * // The 'this' parameter of 'getX' is bound to 'module'.\r\n * console.log(module1.getX()); // 21\r\n *\r\n * // Create a new function 'boundGetX' with the 'this' parameter bound to 'module'.\r\n * let module2 = {\r\n *     x: 42\r\n * };\r\n *\r\n * module2.getX = fnBind(module1.getX, module2);\r\n * module2.getX(); // 42\r\n *\r\n * // It can also be used to proxy to the original function from the new one\r\n * module2.getX = fnBind(module1.getX, module1);\r\n * module2.getX(); // 21\r\n * ```\r\n */\r\nexport function fnBind<F extends Function, T>(fn: F, thisArg: T): F {\r\n    return fn.bind.apply(fn, ArrSlice[CALL](arguments, 1));\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { fnApply } from \"../funcs/funcs\";\r\nimport { _GlobalTestHooks, _getGlobalConfig } from \"../internal/global\";\r\nimport { objDefineProp } from \"../object/define\";\r\nimport { ICachedValue } from \"./cache\";\r\n\r\n/**\r\n * @internal\r\n * Internal flag which is set by the public {@link setBypassLazyCache}, should not be externally exported\r\n */\r\nexport let _globalLazyTestHooks: _GlobalTestHooks;\r\n\r\nexport function _initTestHooks() {\r\n    _globalLazyTestHooks = _getGlobalConfig();\r\n}\r\n\r\n/**\r\n * Interface of the object returned by the {@link getLazy} instance\r\n * @since 0.4.5\r\n * @group Lazy\r\n */\r\nexport interface ILazyValue<T> extends ICachedValue<T> {\r\n    /**\r\n     * Returns the current cached value from the lazy lookup, if the callback function has not yet occurred\r\n     * accessing the value will cause the lazy evaluation to occur and the result will be returned.\r\n     */\r\n    v: T,\r\n\r\n    /**\r\n     * Identifies if this instance is bypassing the internal caching mechanism which is used for testing\r\n     */\r\n    b?: boolean\r\n}\r\n\r\n/**\r\n * Create and return an readonly {@link ILazyValue} instance which will cache and return the value returned\r\n * by the callback function. The callback function will only be called once, multiple access of the value\r\n * does not cause re-execution of the callback as the result from the first call is cached internally.\r\n * @since 0.4.5\r\n * @group Lazy\r\n * @param cb - The callback function to fetch the value to be lazily evaluated and cached\r\n * @param argArray - Optional array of arguments to be passed to the callback function (since 0.12.3)\r\n * @returns A new readonly {@link ILazyValue} instance which wraps the callback and will be used to cache\r\n * the result of the callback\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * let cachedValue = getLazy(() =&gt; callSomeExpensiveFunction());\r\n * let theValue;\r\n *\r\n * // With arguments - the argument types are inferred from the callback\r\n * let cachedValueWithArgs = getLazy(\r\n *   (id: number, name: string) =&gt; callSomeExpensiveFunction(id, name),\r\n *   [123, \"test\"]\r\n * );\r\n *\r\n * // Just checking if there is an object still does not cause the evaluation\r\n * if (cachedValue) {\r\n *     // This will cause the evaluation to occur and the result will be cached\r\n *     theValue = cachedValue.v;\r\n * }\r\n *\r\n * // Accessing the value again will not cause the re-evaluation to occur, it will just return the same\r\n * // result value again.\r\n * theValue === cachedValue.v;  // true\r\n *\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function getLazy<T, F extends (...args: any[]) => T = () => T>(cb: F, argArray?: Parameters<F>): ILazyValue<T> {\r\n    let lazyValue = { } as ILazyValue<T>;\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n    lazyValue.b = _globalLazyTestHooks.lzy;\r\n\r\n    objDefineProp(lazyValue, \"v\", {\r\n        configurable: true,\r\n        get: function () {\r\n            let result = fnApply(cb, null, argArray);\r\n            if (!_globalLazyTestHooks.lzy) {\r\n                // Just replace the value\r\n                objDefineProp(lazyValue, \"v\", {\r\n                    value: result\r\n                });\r\n            }\r\n\r\n            lazyValue.b = _globalLazyTestHooks.lzy;\r\n\r\n            return result;\r\n        }\r\n    });\r\n\r\n    return lazyValue;\r\n}\r\n\r\n/**\r\n * Test Hook function used to cause the internal caching of objects to be bypassed, this should never\r\n * be enabled for production as it has additional performance impact caused by the repetitive creation\r\n * of the lazy wrappers.\r\n * @group Lazy\r\n * @since 0.5.0\r\n * @param newValue - When `true` will cause all new lazy implementations to bypass the cached lookup.\r\n */\r\nexport function setBypassLazyCache(newValue: boolean) {\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n    _globalLazyTestHooks.lzy = newValue;\r\n}\r\n\r\n/**\r\n * Create and return a writable {@link ILazyValue} instance which will cache and return the value returned\r\n * by the callback function. The callback function will only be called once, multiple access of the value\r\n * does not cause re-execution of the callback as the result from the first call is cached internally. The\r\n * value may be set as many times as required, if the callback has not been called when you set the value\r\n * it will never get called.\r\n * @since 0.11.7\r\n * @group Lazy\r\n * @param cb - The callback function to fetch the value to be lazily evaluated and cached\r\n * @param argArray - Optional array of arguments to be passed to the callback function (since 0.12.3)\r\n * @returns A new writable {@link ILazyValue} instance which wraps the callback and will be used to cache\r\n * the result of the callback\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * let cachedValue = getWritableLazy(() =&gt; callSomeExpensiveFunction());\r\n * let theValue;\r\n *\r\n * // With arguments - the argument types are inferred from the callback\r\n * let cachedValueWithArgs = getWritableLazy(\r\n *   (id: number, name: string) =&gt; callSomeExpensiveFunction(id, name),\r\n *   [123, \"test\"]\r\n * );\r\n *\r\n * // Just checking if there is an object still does not cause the evaluation\r\n * if (cachedValue) {\r\n *     // This will cause the evaluation to occur and the result will be cached\r\n *     theValue = cachedValue.v;\r\n * }\r\n *\r\n * // Accessing the value again will not cause the re-evaluation to occur, it will just return the same\r\n * // result value again.\r\n * theValue === cachedValue.v;  // true\r\n *\r\n * // Setting the value\r\n * let cachedValue = getWritableLazy(() =&gt; callSomeExpensiveFunction());\r\n * let theValue = \"new Value\";\r\n *\r\n * // Just checking if there is an object still does not cause the evaluation\r\n * if (cachedValue) {\r\n *     // This will set the value to be set explicitly and the callback\r\n *     // will now never occur and the result will be cached\r\n *     cachedValue.v = theValue;\r\n * }\r\n *\r\n * // Accessing the value again will cause the previously set value to be returned.\r\n * theValue === cachedValue.v;  // true\r\n * ```\r\n */\r\nexport function getWritableLazy<T, F extends (...args: any[]) => T = () => T>(cb: F, argArray?: Parameters<F>): ILazyValue<T> {\r\n    let lazyValue = { } as ILazyValue<T>;\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n    lazyValue.b = _globalLazyTestHooks.lzy;\r\n\r\n    let _setValue = (newValue: T) => {\r\n        // Just replace the value\r\n        objDefineProp(lazyValue, \"v\", {\r\n            value: newValue,\r\n            writable: true\r\n        });\r\n\r\n        if (lazyValue.b) {\r\n            delete lazyValue.b;\r\n        }\r\n    };\r\n\r\n    objDefineProp(lazyValue, \"v\", {\r\n        configurable: true,\r\n        get: function () {\r\n            let result = fnApply(cb, null, argArray);\r\n            if (!_globalLazyTestHooks.lzy) {\r\n                // Just replace the value\r\n                _setValue(result);\r\n            }\r\n            \r\n            if (_globalLazyTestHooks.lzy && lazyValue.b !== _globalLazyTestHooks.lzy) {\r\n                lazyValue.b = _globalLazyTestHooks.lzy;\r\n            }\r\n\r\n            return result;\r\n        },\r\n        set: _setValue\r\n    });\r\n\r\n    return lazyValue;\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2025 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { MathCls } from \"../internal/constants\";\r\nimport { _pureRef } from \"../internal/treeshake_helpers\";\r\n\r\n/**\r\n * The `mathRandom()` function returns a floating-point, pseudo-random number in the range 0 to less than 1\r\n * (inclusive of 0, but not 1) with approximately uniform distribution over that range.\r\n * @function\r\n * @since 0.12.0\r\n * @group Math\r\n * @returns A floating-point, pseudo-random number between 0 (inclusive) and 1 (exclusive).\r\n * @example\r\n * ```ts\r\n * mathRandom(); // a random number between 0 and 1\r\n * mathRandom() * 10; // a random number between 0 and 10\r\n * Math.floor(mathRandom() * 100); // a random integer between 0 and 99\r\n * ```\r\n */\r\nexport const mathRandom = (/*#__PURE__*/_pureRef<typeof Math.random>(MathCls, \"random\"));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2025 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { utcNow } from \"../helpers/date\";\r\nimport { getLazy, ILazyValue } from \"../helpers/lazy\";\r\nimport { mathRandom } from \"../math/random\";\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal constant to hold the unique instance ID for the current instance\r\n * of the library. This is used to ensure that each instance of the library has a unique identifier.\r\n */\r\nexport let _uniqueInstanceId: ILazyValue<string> = (/*#__PURE__*/getLazy(() => {\r\n    let value = (utcNow().toString(36).slice(2));\r\n    while(value.length < 16) {\r\n        value += mathRandom().toString(36).slice(2);\r\n    }\r\n\r\n    value = value.substring(0, 16);\r\n\r\n    return value;\r\n}));","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { WellKnownSymbols, _wellKnownSymbolMap } from \"../symbol/well_known\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { SYMBOL, TO_STRING } from \"../internal/constants\";\r\nimport { objHasOwn } from \"../object/has_own\";\r\nimport { asString } from \"../string/as_string\";\r\nimport { _GlobalPolySymbols, _getGlobalConfig } from \"../internal/global\";\r\nimport { strSubstring } from \"../string/substring\";\r\nimport { objKeys } from \"../object/object\";\r\nimport { objDefine } from \"../object/define\";\r\nimport { _isPolyfill } from \"../internal/poly_helpers\";\r\nimport { _tagAsPolyfill } from \"../internal/poly_utils\";\r\nimport { objCreate } from \"../object/create\";\r\nimport { _uniqueInstanceId } from \"../internal/instance\";\r\n\r\nconst UNIQUE_REGISTRY_ID = \"_urid\";\r\nconst POLY_SYM = \"$nw21sym\";\r\nlet _polySymbols: _GlobalPolySymbols;\r\n\r\nlet _polyId = 0;\r\n\r\n/*#__NO_SIDE_EFFECTS__*/\r\nfunction _globalSymbolRegistry(): _GlobalPolySymbols {\r\n    if (!_polySymbols) {\r\n        let gblCfg = _getGlobalConfig();\r\n        _polySymbols = gblCfg.gblSym = gblCfg.gblSym || { k: {}, s:{} };\r\n    }\r\n\r\n    return _polySymbols;\r\n}\r\n\r\nlet _wellKnownSymbolCache: { [key in keyof typeof WellKnownSymbols ]: symbol };\r\n\r\n/**\r\n * Returns a new (polyfill) Symbol object for the provided description that's guaranteed to be unique.\r\n * Symbols are often used to add unique property keys to an object that won't collide with keys any\r\n * other code might add to the object, and which are hidden from any mechanisms other code will\r\n * typically use to access the object. That enables a form of weak encapsulation, or a weak form of\r\n * information hiding.\r\n * @group Polyfill\r\n * @group Symbol\r\n * @param description - The description of the symbol\r\n * @returns A new polyfill version of a Symbol object\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polyNewSymbol(description?: string | number): symbol {\r\n    // Create a unique identifier for this symbol instance\r\n    const uniqueId = \"_\" + _polyId++ + \"_\" + _uniqueInstanceId.v;\r\n    const symString = SYMBOL + \"(\" + description + \")\";\r\n    \r\n    function _setProp(name: string, value: any) {\r\n        objDefine(theSymbol as any, name, {\r\n            v: value,\r\n            e: false,\r\n            w: false\r\n        });\r\n    }\r\n    \r\n    let theSymbol = objCreate(null) as symbol;\r\n\r\n    _setProp(\"description\", asString(description));\r\n    _setProp(TO_STRING, () => symString + POLY_SYM + uniqueId);\r\n    _setProp(\"valueOf\", () => theSymbol);\r\n    _setProp(\"v\", symString);\r\n    _setProp(\"_uid\", uniqueId);\r\n\r\n    return _tagAsPolyfill(theSymbol as any, \"symbol\") as symbol;\r\n}\r\n\r\n/**\r\n * Returns a Symbol object from the global symbol registry matching the given key if found.\r\n * Otherwise, returns a new symbol with this key.\r\n * @group Polyfill\r\n * @group Symbol\r\n * @param key - key to search for.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polySymbolFor(key: string): symbol {\r\n    let registry = _globalSymbolRegistry();\r\n    if (!objHasOwn(registry.k, key)) {\r\n        let newSymbol: any = polyNewSymbol(key);\r\n        let regId = objKeys(registry.s).length;\r\n        newSymbol[UNIQUE_REGISTRY_ID] = () => regId + \"_\" + newSymbol[TO_STRING]();\r\n        registry.k[key] = newSymbol;\r\n        registry.s[newSymbol[UNIQUE_REGISTRY_ID]()] = asString(key);\r\n    }\r\n\r\n    return registry.k[key];\r\n}\r\n\r\n/**\r\n * Returns a key from the global symbol registry matching the given Symbol if found.\r\n * Otherwise, returns a undefined.\r\n * @group Polyfill\r\n * @group Symbol\r\n * @param sym - Symbol to find the key for.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polySymbolKeyFor(sym: symbol): string | undefined {\r\n    if (!sym || !sym[TO_STRING] || strSubstring(sym[TO_STRING](), 0, 6) != SYMBOL) {\r\n        throwTypeError((sym as any) + \" is not a symbol\");\r\n    }\r\n\r\n    const regId = _isPolyfill(sym) && (sym as any)[UNIQUE_REGISTRY_ID] && (sym as any)[UNIQUE_REGISTRY_ID]();\r\n\r\n    return regId ? _globalSymbolRegistry().s[regId] : undefined;\r\n}\r\n\r\n/**\r\n * Returns the polyfill version of a well-known global symbol, this will only return\r\n * known values.\r\n * @example\r\n * ```ts\r\n * // Always returns the polyfill version, even if Symbols are supported in the runtime\r\n * polyGetKnownSymbol(\"toStringTag\") === polyGetKnownSymbol(\"toStringTag\");                // true\r\n * polyGetKnownSymbol(WellKnownSymbols.toStringTag) === polyGetKnownSymbol(\"toStringTag\"); // true\r\n * polyGetKnownSymbol(\"toStringTag\") !== Symbol.toStringTag;                // true\r\n * polyGetKnownSymbol(WellKnownSymbols.toStringTag) !== Symbol.toStringTag; // true\r\n * polyGetKnownSymbol(\"toStringTag\") !== polySymbolFor(\"toStringTag\");      // true\r\n * polyGetKnownSymbol(WellKnownSymbols.toStringTag) !== polySymbolFor(\"toStringTag\"); // true\r\n * polyGetKnownSymbol(\"toStringTag\") !== polyNewSymbol(\"toStringTag\");      // true\r\n * polyGetKnownSymbol(WellKnownSymbols.toStringTag) !== polyNewSymbol(\"toStringTag\"); // true\r\n * ```\r\n * @group Polyfill\r\n * @group Symbol\r\n * @param name - The property name to return (if it exists) for Symbol\r\n * @returns The value of the property if present\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function polyGetKnownSymbol(name: string | WellKnownSymbols): symbol {\r\n    !_wellKnownSymbolCache && (_wellKnownSymbolCache = {} as any);\r\n    let result: symbol;\r\n    let knownName: WellKnownSymbols = (_wellKnownSymbolMap as any)[name];\r\n    if (knownName) {\r\n        result = (_wellKnownSymbolCache as any)[knownName] = _wellKnownSymbolCache[knownName] || polyNewSymbol(SYMBOL + \".\" + knownName);\r\n    }\r\n\r\n    return result\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2024 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { fnApply } from \"../funcs/funcs\";\r\nimport { NULL_VALUE } from \"../internal/constants\";\r\nimport { objDefineProp } from \"../object/define\";\r\n\r\n/**\r\n * A generic interface for holding a cached value\r\n * @since 0.10.5\r\n * @group Helpers\r\n * @group Cache\r\n * @typeParam T - The type of the value to be cached\r\n * @example\r\n * ```ts\r\n * let cachedValue: ICachedValue<string> = {\r\n *    v: \"some value\"\r\n * };\r\n * ```\r\n */\r\nexport interface ICachedValue<T> {\r\n    /**\r\n     * Returns the current cached value\r\n     */\r\n    v: T,\r\n\r\n    /**\r\n     * Returns the current cached value\r\n     */\r\n    toJSON(): T;\r\n}\r\n\r\n/**\r\n * Create and return a readonly {@link ICachedValue} instance that is populated with the provided value.\r\n * This is useful when you want to cache a previously fetched value and return it without having to re-fetch\r\n * it again.\r\n * This is a lightweight version of {@link getLazy} which does not support any expiration or invalidation,\r\n * it also will not honor the {@link setBypassLazyCache} setting and will always return the provided value.\r\n * @since 0.10.5\r\n * @group Helpers\r\n * @group Cache\r\n * @typeParam T - The type of the value to be cached\r\n * @param value - The value to cache\r\n * @returns A new {@link ICachedValue} instance which wraps the provided value\r\n * @example\r\n * ```ts\r\n * let cachedValue = createCachedValue(\"some value\");\r\n * // cachedValue.v === \"some value\"\r\n *\r\n * JSON.stringify(cachedValue) === '{\"v\":\"some value\"}';\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createCachedValue<T>(value: T): ICachedValue<T> {\r\n    return objDefineProp({\r\n        toJSON: () => value\r\n    }, \"v\", { value }) as ICachedValue<T>;\r\n}\r\n\r\n/**\r\n * Create and return a readonly {@link ICachedValue} instance which will cache and return the value returned\r\n * by the callback function. The callback function will only be called once, multiple access of the value\r\n * will not cause re-execution of the callback as the result from the first call is cached internally.\r\n * This is a lightweight version of {@link getLazy} which does not support any expiration or invalidation,\r\n * it also will not honor the {@link setBypassLazyCache} setting and will always return the provided value.\r\n * @remarks Since 0.12.3 this is now an alias for {@link getDeferred}, it is recommended to use that function\r\n * directly instead of this one.\r\n * @since 0.10.5\r\n * @group Helpers\r\n * @group Cache\r\n * @function\r\n * @typeParam T - The type of the value to be cached\r\n * @param cb - The callback function to fetch the value to be lazily evaluated and cached\r\n * @returns\r\n */\r\nexport const createDeferredCachedValue: <T>(cb: () => T) => ICachedValue<T> = getDeferred;\r\n\r\n/**\r\n * Create and return a readonly {@link ICachedValue} instance which will cache and return the value returned\r\n * by the callback function. The callback function will only be called once, multiple access of the value\r\n * will not cause re-execution of the callback as the result from the first call is cached internally.\r\n * This version supports passing arguments to the callback function.\r\n * This is a lightweight version of {@link getLazy} which does not support any expiration or invalidation,\r\n * it also will not honor the {@link setBypassLazyCache} setting and will always return the provided value.\r\n * This is the same as {@link createDeferredCachedValue} but allows passing an array of arguments to the\r\n * callback function.\r\n * @since 0.12.3\r\n * @group Helpers\r\n * @group Cache\r\n * @typeParam R - The type of the value to be cached\r\n * @typeParam F - The type of the callback function, defaults to () =&gt; T if not specified\r\n * @param cb - The callback function to fetch the value to be lazily evaluated and cached\r\n * @param argArray - Optional array of arguments to be passed to the callback function\r\n * @returns A new readonly {@link ICachedValue} instance which wraps the callback and will be used to cache\r\n * the result of the callback\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * let cachedValue = getDeferred(() => callSomeExpensiveFunction());\r\n * let theValue;\r\n *\r\n * // With arguments - the argument types are inferred from the callback\r\n * let cachedValueWithArgs = getDeferred(\r\n *   (id: number, name: string) => callSomeExpensiveFunction(id, name),\r\n *   [123, \"test\"]\r\n * );\r\n *\r\n * // Just checking if there is an object still does not cause the evaluation\r\n * if (cachedValue) {\r\n *     // This will cause the evaluation to occur and the result will be cached\r\n *     theValue = cachedValue.v;\r\n * }\r\n *\r\n * // Accessing the value again will not cause the re-evaluation to occur, it will just return the same\r\n * // result value again.\r\n * theValue === cachedValue.v;  // true\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function getDeferred<R, F extends (...args: any[]) => R>(cb: F, argArray?: Parameters<F>): ICachedValue<R> {\r\n    let theValue: any = {\r\n        toJSON: () => theValue.v\r\n    };\r\n\r\n    return objDefineProp(theValue as ICachedValue<R>, \"v\", {\r\n        get: () => {\r\n            // Use apply to call the callback with the provided arguments\r\n            let result: R = fnApply(cb, null, argArray);\r\n            cb = NULL_VALUE;\r\n            objDefineProp(theValue, \"v\", { value: result });\r\n            return result;\r\n        },\r\n        configurable: true\r\n    });\r\n}\r\n\r\n/**\r\n * Create and return a writable {@link ICachedValue} instance which will cache and return the value returned\r\n * by the callback function. The callback function will only be called once, multiple access of the value\r\n * will not cause re-execution of the callback as the result from the first call is cached internally.\r\n * Unlike {@link getDeferred}, this version allows the cached value to be changed after it's been evaluated.\r\n * This is a lightweight version that does not support any expiration or invalidation.\r\n * @since 0.12.3\r\n * @group Helpers\r\n * @group Cache\r\n * @typeParam R - The type of the value to be cached\r\n * @typeParam F - The type of the callback function, defaults to () =&gt; T if not specified\r\n * @param cb - The callback function to fetch the value to be lazily evaluated and cached\r\n * @param argArray - Optional array of arguments to be passed to the callback function\r\n * @returns A new writable {@link ICachedValue} instance which wraps the callback and will be used to cache\r\n * the result of the callback\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * let cachedValue = getWritableDeferred(() => callSomeExpensiveFunction());\r\n * let theValue;\r\n *\r\n * // With arguments - the argument types are inferred from the callback\r\n * let cachedValueWithArgs = getWritableDeferred(\r\n *   (id: number, name: string) => callSomeExpensiveFunction(id, name),\r\n *   [123, \"test\"]\r\n * );\r\n *\r\n * // Just checking if there is an object still does not cause the evaluation\r\n * if (cachedValue) {\r\n *     // This will cause the evaluation to occur and the result will be cached\r\n *     theValue = cachedValue.v;\r\n * }\r\n *\r\n * // Accessing the value again will not cause the re-evaluation to occur, it will just return the same\r\n * // result value again.\r\n * theValue === cachedValue.v;  // true\r\n *\r\n * // The cached value can be changed\r\n * cachedValue.v = \"new value\";\r\n * theValue = cachedValue.v;  // \"new value\"\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function getWritableDeferred<R, F extends (...args: any[]) => R = () => R>(cb: F, argArray?: Parameters<F>): ICachedValue<R> {\r\n    let theValue: any = {\r\n        toJSON: () => theValue.v\r\n    };\r\n\r\n    let _setValue = (newValue: R) => {\r\n        // Just replace the value\r\n        objDefineProp(theValue, \"v\", {\r\n            value: newValue,\r\n            writable: true\r\n        });\r\n    };\r\n\r\n    return objDefineProp(theValue as ICachedValue<R>, \"v\", {\r\n        get: () => {\r\n            let result = fnApply(cb, null, argArray);\r\n            _setValue(result);\r\n            cb = NULL_VALUE;\r\n            \r\n            return result;\r\n        },\r\n        set: _setValue,\r\n        configurable: true\r\n    });\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { NULL_VALUE, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { _getGlobalValue } from \"../internal/global\";\r\nimport { ILazyValue, _globalLazyTestHooks, _initTestHooks, getLazy } from \"./lazy\";\r\nimport { ICachedValue, createCachedValue } from \"./cache\";\r\nimport { safe } from \"./safe\";\r\n\r\nconst WINDOW = \"window\";\r\n\r\ndeclare let WorkerGlobalScope: any;\r\ndeclare let self: any;\r\n\r\nlet _cachedGlobal: ICachedValue<Window>;\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Returns a function which will return the named global object if available, will return `null` if the object is not available.\r\n * @param getFn - The function to use to get the global object\r\n * @param instName - The name of the global object to get, may be any valid PropertyKey (string, number or symbol)\r\n * @returns A function which will return the named global object if available, the funcion will return `null` if the object is not available.\r\n */\r\nexport function _getGlobalInstFn<T>(getFn: (...args: unknown[]) => T, theArgs?: unknown[]): () => T | null | undefined {\r\n    let cachedValue: ICachedValue<T>;\r\n    return function() {\r\n        !_globalLazyTestHooks && _initTestHooks();\r\n        if (!cachedValue || _globalLazyTestHooks.lzy) {\r\n            cachedValue = createCachedValue(safe(getFn, theArgs).v);\r\n        }\r\n        \r\n        return cachedValue.v;\r\n    }\r\n}\r\n\r\n/**\r\n * Create and return an readonly {@link ILazyValue} instance which will cache and return the named global\r\n * value if available, will return `null` if the named global object is not available or if the runtime\r\n * throws an exception when attempting to access the global object.\r\n * Unlike {@link getInst} the value is cached after the first access, so if the global value changes after\r\n * the initial fetch the original cached value is still returned.\r\n * @since 0.9.5\r\n * @group Environment\r\n * @group Lazy\r\n * @group Safe\r\n * @param name - The name of the global object to get, may be any valid PropertyKey (string, number or symbol)\r\n * @returns A new readonly {@link ILazyValue} instance which will lazily attempt to return the globally\r\n * available named instance.\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * window.myGlobal = \"Hello\";\r\n * let cachedValue = lazySafeGetInst(\"myGlobal\");\r\n * // cachedValue.v === \"Hello\"\r\n *\r\n * window.myGlobal = \"Darkness\";\r\n * // cachedValue.v === \"Hello\"\r\n *\r\n * let promiseCls = lazySafeGetInst(\"Promise\");\r\n * // null if Promise is not supported in the runtime\r\n * // otherwise the Promise class.\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function lazySafeGetInst<T>(name: string | number | symbol) : ILazyValue<T> {\r\n    return getLazy(() => safe(getInst<T>, [name]).v || UNDEF_VALUE);\r\n}\r\n\r\n/**\r\n * Returns the current global scope object, for a normal web page this will be the current\r\n * window, for a Web Worker this will be current worker global scope via \"self\". The internal\r\n * implementation returns the first available instance object in the following order\r\n * - globalThis (New standard)\r\n * - self (Will return the current window instance for supported browsers)\r\n * - window (fallback for older browser implementations)\r\n * - global (NodeJS standard)\r\n * - <null> (When all else fails)\r\n * While the return type is a Window for the normal case, not all environments will support all\r\n * of the properties or functions. And this caches the lookup of the global as in some environments\r\n * this can be an expensive operation.\r\n * @group Environment\r\n * @param useCached - [Optional] used for testing to bypass the cached lookup, when `true` this will\r\n * cause the cached global to be reset.\r\n */\r\nexport function getGlobal(useCached?: boolean): Window {\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n    if (!_cachedGlobal || useCached === false || _globalLazyTestHooks.lzy) {\r\n        _cachedGlobal = createCachedValue(safe(_getGlobalValue).v || NULL_VALUE);\r\n    }\r\n\r\n    return _cachedGlobal.v;\r\n}\r\n\r\n/**\r\n * Return the named global object if available, will return null if the object is not available.\r\n * @group Environment\r\n * @param name - The globally named object, may be any valid property key (string, number or symbol)\r\n * @param useCached - [Optional] used for testing to bypass the cached lookup, when `true` this will\r\n * cause the cached global to be reset.\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * window.myGlobal = \"Hello\";\r\n * let cachedValue = getInst(\"myGlobal\");\r\n * // cachedValue === \"Hello\"\r\n *\r\n * window.myGlobal = \"Darkness\";\r\n * // getInst(\"myGlobal\") === \"Darkness\"\r\n *\r\n * let promiseCls = getInst(\"Promise\");\r\n * // May throw if the global is not supported by the runtime\r\n * // otherwise the Promise class.\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function getInst<T>(name: string | number | symbol, useCached?: boolean): T | null {\r\n    let gbl: any;\r\n    if (!_cachedGlobal || useCached === false) {\r\n        gbl = getGlobal(useCached);\r\n    } else {\r\n        gbl = _cachedGlobal.v;\r\n    }\r\n\r\n    if (gbl && gbl[name]) {\r\n        return gbl[name] as T;\r\n    }\r\n\r\n    // Test workaround, for environments where <global>.window (when global == window) doesn't return the base window\r\n    if (name === WINDOW) {\r\n        // tslint:disable-next-line: no-angle-bracket-type-assertion\r\n        try {\r\n            return window as T;\r\n        } catch (e) {\r\n            // Ignore\r\n        }\r\n    }\r\n\r\n    return NULL_VALUE;\r\n}\r\n\r\n/**\r\n * Identify whether the runtime contains a `document` object\r\n * @group Environment\r\n * @returns - True if a `document` exists\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function hasDocument(): boolean {\r\n    return !!( /*#__PURE__*/getDocument());\r\n}\r\n\r\n/**\r\n * Return the global `document` instance.\r\n * @function\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getDocument = (/*#__PURE__*/_getGlobalInstFn<Document>(getInst, [\"document\"]));\r\n\r\n/**\r\n * Identify whether the runtime contains a `window` object\r\n * @group Environment\r\n * @returns\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function hasWindow(): boolean {\r\n    return !!( /*#__PURE__*/getWindow());\r\n}\r\n\r\n/**\r\n * Return the global `window` instance.\r\n * @function\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getWindow = (/*#__PURE__*/_getGlobalInstFn<Window>(getInst, [WINDOW]));\r\n\r\n/**\r\n * Identify whether the runtimne contains a `navigator` object\r\n * @group Environment\r\n * @returns\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function hasNavigator(): boolean {\r\n    return !!( /*#__PURE__*/getNavigator());\r\n}\r\n\r\n/**\r\n * Returns the global `navigator` instance\r\n * @function\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getNavigator = (/*#__PURE__*/_getGlobalInstFn<Navigator>(getInst, [\"navigator\"]));\r\n\r\n/**\r\n * Identifies whether the runtime contains a `history` object\r\n * @group Environment\r\n * @returns\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function hasHistory(): boolean {\r\n    return !!( /*#__PURE__*/getHistory());\r\n}\r\n\r\n/**\r\n * Returns the global `history` instance\r\n * @function\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getHistory = (/*#__PURE__*/_getGlobalInstFn<History>(getInst, [\"history\"]));\r\n\r\n/**\r\n * Simple method to determine if we are running in a node environment\r\n * @function\r\n * @group Environment\r\n * @returns True if you are\r\n */\r\nexport const isNode = (/*#__PURE__*/_getGlobalInstFn<boolean>(() => {\r\n    return !!( /*#__PURE__*/safe(() => (process && (process.versions||{}).node)).v);\r\n}));\r\n\r\n/**\r\n * Helper to identify if you are running as a Dedicated, Shared or Service worker\r\n * @function\r\n * @group Environment\r\n * @returns True if the environment you are in looks like a Web Worker\r\n */\r\nexport const isWebWorker = (/*#__PURE__*/_getGlobalInstFn<boolean>(() => {\r\n    return !!( /*#__PURE__*/safe(() => self && self instanceof WorkerGlobalScope).v);\r\n}));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022-2025 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { NULL_VALUE, SYMBOL, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { polyGetKnownSymbol, polyNewSymbol, polySymbolFor, polySymbolKeyFor } from \"../polyfills/symbol\";\r\nimport { WellKnownSymbols, _wellKnownSymbolMap } from \"./well_known\";\r\nimport { _createIsWithPoly } from \"../helpers/base\";\r\nimport { _globalLazyTestHooks, _initTestHooks } from \"../helpers/lazy\";\r\nimport { ICachedValue, createCachedValue } from \"../helpers/cache\";\r\nimport { safe } from \"../helpers/safe\";\r\nimport { getInst } from \"../helpers/environment\";\r\n\r\nlet _symbol: ICachedValue<Symbol>;\r\nlet _symbolFor: ICachedValue<(key: string) => symbol>;\r\nlet _symbolKeyFor: ICachedValue<(sym: symbol) => string | undefined>;\r\n\r\n/*#__NO_SIDE_EFFECTS__*/\r\nfunction _initSymbol() {\r\n    _symbol = (/*#__PURE__*/createCachedValue(safe(getInst<Symbol>, [SYMBOL]).v));\r\n\r\n    return _symbol;\r\n}\r\n\r\nfunction _getSymbolKey<R>(key: string) {\r\n    let gblSym: any = ((!_globalLazyTestHooks.lzy ? _symbol : 0) || _initSymbol());\r\n\r\n    return (gblSym.v ? gblSym.v[key] : UNDEF_VALUE) as R;\r\n}\r\n\r\n/**\r\n * Checks if the type of value is a symbol.\r\n *\r\n * @function\r\n * @group Symbol\r\n * @param value - Value to be checked.\r\n * @return True if the value is a symbol, false otherwise.\r\n */\r\nexport const isSymbol: (value: any) => value is symbol = (/*#__PURE__*/_createIsWithPoly<symbol>(\"symbol\"));\r\n\r\n/**\r\n * Helper to identify whether the runtime support the Symbols either via native or an installed polyfill\r\n * @group Symbol\r\n * @returns true if Symbol's are support otherwise false\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function hasSymbol(): boolean {\r\n    return !!( /*#__PURE__*/getSymbol());\r\n}\r\n\r\n/**\r\n * If Symbols are supported then attempt to return the named Symbol\r\n * @group Symbol\r\n * @returns The value of the named Symbol (if available)\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function getSymbol(): Symbol {\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n    \r\n    // Get the current lazy symbol or cause it to get initialized\r\n    return ((!_globalLazyTestHooks.lzy ? _symbol : 0) || _initSymbol()).v;\r\n}\r\n\r\n/**\r\n * If Symbols are supported then get the property of the global Symbol, if Symbol's are\r\n * not supported and noPoly is true it returns null. Used to access the well known symbols.\r\n * @group Symbol\r\n * @param name - The property name to return (if it exists) for Symbol\r\n * @param noPoly - Flag indicating whether to return a polyfill if symbols are not supported.\r\n * @returns The value of the property if present\r\n * @example\r\n * ```ts\r\n * // If Symbol is supported in the runtime\r\n * getKnownSymbol(\"toStringTag\") === Symbol.toStringTag;                // true\r\n * getKnownSymbol(WellKnownSymbols.toStringTag) === Symbol.toStringTag; // true\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function getKnownSymbol<T = symbol>(name: string | WellKnownSymbols, noPoly?: boolean): T {\r\n    let knownName = (_wellKnownSymbolMap as any)[name];\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n\r\n    // Get the current lazy symbol or cause it to get initialized\r\n    let sym: any = ((!_globalLazyTestHooks.lzy ? _symbol : 0) || _initSymbol());\r\n    \r\n    return sym.v ? sym.v[knownName || name] : (!noPoly ? polyGetKnownSymbol(name) as T : UNDEF_VALUE);\r\n}\r\n\r\n/**\r\n * Returns a new unique Symbol value. If noPoly is true and symbols are not supported\r\n * then this will return null.\r\n * @group Symbol\r\n * @param description - Description of the new Symbol object.\r\n * @param noPoly - Flag indicating whether to return a polyfil if symbols are not supported.\r\n * @returns The new symbol\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function newSymbol(description?: string | number, noPoly?: boolean): symbol {\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n\r\n    // Get the current lazy symbol or cause it to get initialized\r\n    let sym = ((!_globalLazyTestHooks.lzy ? _symbol : 0) || _initSymbol());\r\n\r\n    return sym.v ? (sym.v as any)(description) : (!noPoly ? polyNewSymbol(description) : NULL_VALUE);\r\n}\r\n\r\n/**\r\n * Returns a Symbol object from the global symbol registry matching the given key if found.\r\n * Otherwise, returns a new symbol with this key. This will always return a polyfill if symbols\r\n * are not supported.\r\n * @group Symbol\r\n * @param key - key to search for.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function symbolFor(key: string): symbol {\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n\r\n    // Cause lazy symbol to get initialized\r\n    _symbolFor = ((!_globalLazyTestHooks.lzy ? _symbolFor : 0) || (/*#__PURE__*/createCachedValue(safe(_getSymbolKey<typeof Symbol.for>, [\"for\"]).v)));\r\n\r\n    return (_symbolFor.v || polySymbolFor)(key);\r\n}\r\n\r\n/**\r\n * Returns a key from the global symbol registry matching the given Symbol if found.\r\n * Otherwise, returns a undefined. This will always attempt to lookup the polyfill\r\n * implementation if symbols are not supported\r\n * @group Symbol\r\n * @param sym - Symbol to find the key for.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function symbolKeyFor(sym: symbol): string | undefined {\r\n    !_globalLazyTestHooks && _initTestHooks();\r\n\r\n    // Cause lazy symbol to get initialized\r\n    _symbolKeyFor = ((!_globalLazyTestHooks.lzy ? _symbolKeyFor : 0) || (/*#__PURE__*/createCachedValue(safe(_getSymbolKey<typeof Symbol.keyFor>, [\"keyFor\"]).v)));\r\n\r\n    return (_symbolKeyFor.v || polySymbolKeyFor)(sym);\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { getKnownSymbol } from \"../symbol/symbol\";\r\nimport { WellKnownSymbols } from \"../symbol/well_known\";\r\nimport { isFunction, isStrictNullOrUndefined } from \"../helpers/base\";\r\n\r\n/**\r\n * Checks if the type of value looks like an iterator instance (contains a next function).\r\n *\r\n * @since 0.4.0\r\n * @group Type Identity\r\n * @group Iterator\r\n * @typeParam T - Identifies the return type of the iterator defaults to any\r\n * @param value - The value to be checked\r\n * @returns True if the value is an Iterator, otherwise false\r\n * @example\r\n * ```ts\r\n * isIterator(null);        // false\r\n * isIterator(undefined);   // false\r\n * isIterator(\"null\");      // false (Strings are iterable but not iterators)\r\n * isIterator([]);          // false (Arrays are iterable but not iterators)\r\n * isIterator({\r\n *     next: function() { return true }\r\n * });                      // true, iterators must contain a \"next\" function\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isIterator<T = any>(value: any): value is Iterator<T> {\r\n    return !!value && isFunction(value.next);\r\n}\r\n\r\n/**\r\n * Checks if the value looks like it is iterable, contains a [symbol.iterator].\r\n *\r\n * @since 0.4.0\r\n * @group Type Identity\r\n * @group Iterator\r\n * @typeParam T - Identifies the return type of the iterator\r\n * @param value - The value to be checked\r\n * @returns True if the value is an Iterable, otherwise false\r\n * @example\r\n * ```ts\r\n * isIterable(null);        // false\r\n * isIterable(undefined);   // false\r\n * isIterable(\"null\");      // true (Strings are iterable)\r\n * isIterable([]);          // true (Arrays are iterable)\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isIterable<T = any>(value: any): value is Iterable<T> {\r\n    return !isStrictNullOrUndefined(value) && isFunction(value[getKnownSymbol(WellKnownSymbols.iterator)]);\r\n}","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ICachedValue, createCachedValue } from \"../helpers/cache\";\r\nimport { CALL, NULL_VALUE, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { getKnownSymbol } from \"../symbol/symbol\";\r\nimport { WellKnownSymbols } from \"../symbol/well_known\";\r\nimport { isIterator } from \"./iterator\";\r\n\r\nlet _iterSymbol: ICachedValue<symbol>;\r\n\r\n/**\r\n * Calls the provided `callbackFn` function once for each element in the iterator or iterator returned by\r\n * the iterable and processed in the same order as returned by the iterator. As with the {@link arrForEach}\r\n * you CAN stop / break the iteration by returning -1 from the`callbackFn` function.\r\n *\r\n * The order of processing is not reset if you add or remove elements to the iterator, the actual behavior\r\n * will depend on the iterator imeplementation.\r\n *\r\n * If the passed `iter` is both an Iterable<T> and Iterator<T> the Iterator<T> interface takes preceedence.\r\n * @remarks\r\n * If Symbols are NOT supported then the iterable MUST be using the same polyFill for the well know symbols,\r\n * if you are targetting a mixed environment you SHOULD either\r\n * - only use the polyfill Symbol's provided by this library\r\n * - ensure that you add any symbol polyfills BEFORE these utilities\r\n * iterForOf expects a `synchronous` function.\r\n * iterForOf does not wait for promises. Make sure you are aware of the implications while using\r\n * promises (or async functions) as forEach callback.\r\n *\r\n * @since 0.4.2\r\n * @group Iterator\r\n * @typeParam T - Identifies the element type of the iterator\r\n * @param callbackfn - A `synchronous` function that accepts up to three arguments. iterForOf calls the\r\n * callbackfn function one time for each element returned by the iterator.\r\n * @param thisArg - An object to which the this keyword can refer in the callbackfn function. If thisArg is\r\n * omitted, null or undefined the iterator will be used as the this value.\r\n * @throws Any exception thrown while processing the iterator\r\n * @example\r\n * ```ts\r\n * const items = {\r\n *     'item1': 'value1',\r\n *     'item2': 'value2',\r\n *     'item3': 'value3\r\n * };\r\n * const copyItems = [];\r\n *\r\n * iterForOf(items, (item) => {\r\n *   copyItems.push(item);\r\n *   // May return -1 to abort the iteration\r\n * });\r\n * ```\r\n */\r\nexport function iterForOf<T>(iter: Iterator<T> | Iterable<T>, callbackfn: (value: T, count?: number, iter?: Iterator<T>) => void | number, thisArg?: any): void {\r\n    if (iter) {\r\n        if (!isIterator(iter)) {\r\n            !_iterSymbol && (_iterSymbol = createCachedValue(getKnownSymbol(WellKnownSymbols.iterator)));\r\n            iter = (iter as any)[_iterSymbol.v] ? (iter as any)[_iterSymbol.v]() : NULL_VALUE;\r\n        }\r\n        \r\n        if (isIterator(iter)) {\r\n            let err: { e: any } = UNDEF_VALUE;\r\n            let iterResult: IteratorResult<T> = UNDEF_VALUE;\r\n            try {\r\n                let count = 0;\r\n                while(!(iterResult = iter.next()).done) {\r\n                    if (callbackfn[CALL](thisArg || iter, iterResult.value, count, iter) === -1) {\r\n                        break;\r\n                    }\r\n        \r\n                    count++;\r\n                }\r\n            } catch (failed) {\r\n                err = { e: failed };\r\n                if (iter.throw) {\r\n                    iterResult = NULL_VALUE;\r\n                    iter.throw(err);\r\n                }\r\n            } finally {\r\n                try {\r\n                    if (iterResult && !iterResult.done) {\r\n                        iter.return && iter.return(iterResult);\r\n                    }\r\n                } finally {\r\n                    if (err) {\r\n                        // eslint-disable-next-line no-unsafe-finally\r\n                        throw err.e;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { isArray, isUndefined } from \"../helpers/base\";\r\nimport { isIterable, isIterator } from \"../iterator/iterator\";\r\nimport { iterForOf } from \"../iterator/forOf\";\r\nimport { fnApply } from \"../funcs/funcs\";\r\n\r\n/**\r\n * Appends the `elms` to the `target` where the elms may be an array, a single object\r\n * or an iterator object\r\n * @group Array\r\n * @group Iterator\r\n * @example\r\n * ```ts\r\n * let theArray = arrAppend([], 1);\r\n * arrAppend(theArray, [ 2, 3, 4 ]);\r\n * arrAppend(theArray, [ \"a\", \"b\", \"c\" ]);\r\n * // theArray is now [ 1, 2, 3, 4, \"a\", \"b\", \"c\" ]\r\n * ```\r\n * @param target - The target array\r\n * @param elms - The item, array of items an iterable or iterator object of items to add to the target\r\n * @returns The passed in target array\r\n * @example\r\n * ```ts\r\n * // Adding a single value\r\n * arrAppend([], undefined);            // []\r\n * arrAppend([], 0);                    // [ 0 ]\r\n * arrAppend([1], undefined);           // [ 1 ]\r\n * arrAppend([1], 2);                   // [ 1, 2 ]\r\n *\r\n * // Adding an array\r\n * arrAppend([], [] as number[]);       // []\r\n * arrAppend([], [0]);                  // [ 0 ]\r\n * arrAppend([1], []);                  // [ 1 ]\r\n * arrAppend([1], [2]);                 // [ 1, 2 ]\r\n *\r\n * // Adding with an iterator\r\n * arrAppend([], ([] as number[]).values());    // []\r\n * arrAppend([], [0].values());         // [ 0 ]\r\n * arrAppend([1], [].keys());           // [ 1 ]\r\n * arrAppend([1], [2].values());        // [ 1, 2 ]\r\n * arrAppend([1], [2].keys());          // [ 1, 0 ] - 0 is from the index from the first element\r\n * ```\r\n */\r\nexport function arrAppend<T>(target: T[], elms: T | T[] | Iterator<T>): T[] {\r\n    if (!isUndefined(elms) && target) {\r\n        if (isArray(elms)) {\r\n            // This is not just \"target.push(elms)\" but becomes effectively \"target.push(elms[0], elms[1], ...)\"\r\n            fnApply(target.push, target, elms);\r\n        } else if (isIterator<T>(elms) || isIterable<T>(elms)) {\r\n            iterForOf(elms, (elm) => {\r\n                target.push(elm);\r\n            });\r\n        } else {\r\n            target.push(elms);\r\n        }\r\n    }\r\n\r\n    return target;\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ArrProto } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\n\r\n/**\r\n * The arrIndexOf() method returns the first index at which a given element can be found in the array,\r\n * or -1 if it is not present.\r\n * `arrIndexOf()` compares searchElement to elements of the Array using strict equality (the same\r\n * method used by the === or triple-equals operator).\r\n * @function\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the type of array elements\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param searchElement - The element to locate in the array.\r\n * @param fromIndex - The index to start the search at. If the index is greater than or equal to\r\n * the array's length, -1 is returned, which means the array will not be searched. If the provided\r\n * index value is a negative number, it is taken as the offset from the end of the array.\r\n * Note: if the provided index is negative, the array is still searched from front to back. If the\r\n * provided index is 0, then the whole array will be searched. Default: 0 (entire array is searched).\r\n * @return The first index of the element in the array; -1 if not found.\r\n * @example\r\n * ```ts\r\n * const array = [2, 9, 9];\r\n * arrIndexOf(array, 2);     // 0\r\n * arrIndexOf(array, 7);     // -1\r\n * arrIndexOf(array, 9, 2);  // 2\r\n * arrIndexOf(array, 2, -1); // -1\r\n * arrIndexOf(array, 2, -3); // 0\r\n *\r\n * let indices: number[] = [];\r\n * const array = ['a', 'b', 'a', 'c', 'a', 'd'];\r\n * const element = 'a';\r\n * let idx = arrIndexOf(array, element);\r\n * while (idx !== -1) {\r\n *   indices.push(idx);\r\n *   idx = arrIndexOf(array, element, idx + 1);\r\n * }\r\n * console.log(indices);\r\n * // [0, 2, 4]\r\n *\r\n * function updateVegetablesCollection (veggies, veggie) {\r\n *     if (arrIndexOf(veggies, veggie) === -1) {\r\n *         veggies.push(veggie);\r\n *         console.log('New veggies collection is : ' + veggies);\r\n *     } else {\r\n *         console.log(veggie + ' already exists in the veggies collection.');\r\n *     }\r\n * }\r\n *\r\n * let veggies = ['potato', 'tomato', 'chillies', 'green-pepper'];\r\n *\r\n * updateVegetablesCollection(veggies, 'spinach');\r\n * // New veggies collection is : potato,tomato,chillies,green-pepper,spinach\r\n * updateVegetablesCollection(veggies, 'spinach');\r\n * // spinach already exists in the veggies collection.\r\n *\r\n * // Array Like\r\n * let arrayLike = {\r\n *   length: 3,\r\n *   0: \"potato\",\r\n *   1: \"tomato\",\r\n *   2: \"chillies\",\r\n *   3: \"green-pepper\"  // Not checked as index is > length\r\n * };\r\n *\r\n * arrIndexOf(arrayLike, \"potato\"); // 0\r\n * arrIndexOf(arrayLike, \"tomato\"); // 1\r\n * arrIndexOf(arrayLike, \"chillies\"); 2\r\n * arrIndexOf(arrayLike, \"green-pepper\"); // -1\r\n * ```\r\n */\r\nexport const arrIndexOf: <T>(theArray: ArrayLike<T>, searchElement: T, fromIndex?: number) => number = (/*#__PURE__*/_unwrapFunction(\"indexOf\", ArrProto));\r\n\r\n/**\r\n * The arrLastIndexOf() method returns the last index at which a given element can be found in the array,\r\n * or -1 if it is not present.\r\n * `arrLastIndexOf()` compares searchElement to elements of the Array using strict equality (the same\r\n * method used by the === or triple-equals operator). [NaN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN)\r\n * values are never compared as equal, so arrLastIndexOf() always returns -1 when searchElement is NaN.\r\n *\r\n * The arrLastIndexOf() method skips empty slots in sparse arrays.\r\n *\r\n * The arrLastIndexOf() method is generic. It only expects the this value to have a length property and integer-keyed properties.\r\n *\r\n * @function\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the type of array elements\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param searchElement - The element to locate in the array.\r\n * @param fromIndex - Zero-based index at which to start searching backwards, converted to an integer.\r\n * - Negative index counts back from the end of the array — if fromIndex \\< 0, fromIndex + array.length is used.\r\n * - If fromIndex \\< -array.length, the array is not searched and -1 is returned. You can think of it conceptually\r\n * as starting at a nonexistent position before the beginning of the array and going backwards from there. There\r\n * are no array elements on the way, so searchElement is never found.\r\n * - If fromIndex \\>= array.length or fromIndex is omitted, array.length - 1 is used, causing the entire array to\r\n * be searched. You can think of it conceptually as starting at a nonexistent position beyond the end of the array and going backwards from there. It eventually reaches the real end position of the array, at which point it starts searching backwards through the actual array elements.\r\n * @return The first index of the element in the array; -1 if not found.\r\n * @example\r\n * ```ts\r\n * const numbers = [2, 5, 9, 2];\r\n * arrLastIndexOf(numbers, 2); // 3\r\n * arrLastIndexOf(numbers, 7); // -1\r\n * arrLastIndexOf(numbers, 2, 3); // 3\r\n * arrLastIndexOf(numbers, 2, 2); // 0\r\n * arrLastIndexOf(numbers, 2, -2); // 0\r\n * arrLastIndexOf(numbers, 2, -1); // 3\r\n *\r\n * let indices: number[] = [];\r\n * const array = [\"a\", \"b\", \"a\", \"c\", \"a\", \"d\"];\r\n * const element = \"a\";\r\n * let idx = arrLastIndexOf(array, element);\r\n * while (idx !== -1) {\r\n *   indices.push(idx);\r\n *   idx = arrLastIndexOf(array, element, idx ? idx - 1 : -(array.length + 1));\r\n * }\r\n * console.log(indices);\r\n * // [4, 2, 0]\r\n *\r\n * function updateVegetablesCollection (veggies, veggie) {\r\n *     if (arrLastIndexOf(veggies, veggie) === -1) {\r\n *         veggies.push(veggie);\r\n *         console.log('New veggies collection is : ' + veggies);\r\n *     } else {\r\n *         console.log(veggie + ' already exists in the veggies collection.');\r\n *     }\r\n * }\r\n *\r\n * let veggies = ['potato', 'tomato', 'chillies', 'green-pepper'];\r\n *\r\n * updateVegetablesCollection(veggies, 'spinach');\r\n * // New veggies collection is : potato,tomato,chillies,green-pepper,spinach\r\n * updateVegetablesCollection(veggies, 'spinach');\r\n * // spinach already exists in the veggies collection.\r\n *\r\n * // Array Like\r\n * let arrayLike = {\r\n *   length: 3,\r\n *   0: \"potato\",\r\n *   1: \"tomato\",\r\n *   2: \"chillies\",\r\n *   3: \"green-pepper\"  // Not checked as index is > length\r\n * };\r\n *\r\n * arrLastIndexOf(arrayLike, \"potato\"); // 0\r\n * arrLastIndexOf(arrayLike, \"tomato\"); // 1\r\n * arrLastIndexOf(arrayLike, \"chillies\"); 2\r\n * arrLastIndexOf(arrayLike, \"green-pepper\"); // -1\r\n * ```\r\n */\r\nexport const arrLastIndexOf: <T>(theArray: ArrayLike<T>, searchElement: T, fromIndex?: number) => number = (/*#__PURE__*/_unwrapFunction(\"lastIndexOf\", ArrProto));","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022-2025 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { ICachedValue, createCachedValue } from \"../helpers/cache\";\r\nimport { ObjClass, __PROTO__ } from \"../internal/constants\";\r\nimport { _pureAssign, _pureRef } from \"../internal/treeshake_helpers\";\r\nimport { objForEachKey } from \"./for_each_key\";\r\n\r\nlet _isProtoArray: ICachedValue<boolean>;\r\n\r\n/**\r\n * The objSetPrototypeOf() method sets the prototype (i.e., the internal [Prototype] property) of a specified\r\n * object to another object or null.\r\n *\r\n * @function\r\n * @group Object\r\n * @param obj - The object which is to have it's prototype set.\r\n * @param proto - The object's new prototype (an object or null)\r\n * @returns The specified object.\r\n */\r\nexport const objSetPrototypeOf: (obj: any, proto: object) => any = (/*#__PURE__*/_pureAssign((/*#__PURE__*/_pureRef<typeof Object.setPrototypeOf>(ObjClass, \"setPrototypeOf\")), _polyObjSetPrototypeOf));\r\n\r\nexport function _polyObjSetPrototypeOf(obj: any, proto: object) {\r\n    !_isProtoArray && (_isProtoArray = createCachedValue({ [__PROTO__]: [] } instanceof Array));\r\n    _isProtoArray.v ? obj[__PROTO__] = proto : objForEachKey(proto, (key: any, value: any) => obj[key] = value );\r\n    \r\n    return obj;\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { fnApply } from \"../funcs/funcs\";\r\nimport { ArrSlice, CALL, CONSTRUCTOR, NAME, NULL_VALUE, PROTOTYPE } from \"../internal/constants\";\r\nimport { objCreate } from \"../object/create\";\r\nimport { objDefine } from \"../object/define\";\r\nimport { objGetPrototypeOf } from \"../object/object\";\r\nimport { objSetPrototypeOf } from \"../object/set_proto\";\r\nimport { safe } from \"./safe\";\r\n\r\n/**\r\n * Defines the definition of the custom error constructor\r\n * Used by: {@link createCustomError}\r\n * @group Error\r\n */\r\nexport interface CustomErrorConstructor<T extends Error = Error> extends ErrorConstructor {\r\n    new(message?: string): T;\r\n    (message?: string): T;\r\n    readonly prototype: T;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nfunction _createCustomError<T>(name: string, d: any, b: any): T {\r\n    safe(objDefine, [ d, NAME, { v: name, c: true, e: false }]);\r\n    d = objSetPrototypeOf(d, b);\r\n    function __() {\r\n        this[CONSTRUCTOR] = d;\r\n        safe(objDefine, [this, NAME, { v: name, c: true, e: false }]);\r\n    }\r\n\r\n    d[PROTOTYPE] = b === NULL_VALUE ? objCreate(b) : ((__ as any)[PROTOTYPE] = b[PROTOTYPE], new (__ as any)());\r\n\r\n    return d;\r\n}\r\n\r\nfunction  _setName(baseClass: any, name: string) {\r\n    name && (baseClass[NAME] = name);\r\n    //name && (baseClass[PROTOTYPE][NAME] = name);\r\n}\r\n\r\n/**\r\n * Create a Custom Error class which may be used to throw custom errors.\r\n * @group Error\r\n * @param name - The name of the Custom Error\r\n * @param constructCb - [Optional] An optional callback function to call when a\r\n * new Customer Error instance is being created.\r\n * @param errorBase - [Optional] (since v0.9.6) The error class to extend for this class, defaults to Error.\r\n * @returns A new Error `class`\r\n * @example\r\n * ```ts\r\n * import { createCustomError, isError } from \"@nevware21/ts-utils\";\r\n *\r\n * // For an error that just contains a message\r\n * let myCustomErrorError = createCustomError(\"MessageError\");\r\n *\r\n * try {\r\n *     throw new myCustomErrorError(\"Error Message!\");\r\n * } catch(e) {\r\n *      // e.name === MessageError\r\n *      // isError(e) === true;\r\n *      // Object.prototype.toString.call(e) === \"[object Error]\";\r\n * }\r\n *\r\n * // Or a more complex error object\r\n * interface MyCriticalErrorConstructor extends CustomErrorConstructor {\r\n *     new(message: string, file: string, line: number, col: number): MyCriticalError;\r\n *     (message: string, file: string, line: number, col: number): MyCriticalError;\r\n * }\r\n *\r\n * interface MyCriticalError extends Error {\r\n *     readonly errorId: number;\r\n *     readonly args: any[];        // Holds all of the arguments passed during construction\r\n * }\r\n *\r\n * let _totalErrors = 0;\r\n * let myCustomError = createCustomError<MyCriticalErrorConstructor>(\"CriticalError\", (self, args) => {\r\n *     _totalErrors++;\r\n *     self.errorId = _totalErrors;\r\n *     self.args = args;\r\n * });\r\n *\r\n * try {\r\n *     throw new myCustomError(\"Not Again!\");\r\n * } catch(e) {\r\n *      // e.name === CriticalError\r\n *      // isError(e) === true;\r\n *      // Object.prototype.toString.call(e) === \"[object Error]\";\r\n * }\r\n *\r\n * // ----------------------------------------------------------\r\n * // Extending another custom error class\r\n * // ----------------------------------------------------------\r\n *\r\n * let AppError = createCustomError(\"ApplicationError\");\r\n * let theAppError = new appError();\r\n *\r\n * isError(theAppError);                    // true\r\n * theAppError instanceof Error;            // true\r\n * theAppError instanceof AppError;         // true\r\n *\r\n * let StartupError = createCustomError(\"StartupError\", null, AppError);\r\n * let theStartupError = new StartupError();\r\n *\r\n * isError(theStartupError);                // true\r\n * theStartupError instanceof Error;        // true\r\n * theStartupError instanceof AppError;     // true\r\n * theStartupError instanceof StartupError; // true\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function createCustomError<T extends ErrorConstructor = CustomErrorConstructor, B extends ErrorConstructor = ErrorConstructor>(\r\n    name: string,\r\n    constructCb?: ((self: any, args: IArguments) => void) | null,\r\n    errorBase?: B): T {\r\n\r\n    let theBaseClass = errorBase || Error;\r\n    let orgName = theBaseClass[PROTOTYPE][NAME];\r\n    let captureFn = Error.captureStackTrace;\r\n    return _createCustomError<T>(name, function (this: any) {\r\n        let _this = this;\r\n        let theArgs = arguments;\r\n        try {\r\n            safe(_setName, [theBaseClass, name]);\r\n            let _self = fnApply(theBaseClass, _this, ArrSlice[CALL](theArgs)) || _this;\r\n            if (_self !== _this) {\r\n                // Looks like runtime error constructor reset the prototype chain, so restore it\r\n                let orgProto = objGetPrototypeOf(_this);\r\n                if (orgProto !== objGetPrototypeOf(_self)) {\r\n                    objSetPrototypeOf(_self, orgProto);\r\n                }\r\n            }\r\n\r\n            // Make sure we only capture our stack details\r\n            captureFn && captureFn(_self, _this[CONSTRUCTOR]);\r\n    \r\n            // Run the provided construction function\r\n            constructCb && constructCb(_self, theArgs);\r\n    \r\n            return _self;\r\n        } finally {\r\n            safe(_setName, [theBaseClass, orgName]);\r\n        }\r\n    }, theBaseClass);\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n */\r\nlet _unsupportedError: CustomErrorConstructor;\r\n\r\n/**\r\n * Throw a custom `UnsupportedError` Error instance with the given message.\r\n * @group Error\r\n * @param message - The message to include in the exception\r\n * @example\r\n * ```ts\r\n * import { throwUnsupported } from \"@nevware21/ts-utils\";\r\n *\r\n * if (!window) {\r\n *     throwUnsupported(\"A window is needed for this operation\");\r\n * }\r\n * ```\r\n */\r\nexport function throwUnsupported(message?: string): never {\r\n    if (!_unsupportedError) {\r\n        // Lazily create the class\r\n        _unsupportedError = createCustomError(\"UnsupportedError\");\r\n    }\r\n\r\n    throw new _unsupportedError(message);\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { MathCls } from \"../internal/constants\";\r\nimport { _pureRef } from \"../internal/treeshake_helpers\";\r\n\r\n/**\r\n * The `mathFloor()` function returns the largest integer less than or equal to a given number.\r\n * @function\r\n * @group Math\r\n * @param x - A number\r\n * @returns A number representing the largest integer less than or equal to the specified number.\r\n */\r\nexport const mathFloor = (/*#__PURE__*/_pureRef<typeof Math.floor>(MathCls, \"floor\"));\r\n\r\n/**\r\n * The `mathCeil()` function always rounds a number up to the next largest integer.\r\n * @function\r\n * @group Math\r\n * @param x - A number\r\n * @returns The smallest integer greater than or equal to the given number.\r\n */\r\nexport const mathCeil = (/*#__PURE__*/_pureRef<typeof Math.ceil>(MathCls, \"ceil\"));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { getWindow, hasWindow } from \"../helpers/environment\";\r\nimport { CALL, CONSTRUCTOR, FUNCTION, ObjClass, OBJECT, PROTOTYPE, TO_STRING } from \"../internal/constants\";\r\nimport { objHasOwnProperty } from \"./has_own_prop\";\r\nimport { objGetPrototypeOf } from \"./object\";\r\n\r\n// Use to cache the result of Object.cont\r\nlet _fnToString: () => string;\r\nlet _objCtrFnString: string;\r\nlet _gblWindow: Window;\r\n\r\n/**\r\n * Checks to see if the past value is a plain object (not a class/array) value.\r\n * Object are considered to be \"plain\" if they are created with no prototype `Object.create(null)`\r\n * or by using the Object global (native) function, all other \"objects\" ar\r\n * @since 0.4.4\r\n * @group Type Identity\r\n * @group Object\r\n * @param value - The value to check\r\n * @returns true if `value` is a normal plain object\r\n * @example\r\n * ```ts\r\n * console.log(isPlainObject({ 0: 'a', 1: 'b', 2: 'c' }));      // true\r\n * console.log(isPlainObject({ 100: 'a', 2: 'b', 7: 'c' }));    // true\r\n * console.log(isPlainObject(objCreate(null)));                 // true\r\n *\r\n * const myObj = objCreate({}, {\r\n *   getFoo: {\r\n *     value() { return this.foo; }\r\n *   }\r\n * });\r\n * myObj.foo = 1;\r\n * console.log(isPlainObject(myObj));                   // true\r\n *\r\n * console.log(isPlainObject(['a', 'b', 'c']));         // false\r\n * console.log(isPlainObject(new Date()));              // false\r\n * console.log(isPlainObject(new Error(\"An Error\")));   // false\r\n * console.log(isPlainObject(null));                    // false\r\n * console.log(isPlainObject(undefined));               // false\r\n * console.log(isPlainObject(\"null\"));                  // false\r\n * console.log(isPlainObject(\"undefined\"));             // false\r\n * console.log(isPlainObject(\"1\"));                     // false\r\n * console.log(isPlainObject(\"aa\"));                    // false\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function isPlainObject(value: any): value is object {\r\n    if (!value || typeof value !== OBJECT) {\r\n        return false;\r\n    }\r\n\r\n    if (!_gblWindow) {\r\n        // Lazily cache the current global window value and default it to \"true\" (so we bypass this check in the future)\r\n        _gblWindow = hasWindow() ? getWindow() : (true as any);\r\n    }\r\n\r\n    let result = false;\r\n    if (value !== _gblWindow) {\r\n\r\n        if (!_objCtrFnString) {\r\n            // Lazily caching what the runtime reports as the object function constructor (as a string)\r\n            // Using an current function lookup to find what this runtime calls a \"native\" function\r\n            _fnToString = Function[PROTOTYPE][TO_STRING];\r\n            _objCtrFnString = _fnToString[CALL](ObjClass);\r\n        }\r\n\r\n        try {\r\n            let proto = objGetPrototypeOf(value);\r\n\r\n            // No prototype so looks like an object created with Object.create(null)\r\n            result = !proto;\r\n            if (!result) {\r\n                if (objHasOwnProperty(proto, CONSTRUCTOR)) {\r\n                    proto = proto[CONSTRUCTOR]\r\n                }\r\n            \r\n                result = !!(proto && typeof proto === FUNCTION && _fnToString[CALL](proto) === _objCtrFnString);\r\n            }\r\n        } catch (ex) {\r\n            // Something went wrong, so it's not an object we are playing with\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { arrForEach } from \"../array/forEach\";\r\nimport { isArray, isDate, isNullOrUndefined, isPrimitiveType } from \"../helpers/base\";\r\nimport { CALL, FUNCTION, NULL_VALUE, OBJECT } from \"../internal/constants\";\r\nimport { objDefine } from \"./define\";\r\nimport { isPlainObject } from \"./is_plain_object\";\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Provides the current context while performing a deep copy\r\n */\r\ninterface _DeepCopyContext {\r\n    handler: ObjDeepCopyHandler;\r\n    src: any;\r\n    path?: Array<string | number | symbol>;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Defines the type used for tracking visited objects during deep copy to identify recursive\r\n * objects.\r\n */\r\ninterface _RecursiveVisitMap {\r\n    k: any;\r\n    v: any;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Generic Object deep copy handler which creates a new plain object and copies enumerable properties from\r\n * the source to the new target plain object. The source object does not have to be a plain object.\r\n * @param details - The details object for the current property being copied\r\n * @returns true if the handler processed the field.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nfunction _defaultDeepCopyHandler(details: IObjDeepCopyHandlerDetails): boolean {\r\n    // Make sure we at least copy plain objects\r\n    details.value && plainObjDeepCopyHandler(details);\r\n\r\n    // Always return true so that the iteration completes\r\n    return true;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * The ordered default deep copy handlers\r\n */\r\nconst defaultDeepCopyHandlers: ObjDeepCopyHandler[] = [\r\n    arrayDeepCopyHandler,\r\n    plainObjDeepCopyHandler,\r\n    functionDeepCopyHandler,\r\n    dateDeepCopyHandler\r\n];\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Helper function used for detecting and handling recursive properties\r\n * @param visitMap - The current map of objects that have been visited\r\n * @param source - The value (object) to be copied\r\n * @param newPath - The new access path from the origin to the current property\r\n * @param cb - The callback function to call if the current object has not already been processed.\r\n * @returns The new deep copied property, may be incomplete as the object is recursive and is still in the process of being copied\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nfunction _getSetVisited(visitMap: _RecursiveVisitMap[], source: any, newPath: Array<string | number | symbol>, cb: (newEntry: _RecursiveVisitMap) => void) {\r\n    let theEntry: _RecursiveVisitMap;\r\n    arrForEach(visitMap, (entry) => {\r\n        if (entry.k === source) {\r\n            theEntry = entry;\r\n            return -1;\r\n        }\r\n    });\r\n\r\n    if (!theEntry) {\r\n        // Add the target to the visit map so that deep nested objects refer to the single instance\r\n        // Even if we have not finished processing it yet.\r\n        theEntry = { k: source, v: source };\r\n        visitMap.push(theEntry);\r\n\r\n        // Now call the copy callback so that it populates the target\r\n        cb(theEntry);\r\n    }\r\n\r\n    return theEntry.v;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal helper which performs the recursive deep copy\r\n * @param visitMap - The current map of objects that have been visited\r\n * @param value - The value being copied\r\n * @param ctx - The current copy context\r\n * @param key - [Optional] the current `key` for the value from the source object\r\n * @returns The new deep copied instance of the value.\r\n */\r\nfunction _deepCopy<T>(visitMap: _RecursiveVisitMap[], value: T, ctx: _DeepCopyContext, key?: string | number | symbol): T {\r\n    let userHandler = ctx.handler;\r\n    let newPath = ctx.path ? (key ? ctx.path.concat(key) : ctx.path) : [];\r\n\r\n    let newCtx: _DeepCopyContext = {\r\n        handler: ctx.handler,\r\n        src: ctx.src,\r\n        path: newPath\r\n    };\r\n\r\n    const theType = typeof value;\r\n    let isPlain = false;\r\n    let isPrim = value === NULL_VALUE;\r\n    if (!isPrim) {\r\n        if (value && theType === OBJECT) {\r\n            isPlain = isPlainObject(value);\r\n        } else {\r\n            isPrim = isPrimitiveType(theType);\r\n        }\r\n    }\r\n\r\n    let details: IObjDeepCopyHandlerDetails = {\r\n        type: theType,\r\n        isPrim: isPrim,\r\n        isPlain: isPlain,\r\n        value: value,\r\n        result: value,\r\n        path: newPath,\r\n        origin: ctx.src,\r\n        copy: <T>(source: T, newKey?: string | number | symbol): T => {\r\n            return _deepCopy(visitMap, source, newKey ? newCtx : ctx, newKey);\r\n        },\r\n        copyTo: <T>(target: T, source: T): T => {\r\n            return _copyProps(visitMap, target, source, newCtx);\r\n        }\r\n    };\r\n\r\n    if (!details.isPrim) {\r\n        return _getSetVisited(visitMap, value, newPath, (newEntry) => {\r\n\r\n            // Use an accessor to set the new value onto the new entry\r\n            objDefine(details, \"result\", {\r\n                g: function () {\r\n                    return newEntry.v;\r\n                },\r\n                s: function (newValue: any) {\r\n                    newEntry.v = newValue;\r\n                }\r\n            });\r\n\r\n            let idx = 0;\r\n            let handler = userHandler;\r\n            while (!(handler || (idx < defaultDeepCopyHandlers.length ? defaultDeepCopyHandlers[idx++] : _defaultDeepCopyHandler))[CALL](ctx, details)) {\r\n                handler = NULL_VALUE;\r\n            }\r\n        });\r\n    }\r\n\r\n    // Allow the user handler to override the provided value\r\n    if (userHandler && userHandler[CALL](ctx, details)) {\r\n        return details.result;\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal helper to copy all of the enumerable properties from the source object to the new target object\r\n * @param visitMap - The current map of objects that have been visited\r\n * @param target - The target object to copy the properties to.\r\n * @param source - The source object to copy the properties from.\r\n * @param ctx - The current deep copy context\r\n * @returns The populated target object\r\n */\r\nfunction _copyProps<T>(visitMap: _RecursiveVisitMap[], target: T, source: T, ctx: _DeepCopyContext) {\r\n    if (!isNullOrUndefined(source)) {\r\n        // Copy all properties (not just own properties)\r\n        for (const key in source) {\r\n            // Perform a deep copy of the object\r\n            target[key] = _deepCopy(visitMap, source[key], ctx, key);\r\n        }\r\n    }\r\n\r\n    return target;\r\n}\r\n\r\n/**\r\n * Object helper to copy all of the enumerable properties from the source object to the target, the\r\n * properties are copied via {@link objDeepCopy}. Automatic handling of recursive properties was added in v0.4.4\r\n * @group Object\r\n * @param target - The target object to populated\r\n * @param source - The source object to copy the properties from\r\n * @param handler - An optional callback that lets you provide / overide the deep cloning (Since 0.4.4)\r\n * @returns The target object\r\n * @example\r\n * ```ts\r\n * let a: any = { a: 1 };\r\n * let b: any = { b: 2, d: new Date(), e: new TestClass(\"Hello Darkness\") };\r\n * a.b = b;        // { a: 1, b: { b: 2} }\r\n * b.a = a;        // { a: 1, b: { b: 2, a: { a: 1, { b: 2, a: ... }}}}\r\n *\r\n * function copyHandler(details: IObjDeepCopyHandlerDetails) {\r\n *     // details.origin === a\r\n *     // details.path[] is the path to the current value\r\n *     if (details.value && isDate(details.value)) {\r\n *         // So for the date path === [ \"b\", \"d\" ] which represents\r\n *         // details.origin[\"b\"][\"d\"] === The Date\r\n *\r\n *         // Create a clone the Date object and set as the \"newValue\"\r\n *         details.value = new Date(details.value.getTime());\r\n *\r\n *         // Return true to indicate that we have \"handled\" the conversion\r\n *         // See objDeepCopy example for just reusing the original value (just don't replace details.value)\r\n *         return true;\r\n *     }\r\n *\r\n *     return false;\r\n * }\r\n *\r\n * let c: any = objCopyProps({}, a, copyHandler);\r\n *\r\n * assert.notEqual(a, c, \"check a and c are not the same\");\r\n * assert.ok(c !== c.b.a, \"The root object won't be the same for the target reference as are are copying properties to our target\");\r\n * assert.ok(c.b === c.b.a.b, \"Check that the 2 'b' references are the same object\");\r\n * assert.ok(c.b.a === c.b.a.b.a, \"Check that the 2 'a' references are the same object\");\r\n * assert.ok(c.b.d === c.b.a.b.d, \"Check that the 2 'd' references are the same object\");\r\n * assert.ok(isDate(c.b.d), \"The copied date is still real 'Date' instance\");\r\n * assert.notEqual(c.b.d, a.b.d, \"And the copied date is not the same as the original\");\r\n * assert.equal(c.b.d.getTime(), a.b.d.getTime(), \"But the dates are the same\");\r\n *\r\n * assert.ok(isObject(c.b.d), \"The copied date is now an object\");\r\n * ```\r\n */\r\nexport function objCopyProps<T>(target: T, source: any, handler?: ObjDeepCopyHandler) {\r\n    let ctx: _DeepCopyContext = {\r\n        handler: handler,\r\n        src: source,\r\n        path: []\r\n    };\r\n\r\n    return _copyProps([], target, source, ctx);\r\n}\r\n\r\n/**\r\n * Context details passed to the deep copy handler to allow it parse the current value based on the original source\r\n * and path to reach the current value. The provided value should be updated with the value to by copied into the\r\n * new deep copy and will be used when the handler returns true.\r\n * @since 0.4.4\r\n * @group Object - Deep Copy\r\n */\r\nexport interface IObjDeepCopyHandlerDetails {\r\n    /**\r\n     * Identifies the type of the value as per `typeof value`, saves each check having to process this value.\r\n     */\r\n    type: string;\r\n\r\n    /**\r\n     * Identifies whether the type of the value is considered to be a primitive value\r\n     */\r\n    isPrim: boolean;\r\n\r\n    /**\r\n     * Identifies whether the type is a plain object or not, this also saves each handler from checking\r\n     * the `type`, currently the type will also be \"object\" if this is `true`.\r\n     * @since 0.9.6\r\n     */\r\n    isPlain: boolean;\r\n\r\n    /**\r\n     * The current value to be processed, replace this value with the new deep copied value to use when returning\r\n     * true from the handler. Ignored when the handler returns false.\r\n     */\r\n    readonly value: any;\r\n\r\n    /**\r\n     * Replace this value with the new deep copied value (defaults to the same as the value property) this value will be\r\n     * used when returning true from the handler. Ignored when the handler returns false.\r\n     */\r\n    result: any;\r\n\r\n    /**\r\n     * A array of keys from the orginal source (origin) object which lead to the current value\r\n     */\r\n    path: Array<string | number | symbol>;\r\n\r\n    /**\r\n     * The original source object passed into the `objDeepCopy()` or `objCopyProps()` functions.\r\n     */\r\n    origin?: any;\r\n\r\n    /**\r\n     * Continue the deep copy with the current context and recursive checks, effectively calls {@link objDeepCopy}\r\n     * but keeps the current context and recursive references.\r\n     * @param source - The source object to be copied\r\n     */\r\n    copy<T>(source: T, key?: string | number | symbol): T;\r\n\r\n    /**\r\n     * Continue the deep copy with the current context and recursive checks by copying all of the properties\r\n     * from the source to the target instance, effectively calls {@link objCopyProps} but keeps the current context\r\n     * and recursive references.\r\n     * @param target - The target object to populated\r\n     * @param source - The source object to copy the properties from\r\n     */\r\n    copyTo<T>(target: T, source: T): T;\r\n}\r\n\r\n/**\r\n * An optional deep copy handler that lets you provide your own logic for deep copying objects, will\r\n * only be called once per object/property combination, so if an object is recursively included it\r\n * will only get called for the first instance.\r\n * Handlers SHOULD assign the \"result\" value with the new target instance BEFORE performing any additional deep copying,\r\n * so any recursive objects will get a reference to the new instance and not keep attempting to create new copies.\r\n * @since 0.4.4\r\n * @group Object - Deep Copy\r\n * @return true if handled and the value in details should be used otherwise false to continue with the default handling\r\n * The library includes several helpers which can be reused by any user provided handler\r\n * - {@link functionDeepCopyHandler} - Used to copy functions\r\n * - {@link arrayDeepCopyHandler} - Used to copy arrays\r\n * - {@link plainObjDeepCopyHandler} - Used to copy plain objects\r\n * - {@link dateDeepCopyHandler} - Used to copy date instances\r\n */\r\nexport type ObjDeepCopyHandler = (details: IObjDeepCopyHandlerDetails) => boolean;\r\n\r\n/**\r\n * Performs a deep copy of the source object, this is designed to work with base (plain) objects, arrays and primitives\r\n * if the source object contains class objects they will either be not cloned or may be considered non-operational after\r\n * performing a deep copy. ie. This is performing a deep copy of the objects properties so that altering the copy will\r\n * not mutate the source object hierarchy.\r\n * Automatic handling of recursive properties was added in v0.4.4.\r\n * @group Object\r\n * @group Object - Deep Copy\r\n * @param source - The source object to be copied\r\n * @param handler - An optional callback that lets you provide / overide the deep cloning (Since 0.4.4)\r\n * @return A new object which contains a deep copy of the source properties\r\n * @example\r\n * ```ts\r\n * let a: any = { a: 1 };\r\n * let b: any = { b: 2, d: new Date(), e: new TestClass(\"Hello Darkness\") };\r\n * a.b = b;        // { a: 1, b: { b: 2} }\r\n * b.a = a;        // { a: 1, b: { b: 2, a: { a: 1, { b: 2, a: ... }}}}\r\n *\r\n * function copyHandler(details: IObjDeepCopyHandlerDetails) {\r\n *     // details.origin === a\r\n *     // details.path[] is the path to the current value\r\n *     if (details.value && isDate(details.value)) {\r\n *         // So for the date path === [ \"b\", \"d\" ] which represents\r\n *         // details.origin[\"b\"][\"d\"] === The Date\r\n *\r\n *         // Return true to indicate that we have \"handled\" the conversion\r\n *         // Which in this case will reuse the existing instance (as we didn't replace details.value)\r\n *         // See objCopyProps example for replacing the Date instance\r\n *         return true;\r\n *     }\r\n *\r\n *     return false;\r\n * }\r\n *\r\n * let c: any = objDeepCopy(a, copyHandler);\r\n *\r\n * assert.notEqual(a, c, \"check a and c are not the same\");\r\n * assert.ok(c === c.b.a, \"The root object won't be the same for the target reference\");\r\n * assert.ok(c.b === c.b.a.b, \"Check that the 2 'b' references are the same object\");\r\n * assert.ok(c.b.a === c.b.a.b.a, \"Check that the 2 'a' references are the same object\");\r\n * assert.ok(c.b.d === c.b.a.b.d, \"Check that the 2 'd' references are the same object\");\r\n * assert.ok(isDate(c.b.d), \"The copied date is still real 'Date' instance\");\r\n * assert.equal(c.b.d, a.b.d, \"And the copied date is the original date\");\r\n * assert.equal(c.b.d.getTime(), a.b.d.getTime(), \"But the dates are the same\");\r\n * assert.ok(isObject(c.b.d), \"The copied date is now an object\");\r\n * assert.ok(!isError(c.b.e), \"The copied error is no longer a real 'Error' instance\");\r\n * assert.ok(isObject(c.b.e), \"The copied error is now an object\");\r\n * assert.equal(42, c.b.e.value, \"Expect that the local property was copied\");\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function objDeepCopy<T>(source: T, handler?: ObjDeepCopyHandler): T {\r\n    let ctx: _DeepCopyContext = {\r\n        handler: handler,\r\n        src: source\r\n    };\r\n\r\n    return _deepCopy([], source, ctx);\r\n}\r\n\r\n/**\r\n * Deep copy handler to identify and copy arrays.\r\n * @since 0.4.4\r\n * @group Object - Deep Copy\r\n * @param details - The details object for the current property being copied\r\n * @returns `true` if the current value is a function otherwise `false`\r\n */\r\nexport function arrayDeepCopyHandler(details: IObjDeepCopyHandlerDetails): boolean {\r\n    let value = details.value;\r\n    if (isArray(value)) {\r\n        // Assign the \"result\" value before performing any additional deep Copying, so any recursive object get a reference to this instance\r\n        let target: any[] = details.result = [];\r\n        target.length = value.length;\r\n\r\n        // Copying all properties as arrays can contain non-indexed based properties\r\n        details.copyTo(target, value);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Deep copy handler to identify and copy Date instances.\r\n * @since 0.4.4\r\n * @group Object - Deep Copy\r\n * @param details - The details object for the current property being copied\r\n * @returns `true` if the current value is a function otherwise `false`\r\n */\r\nexport function dateDeepCopyHandler(details: IObjDeepCopyHandlerDetails) {\r\n    let value = details.value;\r\n    if (isDate(value)) {\r\n        details.result = new Date(value.getTime());\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Deep copy handler to identify and copy functions. This handler just returns the original\r\n * function so the original function will be assigned to any new deep copied instance.\r\n * @since 0.4.4\r\n * @group Object - Deep Copy\r\n * @param details - The details object for the current property being copied\r\n * @returns `true` if the current value is a function otherwise `false`\r\n */\r\nexport function functionDeepCopyHandler(details: IObjDeepCopyHandlerDetails): boolean {\r\n    if (details.type === FUNCTION) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Deep copy handler to identify and copy plain objects.\r\n * @since 0.4.4\r\n * @group Object - Deep Copy\r\n * @param details - The details object for the current property being copied\r\n * @returns `true` if the current value is a function otherwise `false`\r\n */\r\nexport function plainObjDeepCopyHandler(details: IObjDeepCopyHandlerDetails): boolean {\r\n    let value = details.value;\r\n    if (value && details.isPlain) {\r\n        // Assign the \"result\" value before performing any additional deep Copying, so any recursive object get a reference to this instance\r\n        let target = details.result = {};\r\n        details.copyTo(target, value);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { arrForEach } from \"../array/forEach\";\r\nimport { ArrSlice, CALL } from \"../internal/constants\";\r\nimport { objCopyProps, objDeepCopy } from \"../object/copy\";\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n */\r\nfunction _doExtend<T>(target: T, theArgs: any[]): any {\r\n    arrForEach(theArgs, (theArg) => {\r\n        objCopyProps(target, theArg);\r\n    });\r\n\r\n    return target;\r\n}\r\n\r\n/**\r\n * Create a new object by merging the passed arguments, this is effectively the same as calling `objExtend({}, ...theArgs)` where\r\n * all of the arguments are added to a new object that is returned.\r\n * @group Object\r\n * @param target - The original object to be extended.\r\n * @param theArgs - The optional number of arguments to be copied\r\n * @returns - A new object or the original\r\n */\r\nexport function deepExtend<T>(target: T, ...theArgs: any): T & any;\r\n\r\n/**\r\n * Create a new object by merging the passed arguments, this is effectively the same as calling `objExtend({}, ...theArgs)` where\r\n * all of the arguments are added to a new object that is returned.\r\n * @group Object\r\n * @param target - The original object to be extended.\r\n * @param objN - The optional number of arguments to be copied\r\n * @returns - A new object or the original\r\n */\r\nexport function deepExtend<T, T1, T2, T3, T4, T5, T6>(target: T, obj1?: T1, obj2?: T2, obj3?: T3, obj4?: T4, obj5?: T5, obj6?: T6): T & T1 & T2 & T3 & T4 & T5 & T6 {\r\n    return _doExtend(objDeepCopy(target) || {}, ArrSlice[CALL](arguments));\r\n}\r\n \r\n/**\r\n * Extend the target object by merging the passed arguments into it\r\n * @group Object\r\n * @param target - The object to be extended or overwritten\r\n * @param theArgs - The optional number of arguments to be copied\r\n * @returns - A new object or the original\r\n */\r\nexport function objExtend<T>(target: T, ...theArgs: any): T & any;\r\n\r\n/**\r\n * Extend the target object by merging the passed arguments into it\r\n * @group Object\r\n * @param target - The object to be extended or overwritten\r\n * @param objN - The optional number of arguments to be copied\r\n * @returns - A new object or the original\r\n */\r\nexport function objExtend<T, T1, T2, T3, T4, T5, T6>(target: T, obj1?: T1, obj2?: T2, obj3?: T3, obj4?: T4, obj5?: T5, obj6?: T6): T & T1 & T2 & T3 & T4 & T5 & T6 {\r\n    return _doExtend(target || {}, ArrSlice[CALL](arguments));\r\n}\r\n\r\n ","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2023 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunction, _unwrapFunctionWithPoly } from \"../internal/unwrapFunction\";\r\nimport { polyStrSymSplit } from \"../polyfills/split\";\r\n\r\n/**\r\n * The `strSplit()` splits a string into substrings using the pattern and divides a String\r\n * into an ordered list of substrings by searching for the pattern, puts these substrings\r\n * into an array, and returns the array.\r\n * @function\r\n * @since 0.9.1\r\n * @group String\r\n * @param value - The string value to be split into substrings.\r\n * @param separator - The pattern describing where each split should occur. Can be undefined, a\r\n * string, or an object with a [`Symbol.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split)\r\n * method (if supported) — the typical example being a regular expression. Omitting separator or\r\n * passing undefined causes strSplit() to return an array with the calling string as a single\r\n * element. All values that are not undefined or objects with a `@@split` method are coerced to strings.\r\n * @param limit - A non-negative integer specifying a limit on the number of substrings to be\r\n * included in the array. If provided, splits the string at each occurrence of the specified\r\n * separator, but stops when limit entries have been placed in the array. Any leftover text is\r\n * not included in the array at all.\r\n * - The array may contain fewer entries than limit if the end of the string is reached before\r\n * the limit is reached.\r\n * - If limit is 0, [] is returned.\r\n * @return An Array of strings, split at each point where the separator occurs in the given string.\r\n * @example\r\n * ```ts\r\n * strSplit(\"Oh brave new world that has such people in it.\", \" \");\r\n * // [ \"Oh\", \"brave\", \"new\", \"world\", \"that\", \"has\", \"such\", \"people\", \"in\", \"it.\" ]\r\n *\r\n * strSplit(\"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\", \",\");\r\n * // [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\r\n * ```\r\n */\r\nexport const strSplit: (value: string, separator: string | RegExp, limit?: number) => string[] = (/*#__PURE__*/_unwrapFunction(\"split\", StrProto));\r\n\r\n/**\r\n * The `strSymSplit()` splits a string into substrings using the [`Symbol.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split)\r\n * method from the splitter object to provide custom behavior. If the runtime supports symbols\r\n * then the default runtime `split` method will be called, It will use {@link getKnownSymbol}\r\n * to get the {@link WellKnownSymbols.split} symbol which will return the runtime symbol or the\r\n * polyfill symbol when not supported by the runtime.\r\n * @function\r\n * @since 0.9.1\r\n * @group String\r\n * @param value - The string value to be split into substrings.\r\n * @param splitter - The object which contains a Symbol.split method, Omitting splitter or passing\r\n * an object that doesn't contain a Symbol.split causes it to return an array with the calling\r\n * string as a single element.\r\n * @param limit - A non-negative integer specifying a limit on the number of substrings to be\r\n * included in the array. If provided, splits the string at each occurrence of the specified\r\n * separator, but stops when limit entries have been placed in the array. Any leftover text is\r\n * not included in the array at all.\r\n * - The array may contain fewer entries than limit if the end of the string is reached before\r\n * the limit is reached.\r\n * - If limit is 0, [] is returned.\r\n * @return An Array of strings, split at each point where the separator occurs in the given string.\r\n * @example\r\n * ```ts\r\n * const splitByNumber = {\r\n *   [Symbol.split]: (str: string) => {\r\n *     let num = 1;\r\n *     let pos = 0;\r\n *     const result = [];\r\n *     while (pos < str.length) {\r\n *       const matchPos = strIndexOf(str, asString(num), pos);\r\n *       if (matchPos === -1) {\r\n *         result.push(strSubstring(str, pos));\r\n *         break;\r\n *       }\r\n *       result.push(strSubstring(str, pos, matchPos));\r\n *       pos = matchPos + asString(num).length;\r\n *       num++;\r\n *     }\r\n *     return result;\r\n *   }\r\n * };\r\n *\r\n * const myString = \"a1bc2c5d3e4f\";\r\n * console.log(strSymSplit(myString, splitByNumber)); // [ \"a\", \"bc\", \"c5d\", \"e\", \"f\" ]\r\n * ```\r\n */\r\nexport const strSymSplit: (value: string, splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number) => string[] = (/*#__PURE__*/_unwrapFunctionWithPoly(\"split\", StrProto, polyStrSymSplit));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { arrForEach } from \"../array/forEach\";\r\nimport { isNullOrUndefined } from \"./base\";\r\nimport { strSplit } from \"../string/split\";\r\nimport { iterForOf } from \"../iterator/forOf\";\r\n\r\n/**\r\n * Get the named value from the target object where the path may be presented by a string which\r\n * contains \".\" characters to separate the nested objects of the heirarchy / path to the value.\r\n * @since 0.9.1\r\n * @group Value\r\n * @param target - The source object that contains the value\r\n * @param path - The path identifing the location where the value should be located\r\n * @param defValue - If the final value or any intervening object in the heirarchy is not present\r\n * the default value will be returned\r\n * @returns The value located based on the path or the defaule value\r\n * @example\r\n * ```ts\r\n * let theValue = {\r\n *   Hello: {\r\n *      Darkness: {\r\n *          my: \"old\"\r\n *      }\r\n *   },\r\n *   friend: \"I've\",\r\n *   come: {\r\n *      to: {\r\n *          see: \"you\"\r\n *      }\r\n *   }\r\n * };\r\n *\r\n * let value = getValueByKey(theValue, \"Hello.Darkness.my\", \"friend\");\r\n * // value === \"my\"\r\n *\r\n * let value = getValueByKey(theValue, \"My.Old\", \"friend\");\r\n * // value === \"friend\"\r\n *\r\n * let value = getValueByKey(theValue, \"come.to\", \"friend\");\r\n * // value === { see: \"you\" }\r\n *\r\n * let value = getValueByKey(theValue, \"friend\", \"friend\");\r\n * // value === \"I've\"\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function getValueByKey<V, T extends object = any>(target: T, path: string, defValue?: V): V {\r\n    if (!path || !target) {\r\n        return defValue;\r\n    }\r\n\r\n    let parts = strSplit(path, \".\");\r\n    let cnt = parts.length;\r\n\r\n    for (let lp = 0; lp < cnt && !isNullOrUndefined(target); lp++) {\r\n        target = (target as any)[parts[lp]];\r\n    }\r\n\r\n    return (!isNullOrUndefined(target) ? target : defValue) as V;\r\n}\r\n\r\n/**\r\n * Get the named value from the target object where the path is represented by the string iterator\r\n * or iterable to separate the nested objects of the heirarchy / path to the value. If the target\r\n * does not contain the full path the iterator will not be completed.\r\n *\r\n * The order of processing of the iterator is not reset if you add or remove elements to the iterator,\r\n * the actual behavior will depend on the iterator imeplementation.\r\n *\r\n * If the passed `iter` is both an Iterable<T> and Iterator<T> the Iterator<T> interface takes preceedence.\r\n * @since 0.9.1\r\n * @group Value\r\n * @param target - The source object that contains the value\r\n * @param iter - The iter identifying the path of the final key value\r\n * @param defValue - If the final value or any intervening object in the heirarchy is not present\r\n * the default value will be returned\r\n * @returns The value located based on the path or the defaule value\r\n * @example\r\n * ```ts\r\n * let theValue = {\r\n *   Hello: {\r\n *      Darkness: {\r\n *          my: \"old\"\r\n *      }\r\n *   },\r\n *   friend: \"I've\",\r\n *   come: {\r\n *      to: {\r\n *          see: \"you\"\r\n *      }\r\n *   }\r\n * };\r\n *\r\n * let value = getValueByKey(theValue, [\"Hello\", \"Darkness\", \"my\"], \"friend\");\r\n * // value === \"my\"\r\n *\r\n * let value = getValueByKey(theValue, [\"My\", \"Old\"], \"friend\");\r\n * // value === \"friend\"\r\n *\r\n * let value = getValueByKey(theValue, [\"come\", \"to\"], \"friend\");\r\n * // value === { see: \"you\" }\r\n *\r\n * let value = getValueByKey(theValue, [\"friend\"], \"friend\");\r\n * // value === \"I've\"\r\n * ```\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function getValueByIter<V, T extends object = any>(target: T, iter: Iterator<string> | Iterable<string>, defValue?: V): V {\r\n    if (!iter || !target) {\r\n        return defValue;\r\n    }\r\n\r\n    iterForOf(iter, (value) => {\r\n        if (isNullOrUndefined(target)) {\r\n            return -1;\r\n        }\r\n\r\n        target = (target as any)[value];\r\n    });\r\n\r\n    return (!isNullOrUndefined(target) ? target : defValue) as V;\r\n}\r\n\r\n/**\r\n * Set the named value on the target object where the path may be presented by a string which\r\n * contains \".\" characters to separate the nested objects of the heirarchy / path to the value.\r\n * @since 0.9.1\r\n * @group Value\r\n * @param target - The target object\r\n * @param path - The path identifying the location of the final key value\r\n * @param value - The value to set\r\n * @example\r\n * ```ts\r\n * let theValue = { };\r\n * setValueByKey(theValue, \"Hello.Darkness.my\", \"old\");\r\n * // Resulting Object: { Hello: { Darkness: { my: \"old\" } } }\r\n * setValueByKey(theValue, \"friend\", \"I've\");\r\n * // Resulting Object: { Hello: { Darkness: { my: \"old\" } }, friend: \"I've\" }\r\n * setValueByKey(theValue, \"come.to.see\", \"you\");\r\n * // Resulting Object: { Hello: { Darkness: { my: \"old\" } }, friend: \"I've\", come: { to : { see: \"you\" } } }\r\n * ```\r\n */\r\nexport function setValueByKey<T>(target: any, path: string, value: T) {\r\n    if (target && path) {\r\n        let parts = strSplit(path, \".\");\r\n        let lastKey = parts.pop();\r\n    \r\n        arrForEach(parts, (key) => {\r\n            if (isNullOrUndefined(target[key])) {\r\n                // Add an empty object / map\r\n                target[key] = {};\r\n            }\r\n    \r\n            target = target[key];\r\n        });\r\n    \r\n        target[lastKey] = value;\r\n    }\r\n}\r\n\r\n/**\r\n * Set the named value on the target object where the path is represented by the string iterator\r\n * or iterable to separate the nested objects of the heirarchy / path to the value.\r\n *\r\n * The order of processing of the iterator is not reset if you add or remove elements to the iterator,\r\n * the actual behavior will depend on the iterator imeplementation.\r\n *\r\n * If the passed `iter` is both an Iterable<T> and Iterator<T> the Iterator<T> interface takes preceedence.\r\n * @since 0.9.1\r\n * @group Value\r\n * @param target - The target object\r\n * @param iter - The iter identifying the path of the final key value\r\n * @param value - The value to set\r\n * @example\r\n * ```ts\r\n * let theValue = { };\r\n * setValueByIter(theValue, [\"Hello\", \"Darkness\", \"my\"], \"old\");\r\n * // Resulting Object: { Hello: { Darkness: { my: \"old\" } } }\r\n * setValueByIter(theValue, [\"friend\"], \"I've\");\r\n * // Resulting Object: { Hello: { Darkness: { my: \"old\" } }, friend: \"I've\" }\r\n * setValueByIter(theValue, [\"come\", \"to\", \"see\"], \"you\");\r\n * // Resulting Object: { Hello: { Darkness: { my: \"old\" } }, friend: \"I've\", come: { to : { see: \"you\" } } }\r\n * ```\r\n */\r\nexport function setValueByIter<T>(target: any, iter: Iterator<string> | Iterable<string>, value: T) {\r\n    if (target && iter) {\r\n        let lastKey: string;\r\n    \r\n        iterForOf(iter, (key: string) => {\r\n            if (lastKey) {\r\n                if (isNullOrUndefined(target[lastKey])) {\r\n                    // Add an empty object / map\r\n                    target[lastKey] = {};\r\n                }\r\n        \r\n                target = target[lastKey];\r\n            }\r\n\r\n            lastKey = key;\r\n        });\r\n    \r\n        target[lastKey] = value;\r\n    }\r\n}","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022-2025 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { GET_OWN_PROPERTY_DESCRIPTOR, GET_OWN_PROPERTY_NAMES, GET_OWN_PROPERTY_SYMBOLS, ObjClass } from \"../internal/constants\";\r\nimport { _returnEmptyArray, _returnNothing } from \"../internal/stubs\";\r\nimport { _pureAssign, _pureRef } from \"../internal/treeshake_helpers\";\r\nimport { polyObjGetOwnPropertyDescriptors } from \"../polyfills/object/objGetOwnProperty\";\r\n\r\n/**\r\n * The objGetOwnPropertyDescriptor() method returns an object describing the configuration of a specific property on\r\n * a given object (that is, one directly present on an object and not in the object's prototype chain). The object\r\n * returned is mutable but mutating it has no effect on the original property's configuration.\r\n * @function\r\n * @since 0.4.3\r\n * @group Object\r\n * @param target - Object that contains the property.\r\n * @param prop - Name of the property.\r\n * @returns A property descriptor of the given property if it exists on the object, otherwise undefined.\r\n *\r\n * @example\r\n * ```ts\r\n * o = {};\r\n * objDefineProp(o, 'qux', {\r\n *   value: 8675309,\r\n *   writable: false,\r\n *   enumerable: false\r\n * });\r\n * d = objGetOwnPropertyDescriptor(o, 'qux');\r\n * // d is {\r\n * //   value: 8675309,\r\n * //   writable: false,\r\n * //   enumerable: false,\r\n * //   configurable: false\r\n * // }\r\n *\r\n * objGetOwnPropertyDescriptor('foo', 0);\r\n * // TypeError: \"foo\" is not an object  // ES5 code\r\n *\r\n * objGetOwnPropertyDescriptor('foo', 0);\r\n * // Object returned by ES2015 code: {\r\n * //   configurable: false,\r\n * //   enumerable: true,\r\n * //   value: \"f\",\r\n * //   writable: false\r\n * // }\r\n * ```\r\n * Note: In ES5, if the first argument to this method is not an object (a primitive), then it will cause a TypeError. In ES2015, a non-object first argument will be coerced to an object at first.\r\n */\r\nexport const objGetOwnPropertyDescriptor: (target: any, prop: PropertyKey) => PropertyDescriptor | undefined = (/*#__PURE__*/_pureAssign((/*#__PURE__*/_pureRef<typeof Object.getOwnPropertyDescriptor>(ObjClass as any, GET_OWN_PROPERTY_DESCRIPTOR)), _returnNothing));\r\n\r\n/**\r\n * The objGetOwnPropertyDescriptors() method returns all own property descriptors of a given object.\r\n * @function\r\n * @since 0.12.0\r\n * @group Object\r\n * @param obj - The object for which to get all own property descriptors\r\n * @returns An object containing all own property descriptors of the given object\r\n *\r\n * @example\r\n * ```ts\r\n * const obj = {\r\n *   get foo() { return 17; },\r\n *   bar: 42\r\n * };\r\n *\r\n * const descriptors = objGetOwnPropertyDescriptors(obj);\r\n * // descriptors is:\r\n * // {\r\n * //   foo: {\r\n * //     configurable: true,\r\n * //     enumerable: true,\r\n * //     get: [Function: get foo],\r\n * //     set: undefined\r\n * //   },\r\n * //   bar: {\r\n * //     configurable: true,\r\n * //     enumerable: true,\r\n * //     value: 42,\r\n * //     writable: true\r\n * //   }\r\n * // }\r\n *\r\n * // This method can be used to create a shallow copy including getters and setters\r\n * const shallowCopy = objCreate(\r\n *   objGetPrototypeOf(obj),\r\n *   objGetOwnPropertyDescriptors(obj)\r\n * );\r\n * ```\r\n */\r\nexport const objGetOwnPropertyDescriptors: (obj: any) => PropertyDescriptorMap = (/*#__PURE__*/_pureAssign((/*#__PURE__*/_pureRef<typeof Object.getOwnPropertyDescriptors>(ObjClass, \"getOwnPropertyDescriptors\")), polyObjGetOwnPropertyDescriptors));\r\n\r\n/**\r\n * The objGetOwnPropertyNames() method returns an array of all properties (including non-enumerable properties except for\r\n * those which use Symbol) found directly in a given object.\r\n * @function\r\n * @since 0.12.0\r\n * @group Object\r\n * @param obj - The object whose enumerable and non-enumerable properties are to be returned\r\n * @returns An array of strings that correspond to the properties found directly in the given object\r\n *\r\n * @example\r\n * ```ts\r\n * objGetOwnPropertyNames({ a: 1, b: 2 }); // ['a', 'b']\r\n *\r\n * // Array properties include indices and 'length'\r\n * objGetOwnPropertyNames(['a', 'b']); // ['0', '1', 'length']\r\n *\r\n * // Non-enumerable properties are included\r\n * const obj = Object.create({}, {\r\n *   hidden: { value: 'secret', enumerable: false },\r\n *   visible: { value: 'public', enumerable: true }\r\n * });\r\n * objGetOwnPropertyNames(obj); // ['hidden', 'visible']\r\n * ```\r\n */\r\nexport const objGetOwnPropertyNames: (obj: any) => string[] = (/*#__PURE__*/_pureAssign((/*#__PURE__*/_pureRef<typeof Object.getOwnPropertyNames>(ObjClass, GET_OWN_PROPERTY_NAMES)), _returnEmptyArray));\r\n\r\n/**\r\n * The `objGetOwnPropertySymbols()` method returns an array of all symbol properties found directly upon\r\n * the given object. Unlike Object.getOwnPropertyNames(), this method returns symbol properties only.\r\n *\r\n * @function\r\n * @since 0.12.0\r\n * @group Object\r\n * @param obj - The object whose symbol properties are to be returned.\r\n * @returns An array of all symbol properties found directly upon the given object.\r\n * @example\r\n * ```typescript\r\n * const obj = {};\r\n * const a = Symbol('a');\r\n * const b = Symbol.for('b');\r\n *\r\n * obj[a] = 'localSymbol';\r\n * obj[b] = 'globalSymbol';\r\n *\r\n * const symbolProps = objGetOwnPropertySymbols(obj);\r\n *\r\n * console.log(symbolProps.length); // 2\r\n * console.log(symbolProps[0] === a); // true\r\n * console.log(symbolProps[1] === b); // true\r\n * ```\r\n */\r\nexport const objGetOwnPropertySymbols: (obj: any) => symbol[] = (/* #__PURE__*/_pureAssign((/* #__PURE__ */_pureRef<typeof Object.getOwnPropertySymbols>(ObjClass, GET_OWN_PROPERTY_SYMBOLS)), _returnEmptyArray));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\n\r\n/**\r\n * The `strIndexOf()` method, given two arguments: the string and a substring to search for, searches\r\n * the entire calling string, and returns the index of the first occurrence of the specified substring.\r\n * Given a thrid argument: a number, the method returns the first occurrence of the specified substring\r\n * at an index greater than or equal to the specified number.\r\n * @function\r\n * @group String\r\n * @param value - The value to be checked for the seeach string\r\n * @param searchString - The substring to search for in the value\r\n * @param position - The starting position to search from\r\n * @example\r\n * ```ts\r\n * strIndexOf('hello world', '') // returns 0\r\n * strIndexOf('hello world', '', 0) // returns 0\r\n * strIndexOf('hello world', '', 3) // returns 3\r\n * strIndexOf('hello world', '', 8) // returns 8\r\n *\r\n * // However, if the thrid argument is greater than the length of the string\r\n * strIndexOf('hello world', '', 11) // returns 11\r\n * strIndexOf('hello world', '', 13) // returns 11\r\n * strIndexOf('hello world', '', 22) // returns 11\r\n *\r\n * strIndexOf('Blue Whale', 'Blue')      // returns  0\r\n * strIndexOf('Blue Whale', 'Blute')     // returns -1\r\n * strIndexOf('Blue Whale', 'Whale', 0)  // returns  5\r\n * strIndexOf('Blue Whale', 'Whale', 5)  // returns  5\r\n * strIndexOf('Blue Whale', 'Whale', 7)  // returns -1\r\n * strIndexOf('Blue Whale', '')          // returns  0\r\n * strIndexOf('Blue Whale', '', 9)       // returns  9\r\n * strIndexOf('Blue Whale', '', 10)      // returns 10\r\n * strIndexOf('Blue Whale', '', 11)      // returns 10\r\n * ```\r\n */\r\nexport const strIndexOf: (value: string, searchString: string, position?: number) => number = (/*#__PURE__*/_unwrapFunction(\"indexOf\", StrProto));\r\n\r\n/**\r\n * The `strLastIndexOf()` method, given two arguments: the string and a substring to search for, searches\r\n * the entire calling string, and returns the index of the last occurrence of the specified substring.\r\n * Given a third argument: a number, the method returns the last occurrence of the specified substring\r\n * at an index less than or equal to the specified number.\r\n * @function\r\n * @group String\r\n * @param value - The value to be checked for the seeach string\r\n * @param searchString - The substring to search for in the value\r\n * @param position - The starting position to search from\r\n * @example\r\n * ```ts\r\n * strLastIndexOf('canal', 'a');     // returns 3\r\n * strLastIndexOf('canal', 'a', 2);  // returns 1\r\n * strLastIndexOf('canal', 'a', 0);  // returns -1\r\n * strLastIndexOf('canal', 'x');     // returns -1\r\n * strLastIndexOf('canal', 'c', -5); // returns 0\r\n * strLastIndexOf('canal', 'c', 0);  // returns 0\r\n * strLastIndexOf('canal', '');      // returns 5\r\n * strLastIndexOf('canal', '', 2);   // returns 2\r\n * ```\r\n */\r\nexport const strLastIndexOf: (value: string, searchString: string, position?: number) => number = (/*#__PURE__*/_unwrapFunction(\"lastIndexOf\", StrProto));\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { NULL_VALUE } from \"../internal/constants\";\r\nimport { objDefineProp } from \"../object/define\";\r\n\r\nconst REF = \"ref\";\r\nconst UNREF = \"unref\";\r\nconst HAS_REF = \"hasRef\";\r\nconst ENABLED = \"enabled\";\r\n\r\n/**\r\n * A Timer handler which is returned from {@link scheduleTimeout} which contains functions to\r\n * cancel or restart (refresh) the timeout function.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n */\r\nexport interface ITimerHandler {\r\n    /**\r\n     * Cancels a timeout that was previously scheduled, after calling this function any previously\r\n     * scheduled timer will not execute.\r\n     * @example\r\n     * ```ts\r\n     * let theTimer = scheduleTimeout(...);\r\n     * theTimer.cancel();\r\n     * ```\r\n     */\r\n    cancel(): void;\r\n\r\n    /**\r\n     * Reschedules the timer to call its callback at the previously specified duration\r\n     * adjusted to the current time. This is useful for refreshing a timer without allocating\r\n     * a new JavaScript object.\r\n     *\r\n     * Using this on a timer that has already called its callback will reactivate the timer.\r\n     * Calling on a timer that has not yet executed will just reschedule the current timer.\r\n     * @example\r\n     * ```ts\r\n     * let theTimer = scheduleTimeout(...);\r\n     * // The timer will be restarted (if already executed) or rescheduled (if it has not yet executed)\r\n     * theTimer.refresh();\r\n     * ```\r\n     */\r\n    refresh(): ITimerHandler;\r\n\r\n    /**\r\n     * When called, requests that the event loop not exit so long when the ITimerHandler is active.\r\n     * Calling timer.ref() multiple times will have no effect. By default, all ITimerHandler objects\r\n     * will create \"ref'ed\" instances, making it normally unnecessary to call timer.ref() unless\r\n     * timer.unref() had been called previously.\r\n     * @since 0.7.0\r\n     * @returns the ITimerHandler instance\r\n     * @example\r\n     * ```ts\r\n     * let theTimer = createTimeout(...);\r\n     *\r\n     * // Make sure the timer is referenced (the default) so that the runtime (Node) does not terminate\r\n     * // if there is a waiting referenced timer.\r\n     * theTimer.ref();\r\n     * ```\r\n     */\r\n    ref(): this;\r\n\r\n    /**\r\n     * When called, the any active ITimerHandler instance will not require the event loop to remain\r\n     * active (Node.js). If there is no other activity keeping the event loop running, the process may\r\n     * exit before the ITimerHandler instance callback is invoked. Calling timer.unref() multiple times\r\n     * will have no effect.\r\n     * @since 0.7.0\r\n     * @returns the ITimerHandler instance\r\n     * @example\r\n     * ```ts\r\n     * let theTimer = createTimeout(...);\r\n     *\r\n     * // Unreference the timer so that the runtime (Node) may terminate if nothing else is running.\r\n     * theTimer.unref();\r\n     * ```\r\n     */\r\n    unref(): this;\r\n\r\n    /**\r\n     * If true, any running referenced `ITimerHandler` instance will keep the Node.js event loop active.\r\n     * @since 0.7.0\r\n     * @example\r\n     * ```ts\r\n     * let theTimer = createTimeout(...);\r\n     *\r\n     * // Unreference the timer so that the runtime (Node) may terminate if nothing else is running.\r\n     * theTimer.unref();\r\n     * let hasRef = theTimer.hasRef(); // false\r\n     *\r\n     * theTimer.ref();\r\n     * hasRef = theTimer.hasRef(); // true\r\n     * ```\r\n     */\r\n    hasRef(): boolean;\r\n\r\n    /**\r\n     * Gets or Sets a flag indicating if the underlying timer is currently enabled and running.\r\n     * Setting the enabled flag to the same as it's current value has no effect, setting to `true`\r\n     * when already `true` will not {@link ITimerHandler.refresh | refresh}() the timer.\r\n     * And setting to `false` will {@link ITimerHandler.cancel | cancel}() the timer.\r\n     * @since 0.8.1\r\n     * @example\r\n     * ```ts\r\n     * let theTimer = createTimeout(...);\r\n     *\r\n     * // Check if enabled\r\n     * theTimer.enabled; // false\r\n     *\r\n     * // Start the timer\r\n     * theTimer.enabled = true;     // Same as calling refresh()\r\n     * theTimer.enabled; //true\r\n     *\r\n     * // Has no effect as it's already running\r\n     * theTimer.enabled = true;\r\n     *\r\n     * // Will refresh / restart the time\r\n     * theTimer.refresh()\r\n     *\r\n     * let theTimer = scheduleTimeout(...);\r\n     *\r\n     * // Check if enabled\r\n     * theTimer.enabled; // true\r\n     * ```\r\n     */\r\n    enabled: boolean;\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @internal\r\n */\r\nexport interface _TimerHandler {\r\n    /**\r\n     * The public handler to return to the caller\r\n     */\r\n    h: ITimerHandler,\r\n\r\n    /**\r\n     * The callback function that should be called when the timer operation\r\n     * has completed and will not automatically rescheduled\r\n     * @returns\r\n     */\r\n    dn: () => void\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @internal\r\n * Internal function to create and manage an ITimerHandler implementation, the object returned from this function\r\n * it directly used / returned by the pulic functions used to create timers (idle, interval and timeout)\r\n * @param startTimer - Should the timer be started as part of creating the handler\r\n * @param refreshFn - The function used to create/start or refresh the timer\r\n * @param cancelFn - The function used to cancel the timer.\r\n * @returns The new ITimerHandler instance\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _createTimerHandler<T>(startTimer: boolean, refreshFn: (timerId: T) => T, cancelFn: (timerId: T) => void): _TimerHandler {\r\n    let ref = true;\r\n    let timerId: T = startTimer ? refreshFn(NULL_VALUE) : NULL_VALUE;\r\n    let theTimerHandler: ITimerHandler;\r\n\r\n    function _unref() {\r\n        ref = false;\r\n        timerId && (timerId as any)[UNREF] && (timerId as any)[UNREF]();\r\n        return theTimerHandler;\r\n    }\r\n\r\n    function _cancel() {\r\n        timerId && cancelFn(timerId);\r\n        timerId = NULL_VALUE;\r\n    }\r\n\r\n    function _refresh() {\r\n        timerId = refreshFn(timerId);\r\n        if (!ref) {\r\n            _unref();\r\n        }\r\n\r\n        return theTimerHandler;\r\n    }\r\n\r\n    function _setEnabled(value: boolean) {\r\n        !value && timerId && _cancel();\r\n        value && !timerId && _refresh();\r\n    }\r\n\r\n    theTimerHandler = {\r\n        cancel: _cancel,\r\n        refresh: _refresh\r\n    } as any;\r\n\r\n    theTimerHandler[HAS_REF] = () => {\r\n        if (timerId && (timerId as any)[HAS_REF]) {\r\n            return (timerId as any)[HAS_REF]();\r\n        }\r\n\r\n        return ref;\r\n    };\r\n\r\n    theTimerHandler[REF] = () => {\r\n        ref = true;\r\n        timerId && (timerId as any)[REF] && (timerId as any)[REF]();\r\n        return theTimerHandler;\r\n    };\r\n\r\n    theTimerHandler[UNREF] = _unref;\r\n\r\n    theTimerHandler = objDefineProp(theTimerHandler, ENABLED, {\r\n        get: () => !!timerId,\r\n        set: _setEnabled\r\n    });\r\n\r\n    return {\r\n        h: theTimerHandler,\r\n        dn: () => {\r\n            timerId = NULL_VALUE;\r\n        }\r\n    };\r\n}\r\n","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { fnApply } from \"../funcs/funcs\";\r\nimport { isArray, isFunction } from \"../helpers/base\";\r\nimport { ArrSlice, CALL, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { _getGlobalConfig } from \"../internal/global\";\r\nimport { ITimerHandler, _createTimerHandler } from \"./handler\";\r\n\r\n// Package instance timeout override functions\r\nlet _setTimeoutFn: TimeoutOverrideFn | undefined;\r\nlet _clearTimeoutFn: ClearTimeoutOverrideFn | undefined;\r\n\r\nfunction _resolveTimeoutFn(timeoutFn: TimeoutOverrideFn): TimeoutOverrideFn {\r\n    let result = isFunction(timeoutFn) ? timeoutFn : _setTimeoutFn;\r\n    if (!result) {\r\n        // Get global timeout overrides if available\r\n        let globalOverrides = _getGlobalConfig().tmOut || [];\r\n        if (isArray(globalOverrides) && globalOverrides.length > 0 && isFunction(globalOverrides[0])) {\r\n            result = (globalOverrides as TimeoutOverrideFuncs)[0];\r\n        }\r\n    }\r\n\r\n    return result || setTimeout;\r\n}\r\n\r\nfunction _resolveClearTimeoutFn(timeoutFn: ClearTimeoutOverrideFn): ClearTimeoutOverrideFn {\r\n    let result = isFunction(timeoutFn) ? timeoutFn : _clearTimeoutFn;\r\n    if (!result) {\r\n        // Get global timeout overrides if available\r\n        let globalOverrides = _getGlobalConfig().tmOut || [];\r\n        if (isArray(globalOverrides) && globalOverrides.length > 1 && isFunction(globalOverrides[1])) {\r\n            result = (globalOverrides as TimeoutOverrideFuncs)[1];\r\n        }\r\n    }\r\n\r\n    return result || clearTimeout;\r\n}\r\n\r\nfunction _createTimeoutWith(startTimer: boolean, overrideFn: TimeoutOverrideFn | TimeoutOverrideFuncs, theArgs: any[]): ITimerHandler {\r\n    let isArr = isArray(overrideFn);\r\n    let len = isArr ? overrideFn.length : 0;\r\n    \r\n    // Use package instance override functions if provided and no specific override was given\r\n    // If no package overrides, try global overrides before falling back to native functions\r\n    let setFn = _resolveTimeoutFn(len > 0 ? (overrideFn as TimeoutOverrideFuncs)[0] : (!isArr ? overrideFn as TimeoutOverrideFn: UNDEF_VALUE));\r\n    let clearFn = _resolveClearTimeoutFn(len > 1 ? (overrideFn as TimeoutOverrideFuncs)[1] : UNDEF_VALUE);\r\n\r\n    let timerFn = theArgs[0];\r\n    theArgs[0] = function () {\r\n        handler.dn();\r\n        fnApply(timerFn, UNDEF_VALUE, ArrSlice[CALL](arguments));\r\n    };\r\n    \r\n    let handler = _createTimerHandler(startTimer, (timerId?: any) => {\r\n        if (timerId) {\r\n            if (timerId.refresh) {\r\n                timerId.refresh();\r\n                return timerId;\r\n            }\r\n\r\n            fnApply(clearFn, UNDEF_VALUE, [ timerId ]);\r\n        }\r\n\r\n        return fnApply(setFn, UNDEF_VALUE, theArgs);\r\n    }, function (timerId: any) {\r\n        fnApply(clearFn, UNDEF_VALUE, [ timerId ]);\r\n    });\r\n\r\n    return handler.h;\r\n}\r\n\r\n/**\r\n * Sets the setTimeout and clearTimeout override functions for this package/closure instance to be used by all timeout operations\r\n * when no specific override functions are provided. If called with no parameters or undefined,\r\n * it will reset both overrides to undefined, reverting to native implementations.\r\n *\r\n * @since 0.12.3\r\n * @group Timer\r\n *\r\n * @param overrideFn - setTimeout override function this will be called instead of the `setTimeout`, if the value\r\n * of `overrideFn` is null or undefined it will reset both setTimeout and clearTimeout to their native implementations.\r\n * May also be an array with both the setTimeout and clearTimeout override functions, if either is not provided the\r\n * default native functions will be used\r\n * @remarks\r\n * These override functions apply only to this package instance and do not affect the global setTimeout/clearTimeout functions\r\n * used elsewhere in your application.\r\n * @example\r\n * ```ts\r\n * // Override with a single function for setTimeout\r\n * // The native clearTimeout will still be used\r\n * function customSetTimeout<TArgs extends any[]>(callback: (...args: TArgs) => void, ms?: number, ...args: TArgs) {\r\n *     console.log(`Setting timeout for ${ms}ms`);\r\n *     return setTimeout(callback, ms);\r\n * }\r\n *\r\n * // Set the timeout override function\r\n * setTimeoutOverrides(customSetTimeout);\r\n *\r\n * // Now all timeout operations will use the custom setTimeout\r\n * let timer = scheduleTimeout(() => {\r\n *     console.log(\"Timer triggered\");\r\n * }, 100);\r\n *\r\n * // Reset to native implementations\r\n * setTimeoutOverrides(undefined);\r\n * ```\r\n * @example\r\n * ```ts\r\n * // Override both setTimeout and clearTimeout with custom implementations\r\n * function customSetTimeout<TArgs extends any[]>(callback: (...args: TArgs) => void, ms?: number, ...args: TArgs) {\r\n *     console.log(`Setting timeout for ${ms}ms`);\r\n *     return setTimeout(callback, ms);\r\n * }\r\n *\r\n * function customClearTimeout(timeoutId: number) {\r\n *     console.log(`Clearing timeout ${timeoutId}`);\r\n *     return clearTimeout(timeoutId);\r\n * }\r\n *\r\n * // Set both override functions\r\n * setTimeoutOverrides([customSetTimeout, customClearTimeout]);\r\n *\r\n * // Now all timeout operations will use the custom implementations\r\n * let timer = scheduleTimeout(() => {\r\n *     console.log(\"Timer triggered\");\r\n * }, 100);\r\n *\r\n * // This will use the custom clearTimeout\r\n * timer.cancel();\r\n *\r\n * // Reset to native implementations\r\n * setTimeoutOverrides();\r\n * ```\r\n */\r\nexport function setTimeoutOverrides(overrideFn?: TimeoutOverrideFn | TimeoutOverrideFuncs): void {\r\n    let isArr = isArray(overrideFn);\r\n    let len = isArr ? overrideFn.length : 0;\r\n    \r\n    _setTimeoutFn = (len > 0 ? (overrideFn as TimeoutOverrideFuncs)[0] : (!isArr ? overrideFn as TimeoutOverrideFn: UNDEF_VALUE));\r\n    _clearTimeoutFn = (len > 1 ? (overrideFn as TimeoutOverrideFuncs)[1] : UNDEF_VALUE);\r\n}\r\n\r\n/**\r\n * Sets global timeout override functions that will be used as fallback by all timeout operations\r\n * when no specific or default package override functions are provided. If called with no parameters or\r\n * undefined, it will reset the global overrides to undefined.\r\n *\r\n * @since 0.12.3\r\n * @group Timer\r\n *\r\n * @param overrideFn - setTimeout override function this will be called instead of the `setTimeout`, if the value\r\n * of `overrideFn` is null or undefined it will reset the global overrides to undefined.\r\n * May also be an array with both the setTimeout and clearTimeout override functions, if either is not provided the\r\n * default native functions will be used\r\n * @remarks\r\n * The global timeout overrides serve as a fallback when no specific or package level overrides are provided.\r\n * The priority order for timeout functions is:\r\n * 1. Specific override provided to the individual function call for {@link scheduleTimeoutWith} or {@link createTimeoutWith}\r\n * 2. Package instance overrides set via {@link setTimeoutOverrides}\r\n * 3. Global overrides set via this function\r\n * 4. Native setTimeout/clearTimeout functions\r\n * @example\r\n * ```ts\r\n * // Override with global custom setTimeout and clearTimeout implementations\r\n * function customSetTimeout<TArgs extends any[]>(callback: (...args: TArgs) => void, ms?: number, ...args: TArgs) {\r\n *     console.log(`Global: Setting timeout for ${ms}ms`);\r\n *     return setTimeout(callback, ms);\r\n * }\r\n *\r\n * function customClearTimeout(timeoutId: number) {\r\n *     console.log(`Global: Clearing timeout ${timeoutId}`);\r\n *     return clearTimeout(timeoutId);\r\n * }\r\n *\r\n * // Set global override functions\r\n * setGlobalTimeoutOverrides([customSetTimeout, customClearTimeout]);\r\n *\r\n * // Now all timeout operations will use these global implementations when no other overrides are provided\r\n * let timer = scheduleTimeout(() => {\r\n *     console.log(\"Timer triggered\");\r\n * }, 100);\r\n *\r\n * // Reset global overrides\r\n * setGlobalTimeoutOverrides();\r\n * ```\r\n */\r\nexport function setGlobalTimeoutOverrides(overrideFn?: TimeoutOverrideFn | TimeoutOverrideFuncs): void {\r\n    let isArr = isArray(overrideFn);\r\n    let len = isArr ? overrideFn.length : 0;\r\n    \r\n    let globalCfg = _getGlobalConfig();\r\n    \r\n    if (!overrideFn) {\r\n        // If no override provided, reset the global overrides\r\n        globalCfg.tmOut = undefined;\r\n    } else {\r\n        // Set the global timeout overrides\r\n        globalCfg.tmOut = [\r\n            (len > 0 ? (overrideFn as TimeoutOverrideFuncs)[0] : (!isArr ? overrideFn as TimeoutOverrideFn : null)),\r\n            (len > 1 ? (overrideFn as TimeoutOverrideFuncs)[1] : null)\r\n        ] as TimeoutOverrideFuncs;\r\n    }\r\n}\r\n\r\n/**\r\n * The signature of the override timeout function used to create a new timeout instance, it follows the same signature as\r\n * the native `setTimeout` API.\r\n * @since 0.4.4\r\n * @group Timer\r\n * @param callback - A function to be executed after the timer expires.\r\n * @param ms - The time, in milliseconds that the timer should wait before the specified function or code is executed.\r\n * If this parameter is omitted, a value of 0 is used, meaning execute \"immediately\", or more accurately, the next event cycle.\r\n * @param args - Additional arguments which are passed through to the function specified by callback.\r\n * @return The returned timeoutID is a positive integer value which identifies the timer created by the call to setTimeout().\r\n * This value can be passed to clearTimeout() to cancel the timeout.\r\n */\r\nexport type TimeoutOverrideFn = <TArgs extends any[]>(callback: (...args: TArgs) => void, ms?: number, ...args: TArgs) => number | any;\r\n\r\n/**\r\n * The signatire of the function to override clearing a previous timeout created with the {@link TimeoutOverrideFn}, it will be passed\r\n * the result returned from the {@link TimeoutOverrideFn} call.\r\n * @since 0.4.5\r\n * @group Timer\r\n * @param timeoutId - The value returned from the previous {@link TimeoutOverrideFn}.\r\n */\r\nexport type ClearTimeoutOverrideFn = (timeoutId: number | any) => void;\r\n\r\n/**\r\n * Defines the array signature used to pass the override set and clean functions for creating a timeout.\r\n * The first index [0] is the set function to be used and the second index [1] is the clear function to be used.\r\n * @since 0.4.5\r\n * @group Timer\r\n */\r\nexport type TimeoutOverrideFuncs = [ TimeoutOverrideFn | null, ClearTimeoutOverrideFn | null ];\r\n\r\n/**\r\n * Creates and starts a timer which executes a function or specified piece of code once the timer expires, this is simular\r\n * to using `setTimeout` but provides a return object for cancelling and restarting (refresh) the timer.\r\n *\r\n * The timer may be cancelled (cleared) by calling the `cancel()` function on the returned {@link ITimerHandler}, or\r\n * you can \"reschedule\" and/or \"restart\" the timer by calling the `refresh()` function on the returned {@link ITimerHandler}\r\n * instance\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @param callback - The function to be executed after the timer expires.\r\n * @param timeout - The time, in milliseconds that the timer should wait before the specified\r\n * function or code is executed. If this parameter is omitted, a value of 0 is used, meaning\r\n * execute \"immediately\", or more accurately, the next event cycle.\r\n * @param args - Additional arguments which are passed through to the function specified by `callback`.\r\n * @returns A {@link ITimerHandler} instance which can be used to cancel the timeout.\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * let theTimeout = scheduleTimeout(() => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // Instead of calling clearTimeout() with the returned value from setTimeout() the returned\r\n * // handler instance can be used instead to cancel the timer\r\n * theTimeout.cancel();\r\n * theTimeout.enabled;    // false\r\n *\r\n * // You can start the timer via enabled\r\n * theTimeout.enabled = true;\r\n *\r\n * // You can also \"restart\" the timer, whether it has previously triggered not not via the `refresh()`\r\n * theTimeout.refresh();\r\n * ```\r\n */\r\nexport function scheduleTimeout<A extends any[]>(callback: (...args: A) => void, timeout: number, ...args: A): ITimerHandler;\r\n\r\n/**\r\n * Creates and starts a timer which executes a function or specified piece of code once the timer expires, this is simular\r\n * to using `setTimeout` but provides a return object for cancelling and restarting (refresh) the timer.\r\n *\r\n * The timer may be cancelled (cleared) by calling the `cancel()` function on the returned {@link ITimerHandler}, or\r\n * you can \"reschedule\" and/or \"restart\" the timer by calling the `refresh()` function on the returned {@link ITimerHandler}\r\n * instance\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @param callback - The function to be executed after the timer expires.\r\n * @param timeout - The time, in milliseconds that the timer should wait before the specified\r\n * function or code is executed. If this parameter is omitted, a value of 0 is used, meaning\r\n * execute \"immediately\", or more accurately, the next event cycle.\r\n * @param args - Additional arguments which are passed through to the function specified by `callback`.\r\n * @returns A {@link ITimerHandler} instance which can be used to cancel the timeout.\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * let theTimeout = scheduleTimeout(() => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // Instead of calling clearTimeout() with the returned value from setTimeout() the returned\r\n * // handler instance can be used instead to cancel the timer\r\n * theTimeout.cancel();\r\n * theTimeout.enabled;    // false\r\n *\r\n * // You can start the timer via enabled\r\n * theTimeout.enabled = true;\r\n *\r\n * // You can also \"restart\" the timer, whether it has previously triggered not not via the `refresh()`\r\n * theTimeout.refresh();\r\n * ```\r\n */\r\nexport function scheduleTimeout<A extends any[]>(callback: (...args: A) => void, timeout: number): ITimerHandler {\r\n    return _createTimeoutWith(true, UNDEF_VALUE, ArrSlice[CALL](arguments));\r\n}\r\n\r\n/**\r\n * Creates and starts a timer which executes a function or specified piece of code once the timer expires. The overrideFn will be\r\n * used to create the timer, this is simular to using `setTimeout` but provides a return object for cancelling and restarting\r\n * (refresh) the timer.\r\n *\r\n * The timer may be cancelled (cleared) by calling the `cancel()` function on the returned {@link ITimerHandler}, or\r\n * you can \"reschedule\" and/or \"restart\" the timer by calling the `refresh()` function on the returned {@link ITimerHandler}\r\n * instance\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @param overrideFn - setTimeout override function this will be called instead of the `setTimeout`, if the value\r\n * of `overrideFn` is null or undefined it will revert back to the native `setTimeout`. May also be an array with contains\r\n * both the setTimeout and clearTimeout override functions, if either is not provided the default native functions will be used\r\n * @param callback - The function to be executed after the timer expires.\r\n * @param timeout - The time, in milliseconds that the timer should wait before the specified\r\n * function or code is executed. If this parameter is omitted, a value of 0 is used, meaning\r\n * execute \"immediately\", or more accurately, the next event cycle.\r\n * @param args - Additional arguments which are passed through to the function specified by `callback`.\r\n * @returns A {@link ITimerHandler} instance which can be used to cancel the timeout.\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * // Your own \"setTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newSetTimeoutFn(callback: TimeoutOverrideFn) {\r\n *     overrideCalled ++;\r\n *     return setTimeout(callback, timeout);\r\n * }\r\n *\r\n * let theTimeout = scheduleTimeoutWith(newSetTimeoutFn, () => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // Instead of calling clearTimeout() with the returned value from setTimeout() the returned\r\n * // handler instance can be used instead to cancel the timer\r\n * theTimeout.cancel();\r\n * theTimeout.enabled;    // false\r\n *\r\n * // You can start the timer via enabled\r\n * theTimeout.enabled = true;\r\n *\r\n * // You can also \"restart\" the timer, whether it has previously triggered not not via the `refresh()`\r\n * theTimeout.refresh();\r\n * ```\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * // Your own \"setTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newSetTimeoutFn(callback: TimeoutOverrideFn) {\r\n *     overrideCalled ++;\r\n *     return setTimeout(callback, timeout);\r\n * }\r\n *\r\n * // Your own \"clearTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newClearTimeoutFn(timeoutId: number) {\r\n *     overrideCalled ++;\r\n *     return clearTimeout( timeout);\r\n * }\r\n *\r\n * let theTimeout = scheduleTimeoutWith([newSetTimeoutFn, newClearTimeoutFn], () => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // Instead of calling clearTimeout() with the returned value from setTimeout() the returned\r\n * // handler instance can be used instead to cancel the timer, internally this will call the newClearTimeoutFn\r\n * theTimeout.cancel();\r\n * theTimeout.enabled;    // false\r\n *\r\n * // You can start the timer via enabled\r\n * theTimeout.enabled = true;\r\n *\r\n * // You can also \"restart\" the timer, whether it has previously triggered not not via the `refresh()`\r\n * theTimeout.refresh();\r\n * ```\r\n */\r\nexport function scheduleTimeoutWith<A extends any[]>(overrideFn: TimeoutOverrideFn | TimeoutOverrideFuncs, callback: (...args: A) => void, timeout: number, ...args: A): ITimerHandler;\r\n\r\n/**\r\n * Creates and starts a timer which executes a function or specified piece of code once the timer expires. The overrideFn will be\r\n * used to create the timer, this is simular to using `setTimeout` but provides a return object for cancelling and restarting\r\n * (refresh) the timer.\r\n *\r\n * The timer may be cancelled (cleared) by calling the `cancel()` function on the returned {@link ITimerHandler}, or\r\n * you can \"reschedule\" and/or \"restart\" the timer by calling the `refresh()` function on the returned {@link ITimerHandler}\r\n * instance\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @param overrideFn - setTimeout override function this will be called instead of the `setTimeout`, if the value\r\n * of `overrideFn` is null or undefined it will revert back to the native `setTimeout`. May also be an array with contains\r\n * both the setTimeout and clearTimeout override functions, if either is not provided the default native functions will be used\r\n * @param callback - The function to be executed after the timer expires.\r\n * @param timeout - The time, in milliseconds that the timer should wait before the specified\r\n * function or code is executed. If this parameter is omitted, a value of 0 is used, meaning\r\n * execute \"immediately\", or more accurately, the next event cycle.\r\n * @param args - Additional arguments which are passed through to the function specified by `callback`.\r\n * @returns A {@link ITimerHandler} instance which can be used to cancel the timeout.\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * // Your own \"setTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newSetTimeoutFn(callback: TimeoutOverrideFn) {\r\n *     overrideCalled ++;\r\n *     return setTimeout(callback, timeout);\r\n * }\r\n *\r\n * let theTimeout = scheduleTimeoutWith(newSetTimeoutFn, () => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // Instead of calling clearTimeout() with the returned value from setTimeout() the returned\r\n * // handler instance can be used instead to cancel the timer\r\n * theTimeout.cancel();\r\n * theTimeout.enabled;    // false\r\n *\r\n * // You can start the timer via enabled\r\n * theTimeout.enabled = true;\r\n *\r\n * // You can also \"restart\" the timer, whether it has previously triggered not not via the `refresh()`\r\n * theTimeout.refresh();\r\n * ```\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * // Your own \"setTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newSetTimeoutFn(callback: TimeoutOverrideFn) {\r\n *     overrideCalled ++;\r\n *     return setTimeout(callback, timeout);\r\n * }\r\n *\r\n * // Your own \"clearTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newClearTimeoutFn(timeoutId: number) {\r\n *     overrideCalled ++;\r\n *     return clearTimeout( timeout);\r\n * }\r\n *\r\n * let theTimeout = scheduleTimeoutWith([newSetTimeoutFn, newClearTimeoutFn], () => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // Instead of calling clearTimeout() with the returned value from setTimeout() the returned\r\n * // handler instance can be used instead to cancel the timer, internally this will call the newClearTimeoutFn\r\n * theTimeout.cancel();\r\n * theTimeout.enabled;    // false\r\n *\r\n * // You can start the timer via enabled\r\n * theTimeout.enabled = true;\r\n *\r\n * // You can also \"restart\" the timer, whether it has previously triggered not not via the `refresh()`\r\n * theTimeout.refresh();\r\n  * ```\r\n */\r\nexport function scheduleTimeoutWith<A extends any[]>(overrideFn: TimeoutOverrideFn | TimeoutOverrideFuncs, callback: (...args: A) => void, timeout: number): ITimerHandler {\r\n    return _createTimeoutWith(true, overrideFn, ArrSlice[CALL](arguments, 1));\r\n}\r\n\r\n/**\r\n * Creates a non-running (paused) timer which will execute a function or specified piece of code when enabled and the timer expires,\r\n * this is simular to using `scheduleTimeout` but the timer is not enabled (running) and you MUST call `refresh` to start the timer.\r\n *\r\n * The timer may be cancelled (cleared) by calling the `cancel()` function on the returned {@link ITimerHandler}, or\r\n * you can \"reschedule\" and/or \"restart\" the timer by calling the `refresh()` function on the returned {@link ITimerHandler}\r\n * instance\r\n *\r\n * @since 0.7.0\r\n * @group Timer\r\n *\r\n * @param callback - The function to be executed after the timer expires.\r\n * @param timeout - The time, in milliseconds that the timer should wait before the specified\r\n * function or code is executed. If this parameter is omitted, a value of 0 is used, meaning\r\n * execute \"immediately\", or more accurately, the next event cycle.\r\n * @param args - Additional arguments which are passed through to the function specified by `callback`.\r\n * @returns A {@link ITimerHandler} instance which can be used to cancel the timeout.\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * let theTimeout = createTimeout(() => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // As the timer is not started you will need to call \"refresh\" to start the timer\r\n * theTimeout.refresh();\r\n *\r\n * // or set enabled to true\r\n * theTimeout.enabled = true;\r\n* ```\r\n */\r\nexport function createTimeout<A extends any[]>(callback: (...args: A) => void, timeout: number, ...args: A): ITimerHandler;\r\n\r\n/**\r\n * Creates a non-running (paused) timer which will execute a function or specified piece of code when enabled and the timer expires,\r\n * this is simular to using `scheduleTimeout` but the timer is not enabled (running) and you MUST call `refresh` to start the timer.\r\n *\r\n * The timer may be cancelled (cleared) by calling the `cancel()` function on the returned {@link ITimerHandler}, or\r\n * you can \"reschedule\" and/or \"restart\" the timer by calling the `refresh()` function on the returned {@link ITimerHandler}\r\n * instance\r\n *\r\n * @since 0.7.0\r\n * @group Timer\r\n *\r\n * @param callback - The function to be executed after the timer expires.\r\n * @param timeout - The time, in milliseconds that the timer should wait before the specified\r\n * function or code is executed. If this parameter is omitted, a value of 0 is used, meaning\r\n * execute \"immediately\", or more accurately, the next event cycle.\r\n * @param args - Additional arguments which are passed through to the function specified by `callback`.\r\n * @returns A {@link ITimerHandler} instance which can be used to cancel the timeout.\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * let theTimeout = createTimeout(() => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // As the timer is not started you will need to call \"refresh\" to start the timer\r\n * theTimeout.refresh();\r\n *\r\n * // or set enabled to true\r\n * theTimeout.enabled = true;\r\n * ```\r\n */\r\nexport function createTimeout<A extends any[]>(callback: (...args: A) => void, timeout: number): ITimerHandler {\r\n    return _createTimeoutWith(false, UNDEF_VALUE, ArrSlice[CALL](arguments));\r\n}\r\n\r\n/**\r\n * Creates a non-running (paused) timer which will execute a function or specified piece of code when enabled once the timer expires.\r\n * The overrideFn will be used to create the timer, this is simular to using `scheduleTimeoutWith` but the timer is not enabled (running)\r\n * and you MUST call `refresh` to start the timer.\r\n *\r\n * The timer may be cancelled (cleared) by calling the `cancel()` function on the returned {@link ITimerHandler}, or\r\n * you can \"reschedule\" and/or \"restart\" the timer by calling the `refresh()` function on the returned {@link ITimerHandler}\r\n * instance\r\n *\r\n * @since 0.7.0\r\n * @group Timer\r\n *\r\n * @param overrideFn - setTimeout override function this will be called instead of the `setTimeout`, if the value\r\n * of `overrideFn` is null or undefined it will revert back to the native `setTimeout`. May also be an array with contains\r\n * both the setTimeout and clearTimeout override functions, if either is not provided the default native functions will be used\r\n * @param callback - The function to be executed after the timer expires.\r\n * @param timeout - The time, in milliseconds that the timer should wait before the specified\r\n * function or code is executed. If this parameter is omitted, a value of 0 is used, meaning\r\n * execute \"immediately\", or more accurately, the next event cycle.\r\n * @param args - Additional arguments which are passed through to the function specified by `callback`.\r\n * @returns A {@link ITimerHandler} instance which can be used to cancel the timeout.\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * // Your own \"setTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newSetTimeoutFn(callback: TimeoutOverrideFn) {\r\n *     overrideCalled ++;\r\n *     return setTimeout(callback, timeout);\r\n * }\r\n *\r\n * let theTimeout = createTimeoutWith(newSetTimeoutFn, () => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // As the timer is not started you will need to call \"refresh\" to start the timer\r\n * theTimeout.refresh();\r\n *\r\n * // or set enabled to true\r\n * theTimeout.enabled = true;\r\n * ```\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * // Your own \"setTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newSetTimeoutFn(callback: TimeoutOverrideFn) {\r\n *     overrideCalled ++;\r\n *     return setTimeout(callback, timeout);\r\n * }\r\n *\r\n * // Your own \"clearTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newClearTimeoutFn(timeoutId: number) {\r\n *     overrideCalled ++;\r\n *     return clearTimeout( timeout);\r\n * }\r\n *\r\n * let theTimeout = createTimeoutWith([newSetTimeoutFn, newClearTimeoutFn], () => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // As the timer is not started you will need to call \"refresh\" to start the timer\r\n * theTimeout.refresh();\r\n *\r\n * // or set enabled to true\r\n * theTimeout.enabled = true;\r\n * ```\r\n */\r\nexport function createTimeoutWith<A extends any[]>(overrideFn: TimeoutOverrideFn | TimeoutOverrideFuncs, callback: (...args: A) => void, timeout: number, ...args: A): ITimerHandler;\r\n\r\n/**\r\n * Creates a non-running (paused) timer which will execute a function or specified piece of code when enabled once the timer expires.\r\n * The overrideFn will be used to create the timer, this is simular to using `scheduleTimeoutWith` but the timer is not enabled (running)\r\n * and you MUST call `refresh` to start the timer.\r\n *\r\n * The timer may be cancelled (cleared) by calling the `cancel()` function on the returned {@link ITimerHandler}, or\r\n * you can \"reschedule\" and/or \"restart\" the timer by calling the `refresh()` function on the returned {@link ITimerHandler}\r\n * instance\r\n *\r\n * @since 0.7.0\r\n * @group Timer\r\n *\r\n * @param overrideFn - setTimeout override function this will be called instead of the `setTimeout`, if the value\r\n * of `overrideFn` is null or undefined it will revert back to the native `setTimeout`. May also be an array with contains\r\n * both the setTimeout and clearTimeout override functions, if either is not provided the default native functions will be used\r\n * @param callback - The function to be executed after the timer expires.\r\n * @param timeout - The time, in milliseconds that the timer should wait before the specified\r\n * function or code is executed. If this parameter is omitted, a value of 0 is used, meaning\r\n * execute \"immediately\", or more accurately, the next event cycle.\r\n * @param args - Additional arguments which are passed through to the function specified by `callback`.\r\n * @returns A {@link ITimerHandler} instance which can be used to cancel the timeout.\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * // Your own \"setTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newSetTimeoutFn(callback: TimeoutOverrideFn) {\r\n *     overrideCalled ++;\r\n *     return setTimeout(callback, timeout);\r\n * }\r\n *\r\n * let theTimeout = createTimeoutWith(newSetTimeoutFn, () => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // As the timer is not started you will need to call \"refresh\" to start the timer\r\n * theTimeout.refresh();\r\n *\r\n * // or set enabled to true\r\n * theTimeout.enabled = true;\r\n * ```\r\n * @example\r\n * ```ts\r\n * let timeoutCalled = false;\r\n * // Your own \"setTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newSetTimeoutFn(callback: TimeoutOverrideFn) {\r\n *     overrideCalled ++;\r\n *     return setTimeout(callback, timeout);\r\n * }\r\n *\r\n * // Your own \"clearTimeout\" implementation to allow you to perform additional operations or possible wrap\r\n * // the callback to add timings.\r\n * function newClearTimeoutFn(timeoutId: number) {\r\n *     overrideCalled ++;\r\n *     return clearTimeout( timeout);\r\n * }\r\n *\r\n * let theTimeout = createTimeoutWith([newSetTimeoutFn, newClearTimeoutFn], () => {\r\n *     // This callback will be called after 100ms as this uses setTimeout()\r\n *     timeoutCalled = true;\r\n * }, 100);\r\n *\r\n * // As the timer is not started you will need to call \"refresh\" to start the timer\r\n * theTimeout.refresh();\r\n *\r\n * // or set enabled to true\r\n * theTimeout.enabled = true;\r\n * ```\r\n */\r\nexport function createTimeoutWith<A extends any[]>(overrideFn: TimeoutOverrideFn | TimeoutOverrideFuncs, callback: (...args: A) => void, timeout: number): ITimerHandler {\r\n    return _createTimeoutWith(false, overrideFn, ArrSlice[CALL](arguments, 1));\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { getGlobal, objAssign, objCreate, objDefineProp, objHasOwnProperty, throwTypeError } from \"@nevware21/ts-utils\";\r\nimport {\r\n    ObjClass, ObjProto,\r\n    strDefault, strShimFunction, strShimPrototype\r\n} from \"./Constants\";\r\n\r\n// Most of these functions have been directly shamelessly \"lifted\" from the https://github.com/@microsoft/tslib and\r\n// modified to be ES5 compatible and applying several minification and tree-shaking techniques so that Application Insights\r\n// can successfully use TypeScript \"importHelpers\" which imports tslib during compilation but it will use these at runtime\r\n// Which is also why all of the functions have not been included as Application Insights currently doesn't use or require\r\n// them.\r\n\r\nexport const SymbolObj = (getGlobal()||{})[\"Symbol\"];\r\nexport const ReflectObj = (getGlobal()||{})[\"Reflect\"];\r\nexport const __hasReflect = !!ReflectObj;\r\n\r\nconst strDecorate = \"decorate\";\r\nconst strMetadata = \"metadata\";\r\nconst strGetOwnPropertySymbols = \"getOwnPropertySymbols\";\r\nconst strIterator = \"iterator\";\r\nconst strHasOwnProperty = \"hasOwnProperty\";\r\n\r\nexport declare type ObjAssignFunc = (t: any, ...sources:any[]) => any;\r\n\r\nexport var __objAssignFnImpl: ObjAssignFunc = function(t: any): any {\r\n    // tslint:disable-next-line: ban-comma-operator\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) {\r\n            if (ObjProto[strHasOwnProperty].call(s, p)) {\r\n                (t as any)[p] = s[p];\r\n            }\r\n        }\r\n    }\r\n    return t;\r\n};\r\n\r\nexport var __assignFn: ObjAssignFunc = objAssign || __objAssignFnImpl;\r\n\r\n// tslint:disable-next-line: only-arrow-functions\r\nvar extendStaticsFn = function(d: any, b: any): any {\r\n    extendStaticsFn = ObjClass[\"setPrototypeOf\"] ||\r\n        // tslint:disable-next-line: only-arrow-functions\r\n        ({ __proto__: [] } instanceof Array && function (d: any, b: any) {\r\n            d.__proto__ = b;\r\n        }) ||\r\n        // tslint:disable-next-line: only-arrow-functions\r\n        function (d: any, b: any) {\r\n            for (var p in b) {\r\n                if (b[strHasOwnProperty](p)) {\r\n                    d[p] = b[p];\r\n                }\r\n            }\r\n        };\r\n    return extendStaticsFn(d, b);\r\n};\r\n\r\nexport function __extendsFn(d: any, b: any) {\r\n    if (typeof b !== strShimFunction && b !== null) {\r\n        throwTypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    }\r\n    extendStaticsFn(d, b);\r\n    function __(this: any) {\r\n        this.constructor = d;\r\n    }\r\n    // tslint:disable-next-line: ban-comma-operator\r\n    d[strShimPrototype] = b === null ? objCreate(b) : (__[strShimPrototype] = b[strShimPrototype], new (__ as any)());\r\n}\r\n\r\nexport function __restFn(s: any, e: any) {\r\n    var t = {};\r\n    for (var k in s) {\r\n        if (objHasOwnProperty(s, k) && e.indexOf(k) < 0) {\r\n            t[k] = s[k];\r\n        }\r\n    }\r\n    if (s != null && typeof ObjClass[strGetOwnPropertySymbols] === strShimFunction) {\r\n        for (var i = 0, p = ObjClass[strGetOwnPropertySymbols](s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && ObjProto[\"propertyIsEnumerable\"].call(s, p[i])) {\r\n                t[p[i]] = s[p[i]];\r\n            }\r\n        }\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __decorateFn(decorators: any, target: any, key: any, desc: any) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = ObjClass[\"getOwnPropertyDescriptor\"](target, key) : desc, d;\r\n    if (__hasReflect && typeof ReflectObj[strDecorate] === strShimFunction) {\r\n        r = ReflectObj[strDecorate](decorators, target, key, desc);\r\n    } else {\r\n        for (var i = decorators.length - 1; i >= 0; i--) {\r\n            // eslint-disable-next-line no-cond-assign\r\n            if (d = decorators[i]) {\r\n                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n            }\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:ban-comma-operator\r\n    return c > 3 && r && objDefineProp(target, key, r), r;\r\n}\r\n\r\nexport function __paramFn(paramIndex: number, decorator: Function) {\r\n    return function (target: any, key: any) {\r\n        decorator(target, key, paramIndex);\r\n    }\r\n}\r\n\r\nexport function __metadataFn(metadataKey: any, metadataValue: any) {\r\n    if (__hasReflect && ReflectObj[strMetadata] === strShimFunction) {\r\n        return ReflectObj[strMetadata](metadataKey, metadataValue);\r\n    }\r\n}\r\n\r\nexport function __exportStarFn(m: any, o: any) {\r\n    for (var p in m) {\r\n        if (p !== strDefault && !objHasOwnProperty(o, p)) {\r\n            __createBindingFn(o, m, p);\r\n        }\r\n    }\r\n}\r\n\r\nexport function __createBindingFn(o: any, m: any, k: any, k2?: any) {\r\n    if (k2 === undefined) {\r\n        k2 = k;\r\n    }\r\n    \r\n    if (!!objDefineProp) {\r\n        objDefineProp(o, k2, {\r\n            enumerable: true,\r\n            get() {\r\n                return m[k];\r\n            }\r\n        });\r\n    } else {\r\n        o[k2] = m[k];\r\n    }\r\n}\r\n\r\nexport function __valuesFn(o: any) {\r\n    var s = typeof SymbolObj === strShimFunction && SymbolObj[strIterator], m = s && o[s], i = 0;\r\n    if (m) {\r\n        return m.call(o);\r\n    }\r\n\r\n    if (o && typeof o.length === \"number\") {\r\n        return {\r\n            next () {\r\n                if (o && i >= o.length) {\r\n                    o = void 0;\r\n                }\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    throwTypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __readFn(o: any, n: any) {\r\n    var m = typeof SymbolObj === strShimFunction && o[SymbolObj[strIterator]];\r\n    if (!m) {\r\n        return o;\r\n    }\r\n\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\r\n            ar.push(r.value);\r\n        }\r\n    } catch (error) {\r\n        e = {\r\n            error\r\n        };\r\n    } finally {\r\n        try {\r\n            // tslint:disable-next-line:no-conditional-assignment\r\n            if (r && !r.done && (m = i[\"return\"])) {\r\n                m.call(i);\r\n            }\r\n        } finally {\r\n            if (e) {\r\n                // eslint-disable-next-line no-unsafe-finally\r\n                throw e.error;\r\n            }\r\n        }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArraysFn() {\r\n    var theArgs = arguments;\r\n    // Calculate new total size\r\n    for (var s = 0, i = 0, il = theArgs.length; i < il; i++) {\r\n        s += theArgs[i].length;\r\n    }\r\n\r\n    // Create new full array\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++) {\r\n        for (var a = theArgs[i], j = 0, jl = a.length; j < jl; j++, k++) {\r\n            r[k] = a[j];\r\n        }\r\n    }\r\n\r\n    return r;\r\n}\r\n\r\nexport function __spreadArrayFn(to: any, from: any) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\r\n        to[j] = from[i];\r\n    }\r\n\r\n    return to;\r\n}\r\n\r\nexport function __makeTemplateObjectFn(cooked: any, raw: any) {\r\n    if (objDefineProp) {\r\n        objDefineProp(cooked, \"raw\", { value: raw });\r\n    } else {\r\n        cooked.raw = raw;\r\n    }\r\n\r\n    return cooked;\r\n}\r\n\r\nexport function __importStarFn(mod: any) {\r\n    if (mod && mod.__esModule) {\r\n        return mod;\r\n    }\r\n\r\n    var result = {};\r\n    if (mod != null) {\r\n        for (var k in mod) {\r\n            if (k !== strDefault && Object.prototype.hasOwnProperty.call(mod, k)) {\r\n                __createBindingFn(result, mod, k);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Set default module\r\n    if (!!objDefineProp) {\r\n        objDefineProp( result, strDefault, { enumerable: true, value: mod });\r\n    } else {\r\n        result[strDefault] = mod;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function __importDefaultFn(mod:any) {\r\n    return (mod && mod.__esModule) ? mod : { strDefault: mod };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { getGlobal, objCreate, objHasOwnProperty, throwTypeError } from \"@nevware21/ts-utils\";\r\n\r\ninterface DynamicGlobalSettings {\r\n    /**\r\n     * Stores the global options which will also be exposed on the runtime global\r\n     */\r\n    o: IDynamicProtoOpts,\r\n\r\n    /**\r\n     * Internal Global used to generate a unique dynamic class name, every new class will increase this value\r\n     * @ignore\r\n     */ \r\n    n: number\r\n};\r\n\r\nconst UNDEFINED = \"undefined\";\r\n\r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */ \r\nconst Constructor = 'constructor';\r\n\r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */ \r\nconst Prototype = 'prototype';\r\n \r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nconst strFunction = 'function';\r\n\r\n/**\r\n * Used to define the name of the instance function lookup table\r\n * @ignore\r\n */ \r\nconst DynInstFuncTable = '_dynInstFuncs';\r\n \r\n/**\r\n * Name used to tag the dynamic prototype function\r\n * @ignore\r\n */ \r\nconst DynProxyTag = '_isDynProxy';\r\n \r\n/**\r\n * Name added to a prototype to define the dynamic prototype \"class\" name used to lookup the function table\r\n * @ignore\r\n */ \r\nconst DynClassName = '_dynClass';\r\n \r\n/**\r\n * Prefix added to the classname to avoid any name clashes with other instance level properties\r\n * @ignore\r\n */ \r\nconst DynClassNamePrefix = '_dynCls$';\r\n \r\n/**\r\n * A tag which is used to check if we have already to attempted to set the instance function if one is not present\r\n * @ignore\r\n */\r\nconst DynInstChkTag = '_dynInstChk';\r\n \r\n/**\r\n * A tag which is used to check if we are allows to try and set an instance function is one is not present. Using the same \r\n * tag name as the function level but a different const name for readability only.\r\n */\r\nconst DynAllowInstChkTag = DynInstChkTag;\r\n \r\n/**\r\n * The global (imported) instances where the global performance options are stored\r\n */\r\nconst DynProtoDefaultOptions = '_dfOpts';\r\n \r\n/**\r\n * Value used as the name of a class when it cannot be determined\r\n * @ignore\r\n */ \r\nconst UnknownValue = '_unknown_';\r\n \r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nconst str__Proto = \"__proto__\";\r\n \r\n/**\r\n * The polyfill version of __proto__ so that it doesn't cause issues for anyone not expecting it to exist\r\n */\r\nconst DynProtoBaseProto = \"_dyn\" + str__Proto;\r\n\r\n/**\r\n * Runtime Global holder for dynamicProto settings\r\n */\r\nconst DynProtoGlobalSettings = \"__dynProto$Gbl\";\r\n\r\n/**\r\n * Track the current prototype for IE8 as you can't look back to get the prototype\r\n */\r\nconst DynProtoCurrent = \"_dynInstProto\";\r\n  \r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nconst strUseBaseInst = 'useBaseInst';\r\n \r\n/**\r\n * Constant string defined to support minimization\r\n * @ignore\r\n */\r\nconst strSetInstFuncs = 'setInstFuncs';\r\n \r\nconst Obj = Object;\r\n\r\n/**\r\n * Pre-lookup to check if we are running on a modern browser (i.e. not IE8)\r\n * @ignore\r\n */\r\nlet _objGetPrototypeOf = Obj[\"getPrototypeOf\"];\r\n\r\n/**\r\n * Pre-lookup to check for the existence of this function\r\n */\r\nlet _objGetOwnProps = Obj[\"getOwnPropertyNames\"];\r\n\r\n// Since 1.1.7 moving these to the runtime global to work around mixed version and module issues\r\n// See Issue https://github.com/microsoft/DynamicProto-JS/issues/57 for details\r\nlet _gbl = getGlobal();\r\nlet _gblInst: DynamicGlobalSettings = _gbl[DynProtoGlobalSettings] || (_gbl[DynProtoGlobalSettings] = {\r\n    o: {\r\n        [strSetInstFuncs]: true,\r\n        [strUseBaseInst]: true\r\n    },\r\n    n: 1000                // Start new global index @ 1000 so we \"fix\" some cases when mixed with 1.1.6 or earlier\r\n});\r\n\r\n/**\r\n * Helper used to check whether the target is an Object prototype or Array prototype\r\n * @ignore\r\n */ \r\nfunction _isObjectOrArrayPrototype(target:any) {\r\n    return target && (target === Obj[Prototype] || target === Array[Prototype]);\r\n}\r\n\r\n/**\r\n * Helper used to check whether the target is an Object prototype, Array prototype or Function prototype\r\n * @ignore\r\n */ \r\nfunction _isObjectArrayOrFunctionPrototype(target:any) {\r\n    return _isObjectOrArrayPrototype(target) || target === Function[Prototype];\r\n}\r\n\r\n/**\r\n * Helper used to get the prototype of the target object as getPrototypeOf is not available in an ES3 environment.\r\n * @ignore\r\n */ \r\nfunction _getObjProto(target:any) {\r\n    let newProto;\r\n\r\n    if (target) {\r\n        // This method doesn't exist in older browsers (e.g. IE8)\r\n        if (_objGetPrototypeOf) {\r\n            return _objGetPrototypeOf(target);\r\n        }\r\n\r\n        let curProto = target[str__Proto] || target[Prototype] || (target[Constructor] ? target[Constructor][Prototype] : null);\r\n\r\n        // Using the pre-calculated value as IE8 doesn't support looking up the prototype of a prototype and thus fails for more than 1 base class\r\n        newProto = target[DynProtoBaseProto] || curProto;\r\n        if (!objHasOwnProperty(target, DynProtoBaseProto)) {\r\n            // As this prototype doesn't have this property then this is from an inherited class so newProto is the base to return so save it\r\n            // so we can look it up value (which for a multiple hierarchy dynamicProto will be the base class)\r\n            delete target[DynProtoCurrent];     // Delete any current value allocated to this instance so we pick up the value from prototype hierarchy\r\n            newProto = target[DynProtoBaseProto] = target[DynProtoCurrent] || target[DynProtoBaseProto];\r\n            target[DynProtoCurrent] = curProto;\r\n        }\r\n    }\r\n\r\n    return newProto;\r\n}\r\n\r\n/**\r\n * Helper to get the properties of an object, including none enumerable ones as functions on a prototype in ES6\r\n * are not enumerable.\r\n * @param target \r\n */\r\nfunction _forEachProp(target: any, func: (name: string) => void) {\r\n    let props: string[] = [];\r\n    if (_objGetOwnProps) {\r\n        props = _objGetOwnProps(target);\r\n    } else {\r\n        for (let name in target) {\r\n            if (typeof name === \"string\" && objHasOwnProperty(target, name)) {\r\n                props.push(name);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (props && props.length > 0) {\r\n        for (let lp = 0; lp < props.length; lp++) {\r\n            func(props[lp]);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function to check whether the provided function name is a potential candidate for dynamic\r\n * callback and prototype generation.\r\n * @param target The target object, may be a prototype or class object\r\n * @param funcName The function name\r\n * @param skipOwn Skips the check for own property\r\n * @ignore\r\n */\r\nfunction _isDynamicCandidate(target:any, funcName:string, skipOwn:boolean) {\r\n    return (funcName !== Constructor && typeof target[funcName] === strFunction && (skipOwn || objHasOwnProperty(target, funcName)) && funcName !== str__Proto && funcName !== Prototype);\r\n}\r\n\r\n/**\r\n * Helper to throw a TypeError exception\r\n * @param message the message\r\n * @ignore\r\n */\r\nfunction _throwTypeError(message:string) {\r\n    throwTypeError(\"DynamicProto: \" + message);\r\n}\r\n\r\n/**\r\n * Returns a collection of the instance functions that are defined directly on the thisTarget object, it does \r\n * not return any inherited functions\r\n * @param thisTarget The object to get the instance functions from\r\n * @ignore\r\n */\r\nfunction _getInstanceFuncs(thisTarget:any): any {\r\n    // Get the base proto\r\n    var instFuncs = objCreate(null);\r\n\r\n    // Save any existing instance functions\r\n    _forEachProp(thisTarget, (name) => {\r\n        // Don't include any dynamic prototype instances - as we only want the real functions\r\n        if (!instFuncs[name] && _isDynamicCandidate(thisTarget, name, false)) {\r\n            // Create an instance callback for passing the base function to the caller\r\n            instFuncs[name] = thisTarget[name];\r\n        }\r\n    });\r\n\r\n    return instFuncs;\r\n}\r\n\r\n/**\r\n * Returns whether the value is included in the array\r\n * @param values The array of values\r\n * @param value  The value\r\n */\r\nfunction _hasVisited(values:any[], value:any) {\r\n    for (let lp = values.length - 1; lp >= 0; lp--) {\r\n        if (values[lp] === value) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Returns an object that contains callback functions for all \"base/super\" functions, this is used to \"save\"\r\n * enabling calling super.xxx() functions without requiring that the base \"class\" has defined a prototype references\r\n * @param target The current instance\r\n * @ignore\r\n */\r\nfunction _getBaseFuncs(classProto:any, thisTarget:any, instFuncs:any, useBaseInst:boolean): any {\r\n    function _instFuncProxy(target:any, funcHost: any,  funcName: string) {\r\n        let theFunc = funcHost[funcName];\r\n        if (theFunc[DynProxyTag] && useBaseInst) {\r\n            // grab and reuse the hosted looking function (if available) otherwise the original passed function\r\n            let instFuncTable = target[DynInstFuncTable] || {};\r\n            if (instFuncTable[DynAllowInstChkTag] !== false) {\r\n                theFunc = (instFuncTable[funcHost[DynClassName]] || {})[funcName] || theFunc;\r\n            }\r\n        }\r\n\r\n        return function() {\r\n            // eslint-disable-next-line prefer-rest-params\r\n            return theFunc.apply(target, arguments);\r\n        };\r\n    }\r\n\r\n    // Start creating a new baseFuncs by creating proxies for the instance functions (as they may get replaced)\r\n    var baseFuncs = objCreate(null);\r\n    _forEachProp(instFuncs, (name) => {\r\n        // Create an instance callback for passing the base function to the caller\r\n        baseFuncs[name] = _instFuncProxy(thisTarget, instFuncs, name);\r\n    });\r\n    \r\n    // Get the base prototype functions\r\n    var baseProto = _getObjProto(classProto);\r\n    let visited:any[] = [];\r\n\r\n    // Don't include base object functions for Object, Array or Function\r\n    while (baseProto && !_isObjectArrayOrFunctionPrototype(baseProto) && !_hasVisited(visited, baseProto)) {\r\n        // look for prototype functions\r\n        _forEachProp(baseProto, (name) => {\r\n            // Don't include any dynamic prototype instances - as we only want the real functions\r\n            // For IE 7/8 the prototype lookup doesn't provide the full chain so we need to bypass the \r\n            // hasOwnProperty check we get all of the methods, main difference is that IE7/8 doesn't return\r\n            // the Object prototype methods while bypassing the check\r\n            if (!baseFuncs[name] && _isDynamicCandidate(baseProto, name, !_objGetPrototypeOf)) {\r\n                // Create an instance callback for passing the base function to the caller\r\n                baseFuncs[name] = _instFuncProxy(thisTarget, baseProto, name);\r\n            }\r\n        });\r\n\r\n        // We need to find all possible functions that might be overloaded by walking the entire prototype chain\r\n        // This avoids the caller from needing to check whether it's direct base class implements the function or not\r\n        // by walking the entire chain it simplifies the usage and issues from upgrading any of the base classes.\r\n        visited.push(baseProto);\r\n        baseProto = _getObjProto(baseProto);\r\n    }\r\n\r\n    return baseFuncs;\r\n}\r\n\r\nfunction _getInstFunc(target: any, funcName: string, proto: any, currentDynProtoProxy: any) {\r\n    let instFunc = null;\r\n\r\n    // We need to check whether the class name is defined directly on this prototype otherwise\r\n    // it will walk the proto chain and return any parent proto classname.\r\n    if (target && objHasOwnProperty(proto, DynClassName)) {\r\n\r\n        let instFuncTable = target[DynInstFuncTable] || objCreate(null);\r\n        instFunc = (instFuncTable[proto[DynClassName]] || objCreate(null))[funcName];\r\n\r\n        if (!instFunc) {\r\n            // Avoid stack overflow from recursive calling the same function\r\n            _throwTypeError(\"Missing [\" + funcName + \"] \" + strFunction);\r\n        }\r\n\r\n        // We have the instance function, lets check it we can speed up further calls\r\n        // by adding the instance function back directly on the instance (avoiding the dynamic func lookup)\r\n        if (!instFunc[DynInstChkTag] && instFuncTable[DynAllowInstChkTag] !== false) {\r\n            // If the instance already has an instance function we can't replace it\r\n            let canAddInst = !objHasOwnProperty(target, funcName);\r\n\r\n            // Get current prototype\r\n            let objProto = _getObjProto(target);\r\n            let visited:any[] = [];\r\n\r\n            // Lookup the function starting at the top (instance level prototype) and traverse down, if the first matching function\r\n            // if nothing is found or if the first hit is a dynamic proto instance then we can safely add an instance shortcut\r\n            while (canAddInst && objProto && !_isObjectArrayOrFunctionPrototype(objProto) && !_hasVisited(visited, objProto)) {\r\n                let protoFunc = objProto[funcName];\r\n                if (protoFunc) {\r\n                    canAddInst = (protoFunc === currentDynProtoProxy);\r\n                    break;\r\n                }\r\n\r\n                // We need to find all possible initial functions to ensure that we don't bypass a valid override function\r\n                visited.push(objProto);\r\n                objProto = _getObjProto(objProto);\r\n            }\r\n\r\n            try {\r\n                if (canAddInst) {\r\n                    // This instance doesn't have an instance func and the class hierarchy does have a higher level prototype version\r\n                    // so it's safe to directly assign for any subsequent calls (for better performance)\r\n                    target[funcName] = instFunc;\r\n                }\r\n\r\n                // Block further attempts to set the instance function for any\r\n                instFunc[DynInstChkTag] = 1;\r\n            } catch (e) {\r\n                // Don't crash if the object is readonly or the runtime doesn't allow changing this\r\n                // And set a flag so we don't try again for any function\r\n                instFuncTable[DynAllowInstChkTag] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return instFunc;\r\n}\r\n\r\nfunction _getProtoFunc(funcName: string, proto: any, currentDynProtoProxy: any) {\r\n    let protoFunc = proto[funcName];\r\n\r\n    // Check that the prototype function is not a self reference -- try to avoid stack overflow!\r\n    if (protoFunc === currentDynProtoProxy) {\r\n        // It is so lookup the base prototype\r\n        protoFunc = _getObjProto(proto)[funcName];\r\n    }\r\n\r\n    if (typeof protoFunc !== strFunction) {\r\n        _throwTypeError(\"[\" + funcName + \"] is not a \" + strFunction);\r\n    }\r\n\r\n    return protoFunc;\r\n}\r\n\r\n/**\r\n * Add the required dynamic prototype methods to the the class prototype\r\n * @param proto - The class prototype\r\n * @param className - The instance classname \r\n * @param target - The target instance\r\n * @param baseInstFuncs - The base instance functions\r\n * @param setInstanceFunc - Flag to allow prototype function to reset the instance function if one does not exist\r\n * @ignore\r\n */\r\nfunction _populatePrototype(proto:any, className:string, target:any, baseInstFuncs:any, setInstanceFunc:boolean) {\r\n    function _createDynamicPrototype(proto:any, funcName:string) {\r\n        let dynProtoProxy = function() {\r\n            // Use the instance or prototype function\r\n            let instFunc = _getInstFunc(this, funcName, proto, dynProtoProxy) || _getProtoFunc(funcName, proto, dynProtoProxy);\r\n            // eslint-disable-next-line prefer-rest-params\r\n            return instFunc.apply(this, arguments);\r\n        };\r\n        \r\n        // Tag this function as a proxy to support replacing dynamic proxy elements (primary use case is for unit testing\r\n        // via which can dynamically replace the prototype function reference)\r\n        (dynProtoProxy as any)[DynProxyTag] = 1;\r\n        return dynProtoProxy;\r\n    }\r\n    \r\n    if (!_isObjectOrArrayPrototype(proto)) {\r\n        let instFuncTable = target[DynInstFuncTable] = target[DynInstFuncTable] || objCreate(null);\r\n        if (!_isObjectOrArrayPrototype(instFuncTable)) {\r\n            let instFuncs = instFuncTable[className] = (instFuncTable[className] || objCreate(null)); // fetch and assign if as it may not exist yet\r\n\r\n            // Set whether we are allow to lookup instances, if someone has set to false then do not re-enable\r\n            if (instFuncTable[DynAllowInstChkTag] !== false) {\r\n                instFuncTable[DynAllowInstChkTag] = !!setInstanceFunc;\r\n            }\r\n\r\n            if (!_isObjectOrArrayPrototype(instFuncs)) {\r\n                _forEachProp(target, (name) => {\r\n                    // Only add overridden functions\r\n                    if (_isDynamicCandidate(target, name, false) && target[name] !== baseInstFuncs[name] ) {\r\n                        // Save the instance Function to the lookup table and remove it from the instance as it's not a dynamic proto function\r\n                        instFuncs[name] = target[name];\r\n                        delete target[name];\r\n                        \r\n                        // Add a dynamic proto if one doesn't exist or if a prototype function exists and it's not a dynamic one\r\n                        if (!objHasOwnProperty(proto, name) || (proto[name] && !proto[name][DynProxyTag])) {\r\n                            proto[name] = _createDynamicPrototype(proto, name);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Checks whether the passed prototype object appears to be correct by walking the prototype hierarchy of the instance\r\n * @param classProto The class prototype instance\r\n * @param thisTarget The current instance that will be checked whether the passed prototype instance is in the hierarchy\r\n * @ignore\r\n */\r\nfunction _checkPrototype(classProto:any, thisTarget:any) {\r\n    // This method doesn't existing in older browsers (e.g. IE8)\r\n    if (_objGetPrototypeOf) {\r\n        // As this is primarily a coding time check, don't bother checking if running in IE8 or lower\r\n        let visited:any[] = [];\r\n        let thisProto = _getObjProto(thisTarget);\r\n        while (thisProto && !_isObjectArrayOrFunctionPrototype(thisProto) && !_hasVisited(visited, thisProto)) {\r\n            if (thisProto === classProto) {\r\n                return true;\r\n            }\r\n\r\n            // This avoids the caller from needing to check whether it's direct base class implements the function or not\r\n            // by walking the entire chain it simplifies the usage and issues from upgrading any of the base classes.\r\n            visited.push(thisProto);\r\n            thisProto = _getObjProto(thisProto);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // If objGetPrototypeOf doesn't exist then just assume everything is ok.\r\n    return true;\r\n}\r\n\r\n/**\r\n * Gets the current prototype name using the ES6 name if available otherwise falling back to a use unknown as the name.\r\n * It's not critical for this to return a name, it's used to decorate the generated unique name for easier debugging only.\r\n * @param target \r\n * @param unknownValue \r\n * @ignore\r\n */\r\nfunction _getObjName(target:any, unknownValue?:string) {\r\n    if (objHasOwnProperty(target, Prototype)) {\r\n        // Look like a prototype\r\n        return target.name || unknownValue || UnknownValue\r\n    }\r\n\r\n    return (((target || {})[Constructor]) || {}).name || unknownValue || UnknownValue;\r\n}\r\n\r\n/**\r\n * Interface to define additional configuration options to control how the dynamic prototype functions operate.\r\n */\r\nexport interface IDynamicProtoOpts {\r\n\r\n    /**\r\n     * Should the dynamic prototype attempt to set an instance function for instances that do not already have an\r\n     * function of the same name or have been extended by a class with a (non-dynamic proto) prototype function.\r\n     */\r\n    setInstFuncs: boolean,\r\n\r\n    /**\r\n     * When looking for base (super) functions if it finds a dynamic proto instances can it use the instance functions\r\n     * and bypass the prototype lookups. Defaults to true.\r\n     */\r\n    useBaseInst?: boolean\r\n}\r\n\r\n/**\r\n * The delegate signature for the function used as the callback for dynamicProto() \r\n * @typeparam DPType This is the generic type of the class, used to keep intellisense valid for the proxy instance, even \r\n * though it is only a proxy that only contains the functions \r\n * @param theTarget This is the real \"this\" of the current target object\r\n * @param baseFuncProxy The is a proxy object which ONLY contains this function that existed on the \"this\" instance before\r\n * calling dynamicProto, it does NOT contain properties of this. This is basically equivalent to using the \"super\" keyword.\r\n */\r\nexport type DynamicProtoDelegate<DPType> = (theTarget:DPType, baseFuncProxy?:DPType) => void;\r\n\r\n/**\r\n * Helper function when creating dynamic (inline) functions for classes, this helper performs the following tasks :-\r\n * - Saves references to all defined base class functions\r\n * - Calls the delegateFunc with the current target (this) and a base object reference that can be used to call all \"super\" functions.\r\n * - Will populate the class prototype for all overridden functions to support class extension that call the prototype instance.\r\n * Callers should use this helper when declaring all function within the constructor of a class, as mentioned above the delegateFunc is \r\n * passed both the target \"this\" and an object that can be used to call any base (super) functions, using this based object in place of\r\n * super.XXX() (which gets expanded to _super.prototype.XXX()) provides a better minification outcome and also ensures the correct \"this\"\r\n * context is maintained as TypeScript creates incorrect references using super.XXXX() for dynamically defined functions i.e. Functions\r\n * defined in the constructor or some other function (rather than declared as complete typescript functions).\r\n * ### Usage\r\n * ```typescript\r\n * import dynamicProto from \"@microsoft/dynamicproto-js\";\r\n * class ExampleClass extends BaseClass {\r\n *     constructor() {\r\n *         dynamicProto(ExampleClass, this, (_self, base) => {\r\n *             // This will define a function that will be converted to a prototype function\r\n *             _self.newFunc = () => {\r\n *                 // Access any \"this\" instance property  \r\n *                 if (_self.someProperty) {\r\n *                     ...\r\n *                 }\r\n *             }\r\n *             // This will define a function that will be converted to a prototype function\r\n *             _self.myFunction = () => {\r\n *                 // Access any \"this\" instance property\r\n *                 if (_self.someProperty) {\r\n *                     // Call the base version of the function that we are overriding\r\n *                     base.myFunction();\r\n *                 }\r\n *                 ...\r\n *             }\r\n *             _self.initialize = () => {\r\n *                 ...\r\n *             }\r\n *             // Warnings: While the following will work as _self is simply a reference to\r\n *             // this, if anyone overrides myFunction() the overridden will be called first\r\n *             // as the normal JavaScript method resolution will occur and the defined\r\n *             // _self.initialize() function is actually gets removed from the instance and\r\n *             // a proxy prototype version is created to reference the created method.\r\n *             _self.initialize();\r\n *         });\r\n *     }\r\n * }\r\n * ```\r\n * @typeparam DPType This is the generic type of the class, used to keep intellisense valid\r\n * @typeparam DPCls The type that contains the prototype of the current class\r\n * @param theClass - This is the current class instance which contains the prototype for the current class\r\n * @param target - The current \"this\" (target) reference, when the class has been extended this.prototype will not be the 'theClass' value.\r\n * @param delegateFunc - The callback function (closure) that will create the dynamic function\r\n * @param options - Additional options to configure how the dynamic prototype operates\r\n */\r\nexport default function dynamicProto<DPType, DPCls>(theClass:DPCls, target:DPType, delegateFunc: DynamicProtoDelegate<DPType>, options?:IDynamicProtoOpts): void {\r\n    // Make sure that the passed theClass argument looks correct\r\n    if (!objHasOwnProperty(theClass, Prototype)) {\r\n        _throwTypeError(\"theClass is an invalid class definition.\");\r\n    }\r\n\r\n    // Quick check to make sure that the passed theClass argument looks correct (this is a common copy/paste error)\r\n    let classProto = theClass[Prototype];\r\n    if (!_checkPrototype(classProto, target)) {\r\n        _throwTypeError(\"[\" + _getObjName(theClass) + \"] not in hierarchy of [\" + _getObjName(target) + \"]\");\r\n    }\r\n\r\n    let className = null;\r\n    if (objHasOwnProperty(classProto, DynClassName)) {\r\n        // Only grab the class name if it's defined on this prototype (i.e. don't walk the prototype chain)\r\n        className = classProto[DynClassName];\r\n    } else {\r\n        // As not all browser support name on the prototype creating a unique dynamic one if we have not already\r\n        // assigned one, so we can use a simple string as the lookup rather than an object for the dynamic instance\r\n        // function table lookup.\r\n        className = DynClassNamePrefix + _getObjName(theClass, \"_\") + \"$\" + _gblInst.n ;\r\n        _gblInst.n++;\r\n        classProto[DynClassName] = className;\r\n    }\r\n\r\n    let perfOptions = dynamicProto[DynProtoDefaultOptions];\r\n    let useBaseInst = !!perfOptions[strUseBaseInst];\r\n    if (useBaseInst && options && options[strUseBaseInst] !== undefined) {\r\n        useBaseInst = !!options[strUseBaseInst];\r\n    }\r\n\r\n    // Get the current instance functions\r\n    let instFuncs = _getInstanceFuncs(target);\r\n\r\n    // Get all of the functions for any base instance (before they are potentially overridden)\r\n    let baseFuncs = _getBaseFuncs(classProto, target, instFuncs, useBaseInst);\r\n\r\n    // Execute the delegate passing in both the current target \"this\" and \"base\" function references\r\n    // Note casting the same type as we don't actually have the base class here and this will provide some intellisense support\r\n    delegateFunc(target, baseFuncs as DPType);\r\n\r\n    // Don't allow setting instance functions for older IE instances\r\n    let setInstanceFunc = !!_objGetPrototypeOf && !!perfOptions[strSetInstFuncs];\r\n    if (setInstanceFunc && options) {\r\n        setInstanceFunc = !!options[strSetInstFuncs];\r\n    }\r\n\r\n    // Populate the Prototype for any overridden instance functions\r\n    _populatePrototype(classProto, className, target, instFuncs, setInstanceFunc !== false);\r\n}\r\n\r\n/**\r\n * Exposes the default global options to allow global configuration, if the global values are disabled these will override\r\n * any passed values. This is primarily exposed to support unit-testing without the need for individual classes to expose\r\n * their internal usage of dynamic proto.\r\n */\r\ndynamicProto[DynProtoDefaultOptions] = _gblInst.o;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// @skip-file-minify\r\n// ##############################################################\r\n// AUTO GENERATED FILE: This file is Auto Generated during build.\r\n// ##############################################################\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// Note: DON'T Export these const from the package as we are still targeting ES5 which can result in a mutable variables that someone could change!!!\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\nexport var _DYN_TO_LOWER_CASE = \"toLowerCase\"; // Count: 11\r\nexport var _DYN_LENGTH = \"length\"; // Count: 58\r\nexport var _DYN_WARN_TO_CONSOLE = \"warnToConsole\"; // Count: 4\r\nexport var _DYN_THROW_INTERNAL = \"throwInternal\"; // Count: 5\r\nexport var _DYN_WATCH = \"watch\"; // Count: 7\r\nexport var _DYN_APPLY = \"apply\"; // Count: 7\r\nexport var _DYN_PUSH = \"push\"; // Count: 36\r\nexport var _DYN_SPLICE = \"splice\"; // Count: 8\r\nexport var _DYN_LOGGER = \"logger\"; // Count: 20\r\nexport var _DYN_CANCEL = \"cancel\"; // Count: 9\r\nexport var _DYN_INITIALIZE = \"initialize\"; // Count: 5\r\nexport var _DYN_IDENTIFIER = \"identifier\"; // Count: 8\r\nexport var _DYN_REMOVE_NOTIFICATION_0 = \"removeNotificationListener\"; // Count: 4\r\nexport var _DYN_ADD_NOTIFICATION_LIS1 = \"addNotificationListener\"; // Count: 4\r\nexport var _DYN_IS_INITIALIZED = \"isInitialized\"; // Count: 11\r\nexport var _DYN_GET_NOTIFY_MGR = \"getNotifyMgr\"; // Count: 5\r\nexport var _DYN_GET_PLUGIN = \"getPlugin\"; // Count: 5\r\nexport var _DYN_NAME = \"name\"; // Count: 9\r\nexport var _DYN_PROCESS_NEXT = \"processNext\"; // Count: 15\r\nexport var _DYN_GET_PROCESS_TEL_CONT2 = \"getProcessTelContext\"; // Count: 2\r\nexport var _DYN_VALUE = \"value\"; // Count: 7\r\nexport var _DYN_ENABLED = \"enabled\"; // Count: 6\r\nexport var _DYN_STOP_POLLING_INTERNA3 = \"stopPollingInternalLogs\"; // Count: 2\r\nexport var _DYN_UNLOAD = \"unload\"; // Count: 7\r\nexport var _DYN_ON_COMPLETE = \"onComplete\"; // Count: 4\r\nexport var _DYN_VERSION = \"version\"; // Count: 4\r\nexport var _DYN_LOGGING_LEVEL_CONSOL4 = \"loggingLevelConsole\"; // Count: 2\r\nexport var _DYN_CREATE_NEW = \"createNew\"; // Count: 7\r\nexport var _DYN_TEARDOWN = \"teardown\"; // Count: 9\r\nexport var _DYN_MESSAGE_ID = \"messageId\"; // Count: 4\r\nexport var _DYN_MESSAGE = \"message\"; // Count: 7\r\nexport var _DYN_DIAG_LOG = \"diagLog\"; // Count: 9\r\nexport var _DYN__DO_TEARDOWN = \"_doTeardown\"; // Count: 5\r\nexport var _DYN_UPDATE = \"update\"; // Count: 5\r\nexport var _DYN_GET_NEXT = \"getNext\"; // Count: 10\r\nexport var _DYN_SET_NEXT_PLUGIN = \"setNextPlugin\"; // Count: 5\r\nexport var _DYN_USER_AGENT = \"userAgent\"; // Count: 5\r\nexport var _DYN_SPLIT = \"split\"; // Count: 7\r\nexport var _DYN_REPLACE = \"replace\"; // Count: 9\r\nexport var _DYN_TYPE = \"type\"; // Count: 17\r\nexport var _DYN_EVT_NAME = \"evtName\"; // Count: 4\r\nexport var _DYN_STATUS = \"status\"; // Count: 9\r\nexport var _DYN_INDEX_OF = \"indexOf\"; // Count: 4\r\nexport var _DYN_GET_ALL_RESPONSE_HEA5 = \"getAllResponseHeaders\"; // Count: 2\r\nexport var _DYN_IS_CHILD_EVT = \"isChildEvt\"; // Count: 3\r\nexport var _DYN_DATA = \"data\"; // Count: 11\r\nexport var _DYN_GET_CTX = \"getCtx\"; // Count: 6\r\nexport var _DYN_SET_CTX = \"setCtx\"; // Count: 10\r\nexport var _DYN_ITEMS_RECEIVED = \"itemsReceived\"; // Count: 3\r\nexport var _DYN_HEADERS = \"headers\"; // Count: 6\r\nexport var _DYN_URL_STRING = \"urlString\"; // Count: 5\r\nexport var _DYN_TIMEOUT = \"timeout\"; // Count: 6\r\nexport var _DYN_TOTAL_REQUEST = \"totalRequest\"; // Count: 4\r\nexport var _DYN_REQUEST_DURATION = \"requestDuration\"; // Count: 3\r\nexport var _DYN_FAILURE = \"failure\"; // Count: 4\r\nexport var _DYN_EXCEPTION = \"exception\"; // Count: 4\r\nexport var _DYN_THROTTLE = \"throttle\"; // Count: 4\r\nexport var _DYN_TRACE_FLAGS = \"traceFlags\"; // Count: 5\r\nexport var _DYN_GET_ATTRIBUTE = \"getAttribute\"; // Count: 3\r\n//# sourceMappingURL=__DynamicConstants.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { arrForEach, createCustomError, dumpObj } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH } from \"../__DynamicConstants\";\r\nvar aggregationErrorType;\r\n/**\r\n * Throws an Aggregation Error which includes all of the errors that led to this error occurring\r\n * @param message - The message describing the aggregation error (the sourceError details are added to this)\r\n * @param sourceErrors - An array of the errors that caused this situation\r\n */\r\nexport function throwAggregationError(message, sourceErrors) {\r\n    if (!aggregationErrorType) {\r\n        aggregationErrorType = createCustomError(\"AggregationError\", function (self, args) {\r\n            if (args[_DYN_LENGTH /* @min:%2elength */] > 1) {\r\n                // Save the provided errors\r\n                self.errors = args[1];\r\n            }\r\n        });\r\n    }\r\n    var theMessage = message || \"One or more errors occurred.\";\r\n    arrForEach(sourceErrors, function (srcError, idx) {\r\n        theMessage += \"\\n\".concat(idx, \" > \").concat(dumpObj(srcError));\r\n    });\r\n    throw new aggregationErrorType(theMessage, sourceErrors || []);\r\n}\r\n//# sourceMappingURL=AggregationError.js.map","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2023 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nexport const STR_PROMISE = \"Promise\";\r\nexport const DONE = \"done\";\r\nexport const VALUE = \"value\";\r\nexport const ITERATOR = \"iterator\";\r\nexport const RETURN = \"return\";\r\nexport const REJECTED = \"rejected\";","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { isPromiseLike } from \"@nevware21/ts-utils\";\r\nimport { AwaitResponse } from \"../interfaces/await-response\";\r\nimport { IPromise } from \"../interfaces/IPromise\";\r\nimport { FinallyPromiseHandler, RejectedPromiseHandler, ResolvedPromiseHandler } from \"../interfaces/types\";\r\nimport { REJECTED } from \"../internal/constants\";\r\n\r\n/**\r\n * Helper to coallesce the promise resolved / reject into a single callback to simplify error handling.\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait\r\n * @param cb - The callback function to call with the resulting value, if the value is not a\r\n * promise like value then the callback is called synchronously, if the value is a promise then\r\n * the callback will be called once the promise completes the resulting value will be passed as an\r\n * IAwaitResponse instance, it will be called whether any promise resolves or rejects.\r\n * @returns The value returned by the `cb` callback function, if the value is a promise then the return value\r\n * of the callback will be returned as a promise whether the callback returns a promise or not.\r\n * @example\r\n * ```ts\r\n * let promise = createPromise<number>((resolve, reject) => {\r\n *     resolve(42);\r\n * });\r\n *\r\n * // Handle via doAwaitResponse\r\n * doAwaitResponse(promise, (value) => {\r\n *     if (!value.rejected) {\r\n *          // Do something with the value\r\n *     } else {\r\n *         // Do something with the reason\r\n *     }\r\n * });\r\n *\r\n * // It can also handle the raw value, so you could process the result of either a\r\n * // synchrounous return of the value or a Promise\r\n * doAwaitResponse(42, (value) => {\r\n *     if (!value.rejected) {\r\n *         // Do something with the value\r\n *     } else {\r\n *        // This will never be true as the value is not a promise\r\n *     }\r\n * });\r\n * ```\r\n */\r\nexport function doAwaitResponse<T, TResult1 = T, TResult2 = never>(value: T | Promise<T>, cb: (response: AwaitResponse<T | TResult1>) => T | TResult1 | TResult2 | Promise<T | TResult1 | TResult2>): T | TResult1 | TResult2 | Promise<T | TResult1 | TResult2>;\r\n\r\n/**\r\n * Helper to coallesce the promise resolved / reject into a single callback to simplify error handling.\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait for\r\n * @param cb - The callback function to call with the resulting value, if the value is not a\r\n * promise like value then the callback is called synchronously, if the value is a promise then\r\n * the callback will be called once the promise completes the resulting value will be passed as an\r\n * IAwaitResponse instance, it will be called whether any promise resolves or rejects.\r\n * @returns The value returned by the `cb` callback function, if the value is a promise then the return value\r\n * of the callback will be returned as a promise whether the callback returns a promise or not.\r\n * @example\r\n * ```ts\r\n * let promise = createPromise<number>((resolve, reject) => {\r\n *     resolve(42);\r\n * });\r\n *\r\n * // Handle via doAwaitResponse\r\n * doAwaitResponse(promise, (value) => {\r\n *     if (!value.rejected) {\r\n *          // Do something with the value\r\n *     } else {\r\n *         // Do something with the reason\r\n *     }\r\n * });\r\n *\r\n * // It can also handle the raw value, so you could process the result of either a\r\n * // synchrounous return of the value or a Promise\r\n * doAwaitResponse(42, (value) => {\r\n *     if (!value.rejected) {\r\n *         // Do something with the value\r\n *     } else {\r\n *        // This will never be true as the value is not a promise\r\n *     }\r\n * });\r\n * ```\r\n */\r\nexport function doAwaitResponse<T, TResult1 = T, TResult2 = never>(value: T | PromiseLike<T>, cb: (response: AwaitResponse<T | TResult1>) => T | TResult1 | TResult2 | PromiseLike<T | TResult1 | TResult2>): T | TResult1 | TResult2 | PromiseLike<T | TResult1 | TResult2>;\r\n\r\n/**\r\n * Helper to coallesce the promise resolved / reject into a single callback to simplify error handling.\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait to be resolved or rejected.\r\n * @param cb - The callback function to call with the resulting value, if the value is not a\r\n * promise like value then the callback is called synchronously, if the value is a promise then\r\n * the callback will be called once the promise completes the resulting value will be passed as an\r\n * IAwaitResponse instance, it will be called whether any promise resolves or rejects.\r\n * @returns The value returned by the `cb` callback function, if the value is a promise then the return value\r\n * of the callback will be returned as a promise whether the callback returns a promise or not.\r\n * @example\r\n * ```ts\r\n * let promise = createPromise<number>((resolve, reject) => {\r\n *     resolve(42);\r\n * });\r\n *\r\n * // Handle via doAwaitResponse\r\n * doAwaitResponse(promise, (value) => {\r\n *     if (!value.rejected) {\r\n *          // Do something with the value\r\n *     } else {\r\n *         // Do something with the reason\r\n *     }\r\n * });\r\n *\r\n * // It can also handle the raw value, so you could process the result of either a\r\n * // synchrounous return of the value or a Promise\r\n * doAwaitResponse(42, (value) => {\r\n *     if (!value.rejected) {\r\n *         // Do something with the value\r\n *     } else {\r\n *        // This will never be true as the value is not a promise\r\n *     }\r\n * });\r\n * ```\r\n */\r\nexport function doAwaitResponse<T, TResult1 = T, TResult2 = never>(value: T | IPromise<T>, cb: (response: AwaitResponse<T | TResult1>) => T | TResult1 | TResult2 | IPromise<T | TResult1 | TResult2>): T | TResult1 | TResult2 | IPromise<T | TResult1 | TResult2> {\r\n    return doAwait(value as T, (value) => {\r\n        return cb ? cb({\r\n            status: \"fulfilled\",\r\n            rejected: false,\r\n            value: value\r\n        }) : value;\r\n    },\r\n    (reason) => {\r\n        return cb ? cb({\r\n            status: REJECTED,\r\n            rejected: true,\r\n            reason: reason\r\n        }) : reason;\r\n    });\r\n}\r\n\r\n/**\r\n * Wait for the promise to resolve or reject, if resolved the callback function will be called with it's value and if\r\n * rejected the rejectFn will be called with the reason. If the passed promise argument is not a promise the callback\r\n * will be called synchronously with the value.\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait for\r\n * @param resolveFn - The callback to call on the promise successful resolving.\r\n * @param rejectFn - The callback to call when the promise rejects\r\n * @param finallyFn - The callback to call once the promise has resolved or rejected\r\n * @returns The passed value, if it is a promise and there is either a resolve or reject handler\r\n * then it will return a chained promise with the value from the resolve or reject handler (depending\r\n * whether it resolve or rejects)\r\n * @example\r\n * ```ts\r\n * let promise = createPromise<number>((resolve, reject) => {\r\n *     resolve(42);\r\n * });\r\n *\r\n * // Handle via a chained promise\r\n * let chainedPromise = promise.then((value) => {\r\n *     // Do something with the value\r\n * });\r\n *\r\n * // Handle via doAwait\r\n * doAwait(promise, (value) => {\r\n *     // Do something with the value\r\n * });\r\n *\r\n * // It can also handle the raw value, so you could process the result of either a\r\n * // synchrounous return of the value or a Promise\r\n * doAwait(42, (value) => {\r\n *     // Do something with the value\r\n * });\r\n * ```\r\n */\r\nexport function doAwait<T, TResult1 = T, TResult2 = never>(value: T | Promise<T>, resolveFn: ResolvedPromiseHandler<T, TResult1>, rejectFn?: RejectedPromiseHandler<TResult2>, finallyFn?: FinallyPromiseHandler): TResult1 | TResult2 | Promise<TResult1 | TResult2>;\r\n\r\n/**\r\n * Wait for the promise to resolve or reject, if resolved the callback function will be called with it's value and if\r\n * rejected the rejectFn will be called with the reason. If the passed promise argument is not a promise the callback\r\n * will be called synchronously with the value.\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait for\r\n * @param resolveFn - The callback to call on the promise successful resolving.\r\n * @param rejectFn - The callback to call when the promise rejects\r\n * @param finallyFn - The callback to call once the promise has resolved or rejected\r\n * @returns The passed value, if it is a promise and there is either a resolve or reject handler\r\n * then it will return a chained promise with the value from the resolve or reject handler (depending\r\n * whether it resolve or rejects)\r\n * @example\r\n * ```ts\r\n * let promise = createPromise<number>((resolve, reject) => {\r\n *     resolve(42);\r\n * });\r\n *\r\n * // Handle via a chained promise\r\n * let chainedPromise = promise.then((value) => {\r\n *     // Do something with the value\r\n * });\r\n *\r\n * // Handle via doAwait\r\n * doAwait(promise, (value) => {\r\n *     // Do something with the value\r\n * });\r\n *\r\n * // It can also handle the raw value, so you could process the result of either a\r\n * // synchrounous return of the value or a Promise\r\n * doAwait(42, (value) => {\r\n *     // Do something with the value\r\n * });\r\n * ```\r\n */\r\nexport function doAwait<T, TResult1 = T, TResult2 = never>(value: T | PromiseLike<T>, resolveFn: ResolvedPromiseHandler<T, TResult1>, rejectFn?: RejectedPromiseHandler<TResult2>, finallyFn?: FinallyPromiseHandler): TResult1 | TResult2 | PromiseLike<TResult1 | TResult2>;\r\n\r\n/**\r\n * Wait for the promise to resolve or reject, if resolved the callback function will be called with it's value and if\r\n * rejected the rejectFn will be called with the reason. If the passed promise argument is not a promise the callback\r\n * will be called synchronously with the value.\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait for\r\n * @param resolveFn - The callback to call on the promise successful resolving.\r\n * @param rejectFn - The callback to call when the promise rejects\r\n * @param finallyFn - The callback to call once the promise has resolved or rejected\r\n * @returns The passed value, if it is a promise and there is either a resolve or reject handler\r\n * then it will return a chained promise with the value from the resolve or reject handler (depending\r\n * whether it resolve or rejects)\r\n * @example\r\n * ```ts\r\n * let promise = createPromise<number>((resolve, reject) => {\r\n *     resolve(42);\r\n * });\r\n *\r\n * // Handle via a chained promise\r\n * let chainedPromise = promise.then((value) => {\r\n *     // Do something with the value\r\n * });\r\n *\r\n * // Handle via doAwait\r\n * doAwait(promise, (value) => {\r\n *     // Do something with the value\r\n * });\r\n *\r\n * // It can also handle the raw value, so you could process the result of either a\r\n * // synchrounous return of the value or a Promise\r\n * doAwait(42, (value) => {\r\n *     // Do something with the value\r\n * });\r\n * ```\r\n */\r\nexport function doAwait<T, TResult1 = T, TResult2 = never>(value: T | IPromise<T>, resolveFn: ResolvedPromiseHandler<T, TResult1>, rejectFn?: RejectedPromiseHandler<TResult2>, finallyFn?: FinallyPromiseHandler): TResult1 | TResult2 | IPromise<TResult1 | TResult2> {\r\n    let result: T | TResult1 | TResult2 | IPromise<T | TResult1 | TResult2> | PromiseLike<TResult1 | TResult2> = value;\r\n    \r\n    try {\r\n        if (isPromiseLike<T>(value)) {\r\n            if (resolveFn || rejectFn) {\r\n                result = value.then(resolveFn, rejectFn) as any;\r\n            }\r\n        } else {\r\n            try {\r\n                if (resolveFn) {\r\n                    result = resolveFn(value);\r\n                }\r\n            } catch (err) {\r\n                if (rejectFn) {\r\n                    result = rejectFn(err);\r\n                } else {\r\n                    throw err;\r\n                }\r\n            }\r\n        }\r\n    } finally {\r\n        if (finallyFn) {\r\n            doFinally(result as any, finallyFn);\r\n        }\r\n    }\r\n\r\n    return result as any;\r\n}\r\n\r\n/**\r\n * Wait for the promise to resolve or reject and then call the finallyFn. If the passed promise argument is not a promise the callback\r\n * will be called synchronously with the value. If the passed promise doesn't implement finally then a finally implementation will be\r\n * simulated using then(..., ...).\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait for\r\n * @param finallyFn - The finally function to call once the promise has resolved or rejected\r\n */\r\nexport function doFinally<T>(value: T | Promise<T>, finallyFn: FinallyPromiseHandler): T | Promise<T>;\r\n\r\n/**\r\n * Wait for the promise to resolve or reject and then call the finallyFn. If the passed promise argument is not a promise the callback\r\n * will be called synchronously with the value. If the passed promise doesn't implement finally then a finally implementation will be\r\n * simulated using then(..., ...).\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait for\r\n * @param finallyFn - The finally function to call once the promise has resolved or rejected\r\n */\r\nexport function doFinally<T>(value: T | PromiseLike<T>, finallyFn: FinallyPromiseHandler): T | PromiseLike<T>;\r\n\r\n/**\r\n * Wait for the promise to resolve or reject and then call the finallyFn. If the passed promise argument is not a promise the callback\r\n * will be called synchronously with the value. If the passed promise doesn't implement finally then a finally implementation will be\r\n * simulated using then(..., ...).\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait for\r\n * @param finallyFn - The finally function to call once the promise has resolved or rejected\r\n */\r\nexport function doFinally<T>(value: T | IPromise<T>, finallyFn: FinallyPromiseHandler): T | IPromise<T> {\r\n    let result = value;\r\n    if (finallyFn) {\r\n        if (isPromiseLike<T>(value)) {\r\n            if ((value as IPromise<T>).finally) {\r\n                result = (value as IPromise<T>).finally(finallyFn);\r\n            } else {\r\n                // Simulate finally if not available\r\n                result = value.then(\r\n                    function(value) {\r\n                        finallyFn();\r\n                        return value;\r\n                    }, function(reason: any) {\r\n                        finallyFn();\r\n                        throw reason;\r\n                    });\r\n            }\r\n        } else {\r\n            finallyFn();\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// ###################################################################################################################################################\r\n// Note: DON'T Export these const from the package as we are still targeting IE/ES5 this will export a mutable variables that someone could change ###\r\n// ###################################################################################################################################################\r\nexport var UNDEFINED_VALUE = undefined;\r\nexport var STR_EMPTY = \"\";\r\nexport var STR_CHANNELS = \"channels\";\r\nexport var STR_CORE = \"core\";\r\nexport var STR_CREATE_PERF_MGR = \"createPerfMgr\";\r\nexport var STR_DISABLED = \"disabled\";\r\nexport var STR_EXTENSION_CONFIG = \"extensionConfig\";\r\nexport var STR_EXTENSIONS = \"extensions\";\r\nexport var STR_PROCESS_TELEMETRY = \"processTelemetry\";\r\nexport var STR_PRIORITY = \"priority\";\r\nexport var STR_EVENTS_SENT = \"eventsSent\";\r\nexport var STR_EVENTS_DISCARDED = \"eventsDiscarded\";\r\nexport var STR_EVENTS_SEND_REQUEST = \"eventsSendRequest\";\r\nexport var STR_PERF_EVENT = \"perfEvent\";\r\nexport var STR_OFFLINE_STORE = \"offlineEventsStored\";\r\nexport var STR_OFFLINE_SENT = \"offlineBatchSent\";\r\nexport var STR_OFFLINE_DROP = \"offlineBatchDrop\";\r\nexport var STR_GET_PERF_MGR = \"getPerfMgr\";\r\nexport var STR_DOMAIN = \"domain\";\r\nexport var STR_PATH = \"path\";\r\nexport var STR_NOT_DYNAMIC_ERROR = \"Not dynamic - \";\r\n//# sourceMappingURL=InternalConstants.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { ObjAssign, ObjClass } from \"@microsoft/applicationinsights-shims\";\r\nimport { arrForEach, asString as asString21, isArray, isBoolean, isError, isFunction, isNullOrUndefined, isNumber, isObject, isPlainObject, isString, isUndefined, objDeepFreeze, objDefine, objForEachKey, objHasOwn, strIndexOf, strTrim } from \"@nevware21/ts-utils\";\r\nimport { _DYN_APPLY, _DYN_GET_ALL_RESPONSE_HEA5, _DYN_INDEX_OF, _DYN_LENGTH, _DYN_NAME, _DYN_REPLACE, _DYN_SPLIT, _DYN_STATUS, _DYN_TO_LOWER_CASE } from \"../__DynamicConstants\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\n// RESTRICT and AVOID circular dependencies you should not import other contained modules or export the contents of this file directly\r\n// Added to help with minification\r\nvar strGetPrototypeOf = \"getPrototypeOf\";\r\nvar rCamelCase = /-([a-z])/g;\r\nvar rNormalizeInvalid = /([^\\w\\d_$])/g;\r\nvar rLeadingNumeric = /^(\\d+[\\w\\d_$])/;\r\nexport var _getObjProto = Object[strGetPrototypeOf];\r\nexport function isNotUndefined(value) {\r\n    return !isUndefined(value);\r\n}\r\nexport function isNotNullOrUndefined(value) {\r\n    return !isNullOrUndefined(value);\r\n}\r\n/**\r\n * Validates that the string name conforms to the JS IdentifierName specification and if not\r\n * normalizes the name so that it would. This method does not identify or change any keywords\r\n * meaning that if you pass in a known keyword the same value will be returned.\r\n * This is a simplified version\r\n * @param name - The name to validate\r\n */\r\nexport function normalizeJsName(name) {\r\n    var value = name;\r\n    if (value && isString(value)) {\r\n        // CamelCase everything after the \"-\" and remove the dash\r\n        value = value[_DYN_REPLACE /* @min:%2ereplace */](rCamelCase, function (_all, letter) {\r\n            return letter.toUpperCase();\r\n        });\r\n        value = value[_DYN_REPLACE /* @min:%2ereplace */](rNormalizeInvalid, \"_\");\r\n        value = value[_DYN_REPLACE /* @min:%2ereplace */](rLeadingNumeric, function (_all, match) {\r\n            return \"_\" + match;\r\n        });\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * A simple wrapper (for minification support) to check if the value contains the search string.\r\n * @param value - The string value to check for the existence of the search value\r\n * @param search - The value search within the value\r\n */\r\nexport function strContains(value, search) {\r\n    if (value && search) {\r\n        return strIndexOf(value, search) !== -1;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Convert a date to I.S.O. format in IE8\r\n */\r\nexport function toISOString(date) {\r\n    return date && date.toISOString() || \"\";\r\n}\r\nexport var deepFreeze = objDeepFreeze;\r\n/**\r\n * Returns the name of object if it's an Error. Otherwise, returns empty string.\r\n */\r\nexport function getExceptionName(object) {\r\n    if (isError(object)) {\r\n        return object[_DYN_NAME /* @min:%2ename */];\r\n    }\r\n    return STR_EMPTY;\r\n}\r\n/**\r\n * Sets the provided value on the target instance using the field name when the provided chk function returns true, the chk\r\n * function will only be called if the new value is no equal to the original value.\r\n * @param target - The target object\r\n * @param field - The key of the target\r\n * @param value - The value to set\r\n * @param valChk - [Optional] Callback to check the value that if supplied will be called check if the new value can be set\r\n * @param srcChk - [Optional] Callback to check to original value that if supplied will be called if the new value should be set (if allowed)\r\n * @returns The existing or new value, depending what was set\r\n */\r\nexport function setValue(target, field, value, valChk, srcChk) {\r\n    var theValue = value;\r\n    if (target) {\r\n        theValue = target[field];\r\n        if (theValue !== value && (!srcChk || srcChk(theValue)) && (!valChk || valChk(value))) {\r\n            theValue = value;\r\n            target[field] = theValue;\r\n        }\r\n    }\r\n    return theValue;\r\n}\r\n/**\r\n * Returns the current value from the target object if not null or undefined otherwise sets the new value and returns it\r\n * @param target - The target object to return or set the default value\r\n * @param field - The key for the field to set on the target\r\n * @param defValue - [Optional] The value to set if not already present, when not provided a empty object will be added\r\n */\r\nexport function getSetValue(target, field, defValue) {\r\n    var theValue;\r\n    if (target) {\r\n        theValue = target[field];\r\n        if (!theValue && isNullOrUndefined(theValue)) {\r\n            // Supports having the default as null\r\n            theValue = !isUndefined(defValue) ? defValue : {};\r\n            target[field] = theValue;\r\n        }\r\n    }\r\n    else {\r\n        // Expanded for performance so we only check defValue if required\r\n        theValue = !isUndefined(defValue) ? defValue : {};\r\n    }\r\n    return theValue;\r\n}\r\nfunction _createProxyFunction(source, funcName) {\r\n    var srcFunc = null;\r\n    var src = null;\r\n    if (isFunction(source)) {\r\n        srcFunc = source;\r\n    }\r\n    else {\r\n        src = source;\r\n    }\r\n    return function () {\r\n        // Capture the original arguments passed to the method\r\n        var originalArguments = arguments;\r\n        if (srcFunc) {\r\n            src = srcFunc();\r\n        }\r\n        if (src) {\r\n            return src[funcName][_DYN_APPLY /* @min:%2eapply */](src, originalArguments);\r\n        }\r\n    };\r\n}\r\n/**\r\n * Effectively assigns all enumerable properties (not just own properties) and functions (including inherited prototype) from\r\n * the source object to the target, it attempts to use proxy getters / setters (if possible) and proxy functions to avoid potential\r\n * implementation issues by assigning prototype functions as instance ones\r\n *\r\n * This method is the primary method used to \"update\" the snippet proxy with the ultimate implementations.\r\n *\r\n * Special ES3 Notes:\r\n * Updates (setting) of direct property values on the target or indirectly on the source object WILL NOT WORK PROPERLY, updates to the\r\n * properties of \"referenced\" object will work (target.context.newValue = 10 =\\> will be reflected in the source.context as it's the\r\n * same object). ES3 Failures: assigning target.myProp = 3 -\\> Won't change source.myProp = 3, likewise the reverse would also fail.\r\n * @param target - The target object to be assigned with the source properties and functions\r\n * @param source - The source object which will be assigned / called by setting / calling the targets proxies\r\n * @param chkSet - An optional callback to determine whether a specific property/function should be proxied\r\n */\r\nexport function proxyAssign(target, source, chkSet) {\r\n    if (target && source && isObject(target) && isObject(source)) {\r\n        var _loop_1 = function (field) {\r\n            if (isString(field)) {\r\n                var value = source[field];\r\n                if (isFunction(value)) {\r\n                    if (!chkSet || chkSet(field, true, source, target)) {\r\n                        // Create a proxy function rather than just copying the (possible) prototype to the new object as an instance function\r\n                        target[field] = _createProxyFunction(source, field);\r\n                    }\r\n                }\r\n                else if (!chkSet || chkSet(field, false, source, target)) {\r\n                    if (objHasOwn(target, field)) {\r\n                        // Remove any previous instance property\r\n                        delete target[field];\r\n                    }\r\n                    objDefine(target, field, {\r\n                        g: function () {\r\n                            return source[field];\r\n                        },\r\n                        s: function (theValue) {\r\n                            source[field] = theValue;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        // effectively apply/proxy full source to the target instance\r\n        for (var field in source) {\r\n            _loop_1(field);\r\n        }\r\n    }\r\n    return target;\r\n}\r\n/**\r\n * Creates a proxy function on the target which internally will call the source version with all arguments passed to the target method.\r\n *\r\n * @param target - The target object to be assigned with the source properties and functions\r\n * @param name - The function name that will be added on the target\r\n * @param source - The source object which will be assigned / called by setting / calling the targets proxies\r\n * @param theFunc - The function name on the source that will be proxied on the target\r\n * @param overwriteTarget - If `false` this will not replace any pre-existing name otherwise (the default) it will overwrite any existing name\r\n */\r\nexport function proxyFunctionAs(target, name, source, theFunc, overwriteTarget) {\r\n    if (target && name && source) {\r\n        if (overwriteTarget !== false || isUndefined(target[name])) {\r\n            target[name] = _createProxyFunction(source, theFunc);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Creates proxy functions on the target which internally will call the source version with all arguments passed to the target method.\r\n *\r\n * @param target - The target object to be assigned with the source properties and functions\r\n * @param source - The source object which will be assigned / called by setting / calling the targets proxies\r\n * @param functionsToProxy - An array of function names that will be proxied on the target\r\n * @param overwriteTarget - If false this will not replace any pre-existing name otherwise (the default) it will overwrite any existing name\r\n */\r\nexport function proxyFunctions(target, source, functionsToProxy, overwriteTarget) {\r\n    if (target && source && isObject(target) && isArray(functionsToProxy)) {\r\n        arrForEach(functionsToProxy, function (theFuncName) {\r\n            if (isString(theFuncName)) {\r\n                proxyFunctionAs(target, theFuncName, source, theFuncName, overwriteTarget);\r\n            }\r\n        });\r\n    }\r\n    return target;\r\n}\r\n/**\r\n * Simpler helper to create a dynamic class that implements the interface and populates the values with the defaults.\r\n * Only instance properties (hasOwnProperty) values are copied from the defaults to the new instance\r\n * @param defaults - Simple helper\r\n */\r\nexport function createClassFromInterface(defaults) {\r\n    return /** @class */ (function () {\r\n        function class_1() {\r\n            var _this = this;\r\n            if (defaults) {\r\n                objForEachKey(defaults, function (field, value) {\r\n                    _this[field] = value;\r\n                });\r\n            }\r\n        }\r\n        return class_1;\r\n    }());\r\n}\r\n/**\r\n * A helper function to assist with JIT performance for objects that have properties added / removed dynamically\r\n * this is primarily for chromium based browsers and has limited effects on Firefox and none of IE. Only call this\r\n * function after you have finished \"updating\" the object, calling this within loops reduces or defeats the benefits.\r\n * This helps when iterating using for..in, objKeys() and objForEach()\r\n * @param theObject - The object to be optimized if possible\r\n */\r\nexport function optimizeObject(theObject) {\r\n    // V8 Optimization to cause the JIT compiler to create a new optimized object for looking up the own properties\r\n    // primarily for object with <= 19 properties for >= 20 the effect is reduced or non-existent\r\n    if (theObject && ObjAssign) {\r\n        theObject = ObjClass(ObjAssign({}, theObject));\r\n    }\r\n    return theObject;\r\n}\r\nexport function objExtend(obj1, obj2, obj3, obj4, obj5, obj6) {\r\n    // Variables\r\n    var theArgs = arguments;\r\n    var extended = theArgs[0] || {};\r\n    var argLen = theArgs[_DYN_LENGTH /* @min:%2elength */];\r\n    var deep = false;\r\n    var idx = 1;\r\n    // Check for \"Deep\" flag\r\n    if (argLen > 0 && isBoolean(extended)) {\r\n        deep = extended;\r\n        extended = theArgs[idx] || {};\r\n        idx++;\r\n    }\r\n    // Handle case when target is a string or something (possible in deep copy)\r\n    if (!isObject(extended)) {\r\n        extended = {};\r\n    }\r\n    // Loop through each remaining object and conduct a merge\r\n    for (; idx < argLen; idx++) {\r\n        var arg = theArgs[idx];\r\n        var isArgArray = isArray(arg);\r\n        var isArgObj = isObject(arg);\r\n        for (var prop in arg) {\r\n            var propOk = (isArgArray && (prop in arg)) || (isArgObj && objHasOwn(arg, prop));\r\n            if (!propOk) {\r\n                continue;\r\n            }\r\n            var newValue = arg[prop];\r\n            var isNewArray = void 0;\r\n            // If deep merge and property is an object, merge properties\r\n            if (deep && newValue && ((isNewArray = isArray(newValue)) || isPlainObject(newValue))) {\r\n                // Grab the current value of the extended object\r\n                var clone = extended[prop];\r\n                if (isNewArray) {\r\n                    if (!isArray(clone)) {\r\n                        // We can't \"merge\" an array with a non-array so overwrite the original\r\n                        clone = [];\r\n                    }\r\n                }\r\n                else if (!isPlainObject(clone)) {\r\n                    // We can't \"merge\" an object with a non-object\r\n                    clone = {};\r\n                }\r\n                // Never move the original objects always clone them\r\n                newValue = objExtend(deep, clone, newValue);\r\n            }\r\n            // Assign the new (or previous) value (unless undefined)\r\n            if (newValue !== undefined) {\r\n                extended[prop] = newValue;\r\n            }\r\n        }\r\n    }\r\n    return extended;\r\n}\r\nexport var asString = asString21;\r\n/**\r\n * Checks if the feature is enabled on not. If the feature is not defined, it will return the default state if provided or undefined.\r\n * If the feature is defined, it will check the mode and return true if the mode is enable or false if the mode is disable.\r\n * @param feature - The feature name to check\r\n * @param cfg - The configuration object to check the feature state against\r\n * @param sdkDefaultState - Optional default state to return if the feature is not defined\r\n * @returns True if the feature is enabled, false if the feature is disabled, or undefined if the feature is not defined and no default state is provided.\r\n */\r\nexport function isFeatureEnabled(feature, cfg, sdkDefaultState) {\r\n    var ft = cfg && cfg.featureOptIn && cfg.featureOptIn[feature];\r\n    if (feature && ft) {\r\n        var mode = ft.mode;\r\n        // NOTE: None will be considered as true\r\n        if (mode === 3 /* FeatureOptInMode.enable */) {\r\n            return true;\r\n        }\r\n        else if (mode === 2 /* FeatureOptInMode.disable */) {\r\n            return false;\r\n        }\r\n    }\r\n    // Return the default state if provided or undefined\r\n    return sdkDefaultState;\r\n}\r\nexport function getResponseText(xhr) {\r\n    try {\r\n        return xhr.responseText;\r\n    }\r\n    catch (e) {\r\n        // Best effort, as XHR may throw while XDR wont so just ignore\r\n    }\r\n    return null;\r\n}\r\nexport function formatErrorMessageXdr(xdr, message) {\r\n    if (xdr) {\r\n        return \"XDomainRequest,Response:\" + getResponseText(xdr) || \"\";\r\n    }\r\n    return message;\r\n}\r\nexport function formatErrorMessageXhr(xhr, message) {\r\n    if (xhr) {\r\n        return \"XMLHttpRequest,Status:\" + xhr[_DYN_STATUS /* @min:%2estatus */] + \",Response:\" + getResponseText(xhr) || xhr.response || \"\";\r\n    }\r\n    return message;\r\n}\r\nexport function prependTransports(theTransports, newTransports) {\r\n    if (newTransports) {\r\n        if (isNumber(newTransports)) {\r\n            theTransports = [newTransports].concat(theTransports);\r\n        }\r\n        else if (isArray(newTransports)) {\r\n            theTransports = newTransports.concat(theTransports);\r\n        }\r\n    }\r\n    return theTransports;\r\n}\r\nvar strDisabledPropertyName = \"Microsoft_ApplicationInsights_BypassAjaxInstrumentation\";\r\nvar strWithCredentials = \"withCredentials\";\r\nvar strTimeout = \"timeout\";\r\n/**\r\n * Create and open an XMLHttpRequest object\r\n * @param method - The request method\r\n * @param urlString - The url\r\n * @param withCredentials - Option flag indicating that credentials should be sent\r\n * @param disabled - Optional flag indicating that the XHR object should be marked as disabled and not tracked (default is false)\r\n * @param isSync - Optional flag indicating if the instance should be a synchronous request (defaults to false)\r\n * @param timeout - Optional value identifying the timeout value that should be assigned to the XHR request\r\n * @returns A new opened XHR request\r\n */\r\nexport function openXhr(method, urlString, withCredentials, disabled, isSync, timeout) {\r\n    if (disabled === void 0) { disabled = false; }\r\n    if (isSync === void 0) { isSync = false; }\r\n    function _wrapSetXhrProp(xhr, prop, value) {\r\n        try {\r\n            xhr[prop] = value;\r\n        }\r\n        catch (e) {\r\n            // - Wrapping as depending on the environment setting the property may fail (non-terminally)\r\n        }\r\n    }\r\n    var xhr = new XMLHttpRequest();\r\n    if (disabled) {\r\n        // Tag the instance so it's not tracked (trackDependency)\r\n        // If the environment has locked down the XMLHttpRequest (preventExtensions and/or freeze), this would\r\n        // cause the request to fail and we no telemetry would be sent\r\n        _wrapSetXhrProp(xhr, strDisabledPropertyName, disabled);\r\n    }\r\n    if (withCredentials) {\r\n        // Some libraries require that the withCredentials flag is set \"before\" open and\r\n        // - Wrapping as IE 10 has started throwing when setting before open\r\n        _wrapSetXhrProp(xhr, strWithCredentials, withCredentials);\r\n    }\r\n    xhr.open(method, urlString, !isSync);\r\n    if (withCredentials) {\r\n        // withCredentials should be set AFTER open (https://xhr.spec.whatwg.org/#the-withcredentials-attribute)\r\n        // And older firefox instances from 11+ will throw for sync events (current versions don't) which happens during unload processing\r\n        _wrapSetXhrProp(xhr, strWithCredentials, withCredentials);\r\n    }\r\n    // Only set the timeout for asynchronous requests as\r\n    // \"Timeout shouldn't be used for synchronous XMLHttpRequests requests used in a document environment or it will throw an InvalidAccessError exception.\"\"\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout\r\n    if (!isSync && timeout) {\r\n        _wrapSetXhrProp(xhr, strTimeout, timeout);\r\n    }\r\n    return xhr;\r\n}\r\n/**\r\n* Converts the XHR getAllResponseHeaders to a map containing the header key and value.\r\n* @internal\r\n*/\r\n// tslint:disable-next-line: align\r\nexport function convertAllHeadersToMap(headersString) {\r\n    var headers = {};\r\n    if (isString(headersString)) {\r\n        var headersArray = strTrim(headersString)[_DYN_SPLIT /* @min:%2esplit */](/[\\r\\n]+/);\r\n        arrForEach(headersArray, function (headerEntry) {\r\n            if (headerEntry) {\r\n                var idx = headerEntry[_DYN_INDEX_OF /* @min:%2eindexOf */](\": \");\r\n                if (idx !== -1) {\r\n                    // The new spec has the headers returning all as lowercase -- but not all browsers do this yet\r\n                    var header = strTrim(headerEntry.substring(0, idx))[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n                    var value = strTrim(headerEntry.substring(idx + 1));\r\n                    headers[header] = value;\r\n                }\r\n                else {\r\n                    headers[strTrim(headerEntry)] = 1;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return headers;\r\n}\r\n/**\r\n* append the XHR headers.\r\n* @internal\r\n*/\r\nexport function _appendHeader(theHeaders, xhr, name) {\r\n    if (!theHeaders[name] && xhr && xhr.getResponseHeader) {\r\n        var value = xhr.getResponseHeader(name);\r\n        if (value) {\r\n            theHeaders[name] = strTrim(value);\r\n        }\r\n    }\r\n    return theHeaders;\r\n}\r\nvar STR_KILL_DURATION_HEADER = \"kill-duration\";\r\nvar STR_KILL_DURATION_SECONDS_HEADER = \"kill-duration-seconds\";\r\nvar STR_TIME_DELTA_HEADER = \"time-delta-millis\";\r\n/**\r\n* get the XHR getAllResponseHeaders.\r\n* @internal\r\n*/\r\nexport function _getAllResponseHeaders(xhr, isOneDs) {\r\n    var theHeaders = {};\r\n    if (!xhr[_DYN_GET_ALL_RESPONSE_HEA5 /* @min:%2egetAllResponseHeaders */]) {\r\n        // Firefox 2-63 doesn't have getAllResponseHeaders function but it does have getResponseHeader\r\n        // Only call these if getAllResponseHeaders doesn't exist, otherwise we can get invalid response errors\r\n        // as collector is not currently returning the correct header to allow JS to access these headers\r\n        if (!!isOneDs) {\r\n            theHeaders = _appendHeader(theHeaders, xhr, STR_TIME_DELTA_HEADER);\r\n            theHeaders = _appendHeader(theHeaders, xhr, STR_KILL_DURATION_HEADER);\r\n            theHeaders = _appendHeader(theHeaders, xhr, STR_KILL_DURATION_SECONDS_HEADER);\r\n        }\r\n    }\r\n    else {\r\n        theHeaders = convertAllHeadersToMap(xhr[_DYN_GET_ALL_RESPONSE_HEA5 /* @min:%2egetAllResponseHeaders */]());\r\n    }\r\n    return theHeaders;\r\n}\r\n//# sourceMappingURL=HelperFuncs.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nimport { getGlobal, strShimObject, strShimPrototype, strShimUndefined } from \"@microsoft/applicationinsights-shims\";\r\nimport { getDocument, getInst, getNavigator, getPerformance, hasNavigator, isFunction, isString, isUndefined, mathMax, strIndexOf } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH, _DYN_NAME, _DYN_SPLIT, _DYN_TO_LOWER_CASE, _DYN_USER_AGENT } from \"../__DynamicConstants\";\r\nimport { strContains } from \"./HelperFuncs\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\n/**\r\n * This file exists to hold environment utilities that are required to check and\r\n * validate the current operating environment. Unless otherwise required, please\r\n * only use defined methods (functions) in this class so that users of these\r\n * functions/properties only need to include those that are used within their own modules.\r\n */\r\nvar strDocumentMode = \"documentMode\";\r\nvar strLocation = \"location\";\r\nvar strConsole = \"console\";\r\nvar strJSON = \"JSON\";\r\nvar strCrypto = \"crypto\";\r\nvar strMsCrypto = \"msCrypto\";\r\nvar strReactNative = \"ReactNative\";\r\nvar strMsie = \"msie\";\r\nvar strTrident = \"trident/\";\r\nvar strXMLHttpRequest = \"XMLHttpRequest\";\r\nvar _isTrident = null;\r\nvar _navUserAgentCheck = null;\r\nvar _enableMocks = false;\r\nvar _useXDomainRequest = null;\r\nvar _beaconsSupported = null;\r\nfunction _hasProperty(theClass, property) {\r\n    var supported = false;\r\n    if (theClass) {\r\n        try {\r\n            supported = property in theClass;\r\n            if (!supported) {\r\n                var proto = theClass[strShimPrototype];\r\n                if (proto) {\r\n                    supported = property in proto;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Do Nothing\r\n        }\r\n        if (!supported) {\r\n            try {\r\n                var tmp = new theClass();\r\n                supported = !isUndefined(tmp[property]);\r\n            }\r\n            catch (e) {\r\n                // Do Nothing\r\n            }\r\n        }\r\n    }\r\n    return supported;\r\n}\r\n/**\r\n * Enable the lookup of test mock objects if requested\r\n * @param enabled - A flag to enable or disable the mock\r\n */\r\nexport function setEnableEnvMocks(enabled) {\r\n    _enableMocks = enabled;\r\n}\r\n/**\r\n * Returns the global location object if it is present otherwise null.\r\n * This helper is used to access the location object without causing an exception\r\n * \"Uncaught ReferenceError: location is not defined\"\r\n */\r\nexport function getLocation(checkForMock) {\r\n    if (checkForMock && _enableMocks) {\r\n        var mockLocation = getInst(\"__mockLocation\");\r\n        if (mockLocation) {\r\n            return mockLocation;\r\n        }\r\n    }\r\n    if (typeof location === strShimObject && location) {\r\n        return location;\r\n    }\r\n    return getInst(strLocation);\r\n}\r\n/**\r\n * Returns the global console object\r\n */\r\nexport function getConsole() {\r\n    if (typeof console !== strShimUndefined) {\r\n        return console;\r\n    }\r\n    return getInst(strConsole);\r\n}\r\n/**\r\n * Checks if JSON object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a history\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: JSON is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\r\nexport function hasJSON() {\r\n    return Boolean((typeof JSON === strShimObject && JSON) || getInst(strJSON) !== null);\r\n}\r\n/**\r\n * Returns the global JSON object if it is present otherwise null.\r\n * This helper is used to access the JSON object without causing an exception\r\n * \"Uncaught ReferenceError: JSON is not defined\"\r\n */\r\nexport function getJSON() {\r\n    if (hasJSON()) {\r\n        return JSON || getInst(strJSON);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Returns the crypto object if it is present otherwise null.\r\n * This helper is used to access the crypto object from the current\r\n * global instance which could be window or globalThis for a web worker\r\n */\r\nexport function getCrypto() {\r\n    return getInst(strCrypto);\r\n}\r\n/**\r\n * Returns the crypto object if it is present otherwise null.\r\n * This helper is used to access the crypto object from the current\r\n * global instance which could be window or globalThis for a web worker\r\n */\r\nexport function getMsCrypto() {\r\n    return getInst(strMsCrypto);\r\n}\r\n/**\r\n * Returns whether the environment is reporting that we are running in a React Native Environment\r\n */\r\nexport function isReactNative() {\r\n    // If running in React Native, navigator.product will be populated\r\n    var nav = getNavigator();\r\n    if (nav && nav.product) {\r\n        return nav.product === strReactNative;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Identifies whether the current environment appears to be IE\r\n */\r\nexport function isIE() {\r\n    var nav = getNavigator();\r\n    if (nav && (nav[_DYN_USER_AGENT /* @min:%2euserAgent */] !== _navUserAgentCheck || _isTrident === null)) {\r\n        // Added to support test mocking of the user agent\r\n        _navUserAgentCheck = nav[_DYN_USER_AGENT /* @min:%2euserAgent */];\r\n        var userAgent = (_navUserAgentCheck || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n        _isTrident = (strContains(userAgent, strMsie) || strContains(userAgent, strTrident));\r\n    }\r\n    return _isTrident;\r\n}\r\n/**\r\n * Gets IE version returning the document emulation mode if we are running on IE, or null otherwise\r\n */\r\nexport function getIEVersion(userAgentStr) {\r\n    if (userAgentStr === void 0) { userAgentStr = null; }\r\n    if (!userAgentStr) {\r\n        var navigator_1 = getNavigator() || {};\r\n        userAgentStr = navigator_1 ? (navigator_1.userAgent || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() : STR_EMPTY;\r\n    }\r\n    var ua = (userAgentStr || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n    // Also check for documentMode in case X-UA-Compatible meta tag was included in HTML.\r\n    if (strContains(ua, strMsie)) {\r\n        var doc = getDocument() || {};\r\n        return mathMax(parseInt(ua[_DYN_SPLIT /* @min:%2esplit */](strMsie)[1]), (doc[strDocumentMode] || 0));\r\n    }\r\n    else if (strContains(ua, strTrident)) {\r\n        var tridentVer = parseInt(ua[_DYN_SPLIT /* @min:%2esplit */](strTrident)[1]);\r\n        if (tridentVer) {\r\n            return tridentVer + 4;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexport function isSafari(userAgentStr) {\r\n    if (!userAgentStr || !isString(userAgentStr)) {\r\n        var navigator_2 = getNavigator() || {};\r\n        userAgentStr = navigator_2 ? (navigator_2.userAgent || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() : STR_EMPTY;\r\n    }\r\n    var ua = (userAgentStr || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n    return (strIndexOf(ua, \"safari\") >= 0);\r\n}\r\n/**\r\n * Checks if HTML5 Beacons are supported in the current environment.\r\n * @param useCached - [Optional] used for testing to bypass the cached lookup, when `true` this will\r\n * cause the cached global to be reset.\r\n * @returns True if supported, false otherwise.\r\n */\r\nexport function isBeaconsSupported(useCached) {\r\n    if (_beaconsSupported === null || useCached === false) {\r\n        _beaconsSupported = hasNavigator() && Boolean(getNavigator().sendBeacon);\r\n    }\r\n    return _beaconsSupported;\r\n}\r\n/**\r\n * Checks if the Fetch API is supported in the current environment.\r\n * @param withKeepAlive - [Optional] If True, check if fetch is available and it supports the keepalive feature, otherwise only check if fetch is supported\r\n * @returns True if supported, otherwise false\r\n */\r\nexport function isFetchSupported(withKeepAlive) {\r\n    var isSupported = false;\r\n    try {\r\n        isSupported = !!getInst(\"fetch\");\r\n        var request = getInst(\"Request\");\r\n        if (isSupported && withKeepAlive && request) {\r\n            isSupported = _hasProperty(request, \"keepalive\");\r\n        }\r\n    }\r\n    catch (e) {\r\n        // Just Swallow any failure during availability checks\r\n    }\r\n    return isSupported;\r\n}\r\nexport function useXDomainRequest() {\r\n    if (_useXDomainRequest === null) {\r\n        _useXDomainRequest = (typeof XDomainRequest !== strShimUndefined);\r\n        if (_useXDomainRequest && isXhrSupported()) {\r\n            _useXDomainRequest = _useXDomainRequest && !_hasProperty(getInst(strXMLHttpRequest), \"withCredentials\");\r\n        }\r\n    }\r\n    return _useXDomainRequest;\r\n}\r\n/**\r\n * Checks if XMLHttpRequest is supported\r\n * @returns True if supported, otherwise false\r\n */\r\nexport function isXhrSupported() {\r\n    var isSupported = false;\r\n    try {\r\n        var xmlHttpRequest = getInst(strXMLHttpRequest);\r\n        isSupported = !!xmlHttpRequest;\r\n    }\r\n    catch (e) {\r\n        // Just Swallow any failure during availability checks\r\n    }\r\n    return isSupported;\r\n}\r\nfunction _getNamedValue(values, name) {\r\n    if (values) {\r\n        for (var i = 0; i < values[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n            var value = values[i];\r\n            if (value[_DYN_NAME /* @min:%2ename */]) {\r\n                if (value[_DYN_NAME /* @min:%2ename */] === name) {\r\n                    return value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * Helper function to fetch the named meta-tag from the page.\r\n * @param name - The name of the meta-tag to find.\r\n */\r\nexport function findMetaTag(name) {\r\n    var doc = getDocument();\r\n    if (doc && name) {\r\n        // Look for a meta-tag\r\n        return _getNamedValue(doc.querySelectorAll(\"meta\"), name).content;\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Helper function to fetch the named server timing value from the page response (first navigation event).\r\n * @param name - The name of the server timing value to find.\r\n */\r\nexport function findNamedServerTiming(name) {\r\n    var value;\r\n    var perf = getPerformance();\r\n    if (perf) {\r\n        // Try looking for a server-timing header\r\n        var navPerf = perf.getEntriesByType(\"navigation\") || [];\r\n        value = _getNamedValue((navPerf[_DYN_LENGTH /* @min:%2elength */] > 0 ? navPerf[0] : {}).serverTiming, name).description;\r\n    }\r\n    return value;\r\n}\r\n// TODO: should reuse this method for analytics plugin\r\nexport function dispatchEvent(target, evnt) {\r\n    if (target && target.dispatchEvent && evnt) {\r\n        target.dispatchEvent(evnt);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport function createCustomDomEvent(eventName, details) {\r\n    var event = null;\r\n    var detail = { detail: details || null };\r\n    if (isFunction(CustomEvent)) { // Use CustomEvent constructor when available\r\n        event = new CustomEvent(eventName, detail);\r\n    }\r\n    else { // CustomEvent has no constructor in IE\r\n        var doc = getDocument();\r\n        if (doc && doc.createEvent) {\r\n            event = doc.createEvent(\"CustomEvent\");\r\n            event.initCustomEvent(eventName, true, true, detail);\r\n        }\r\n    }\r\n    return event;\r\n}\r\nexport function sendCustomEvent(evtName, cfg, customDetails) {\r\n    var global = getGlobal();\r\n    if (global && global.CustomEvent) {\r\n        try {\r\n            var details = { cfg: cfg || null, customDetails: customDetails || null };\r\n            return dispatchEvent(global, createCustomDomEvent(evtName, details));\r\n        }\r\n        catch (e) {\r\n            // eslint-disable-next-line no-empty\r\n        }\r\n    }\r\n    return false;\r\n}\r\n//# sourceMappingURL=EnvUtils.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { mathFloor, utcNow } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH } from \"../__DynamicConstants\";\r\nimport { getCrypto, getMsCrypto, isIE } from \"./EnvUtils\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\nvar UInt32Mask = 0x100000000;\r\nvar MaxUInt32 = 0xffffffff;\r\nvar SEED1 = 123456789;\r\nvar SEED2 = 987654321;\r\n// MWC based Random generator (for IE)\r\nvar _mwcSeeded = false;\r\nvar _mwcW = SEED1;\r\nvar _mwcZ = SEED2;\r\n// Takes any integer\r\nfunction _mwcSeed(seedValue) {\r\n    if (seedValue < 0) {\r\n        // Make sure we end up with a positive number and not -ve one.\r\n        seedValue >>>= 0;\r\n    }\r\n    _mwcW = (SEED1 + seedValue) & MaxUInt32;\r\n    _mwcZ = (SEED2 - seedValue) & MaxUInt32;\r\n    _mwcSeeded = true;\r\n}\r\nfunction _autoSeedMwc() {\r\n    // Simple initialization using default Math.random() - So we inherit any entropy from the browser\r\n    // and bitwise XOR with the current milliseconds\r\n    try {\r\n        var now = utcNow() & 0x7fffffff;\r\n        _mwcSeed(((Math.random() * UInt32Mask) ^ now) + now);\r\n    }\r\n    catch (e) {\r\n        // Don't crash if something goes wrong\r\n    }\r\n}\r\n/**\r\n * Generate a random value between 0 and maxValue, max value should be limited to a 32-bit maximum.\r\n * So maxValue(16) will produce a number from 0..16 (range of 17)\r\n * @param maxValue - The max value for the range\r\n */\r\nexport function randomValue(maxValue) {\r\n    if (maxValue > 0) {\r\n        return mathFloor((random32() / MaxUInt32) * (maxValue + 1)) >>> 0;\r\n    }\r\n    return 0;\r\n}\r\n/**\r\n * generate a random 32-bit number (0x000000..0xFFFFFFFF) or (-0x80000000..0x7FFFFFFF), defaults un-unsigned.\r\n * @param signed - True to return a signed 32-bit number (-0x80000000..0x7FFFFFFF) otherwise an unsigned one (0x000000..0xFFFFFFFF)\r\n */\r\nexport function random32(signed) {\r\n    var value = 0;\r\n    var c = getCrypto() || getMsCrypto();\r\n    if (c && c.getRandomValues) {\r\n        // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)\r\n        value = c.getRandomValues(new Uint32Array(1))[0] & MaxUInt32;\r\n    }\r\n    if (value === 0 && isIE()) {\r\n        // For IE 6, 7, 8 (especially on XP) Math.random is not very random\r\n        if (!_mwcSeeded) {\r\n            // Set the seed for the Mwc algorithm\r\n            _autoSeedMwc();\r\n        }\r\n        // Don't use Math.random for IE\r\n        // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)\r\n        value = mwcRandom32() & MaxUInt32;\r\n    }\r\n    if (value === 0) {\r\n        // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)\r\n        value = mathFloor((UInt32Mask * Math.random()) | 0);\r\n    }\r\n    if (!signed) {\r\n        // Make sure we end up with a positive number and not -ve one.\r\n        value >>>= 0;\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Seed the MWC random number generator with the specified seed or a random value\r\n * @param value - optional the number to used as the seed, if undefined, null or zero a random value will be chosen\r\n */\r\nexport function mwcRandomSeed(value) {\r\n    if (!value) {\r\n        _autoSeedMwc();\r\n    }\r\n    else {\r\n        _mwcSeed(value);\r\n    }\r\n}\r\n/**\r\n * Generate a random 32-bit number between (0x000000..0xFFFFFFFF) or (-0x80000000..0x7FFFFFFF), using MWC (Multiply with carry)\r\n * instead of Math.random() defaults to un-signed.\r\n * Used as a replacement random generator for IE to avoid issues with older IE instances.\r\n * @param signed - True to return a signed 32-bit number (-0x80000000..0x7FFFFFFF) otherwise an unsigned one (0x000000..0xFFFFFFFF)\r\n */\r\nexport function mwcRandom32(signed) {\r\n    _mwcZ = (36969 * (_mwcZ & 0xFFFF) + (_mwcZ >> 16)) & MaxUInt32;\r\n    _mwcW = (18000 * (_mwcW & 0xFFFF) + (_mwcW >> 16)) & MaxUInt32;\r\n    var value = (((_mwcZ << 16) + (_mwcW & 0xFFFF)) >>> 0) & MaxUInt32 | 0;\r\n    if (!signed) {\r\n        // Make sure we end up with a positive number and not -ve one.\r\n        value >>>= 0;\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Generate random base64 id string.\r\n * The default length is 22 which is 132-bits so almost the same as a GUID but as base64 (the previous default was 5)\r\n * @param maxLength - Optional value to specify the length of the id to be generated, defaults to 22\r\n */\r\nexport function newId(maxLength) {\r\n    if (maxLength === void 0) { maxLength = 22; }\r\n    var base64chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n    // Start with an initial random number, consuming the value in reverse byte order\r\n    var number = random32() >>> 0; // Make sure it's a +ve number\r\n    var chars = 0;\r\n    var result = STR_EMPTY;\r\n    while (result[_DYN_LENGTH /* @min:%2elength */] < maxLength) {\r\n        chars++;\r\n        result += base64chars.charAt(number & 0x3F);\r\n        number >>>= 6; // Zero fill with right shift\r\n        if (chars === 5) {\r\n            // 5 base64 characters === 30 bits so we don't have enough bits for another base64 char\r\n            // So add on another 30 bits and make sure it's +ve\r\n            number = (((random32() << 2) & 0xFFFFFFFF) | (number & 0x03)) >>> 0;\r\n            chars = 0; // We need to reset the number every 5 chars (30 bits)\r\n        }\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=RandomHelper.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { objDefine } from \"@nevware21/ts-utils\";\r\nimport { normalizeJsName } from \"./HelperFuncs\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\nimport { newId } from \"./RandomHelper\";\r\nvar version = '3.3.9';\r\nvar instanceName = \".\" + newId(6);\r\nvar _dataUid = 0;\r\n// Accepts only:\r\n//  - Node\r\n//    - Node.ELEMENT_NODE\r\n//    - Node.DOCUMENT_NODE\r\n//  - Object\r\n//    - Any\r\nfunction _canAcceptData(target) {\r\n    return target.nodeType === 1 || target.nodeType === 9 || !(+target.nodeType);\r\n}\r\nfunction _getCache(data, target) {\r\n    var theCache = target[data.id];\r\n    if (!theCache) {\r\n        theCache = {};\r\n        try {\r\n            if (_canAcceptData(target)) {\r\n                objDefine(target, data.id, {\r\n                    e: false,\r\n                    v: theCache\r\n                });\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Not all environments allow extending all objects, so just ignore the cache in those cases\r\n        }\r\n    }\r\n    return theCache;\r\n}\r\nexport function createUniqueNamespace(name, includeVersion) {\r\n    if (includeVersion === void 0) { includeVersion = false; }\r\n    return normalizeJsName(name + (_dataUid++) + (includeVersion ? \".\" + version : STR_EMPTY) + instanceName);\r\n}\r\nexport function createElmNodeData(name) {\r\n    var data = {\r\n        id: createUniqueNamespace(\"_aiData-\" + (name || STR_EMPTY) + \".\" + version),\r\n        accept: function (target) {\r\n            return _canAcceptData(target);\r\n        },\r\n        get: function (target, name, defValue, addDefault) {\r\n            var theCache = target[data.id];\r\n            if (!theCache) {\r\n                if (addDefault) {\r\n                    // Side effect is adds the cache\r\n                    theCache = _getCache(data, target);\r\n                    theCache[normalizeJsName(name)] = defValue;\r\n                }\r\n                return defValue;\r\n            }\r\n            return theCache[normalizeJsName(name)];\r\n        },\r\n        kill: function (target, name) {\r\n            if (target && target[name]) {\r\n                try {\r\n                    delete target[name];\r\n                }\r\n                catch (e) {\r\n                    // Just cleaning up, so if this fails -- ignore\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return data;\r\n}\r\n//# sourceMappingURL=DataCacheHelper.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { asString, isArray, isDefined, isNullOrUndefined, isObject, isPlainObject, isUndefined, objForEachKey, objHasOwn } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH } from \"../__DynamicConstants\";\r\nfunction _isConfigDefaults(value) {\r\n    return (value && isObject(value) && !isArray(value) && (value.isVal || value.fb || objHasOwn(value, \"v\") || objHasOwn(value, \"mrg\") || objHasOwn(value, \"ref\") || value.set));\r\n}\r\nfunction _getDefault(dynamicHandler, theConfig, cfgDefaults) {\r\n    var defValue;\r\n    var isDefaultValid = cfgDefaults.dfVal || isDefined;\r\n    // There is a fallback config key so try and grab that first\r\n    if (theConfig && cfgDefaults.fb) {\r\n        var fallbacks = cfgDefaults.fb;\r\n        if (!isArray(fallbacks)) {\r\n            fallbacks = [fallbacks];\r\n        }\r\n        for (var lp = 0; lp < fallbacks[_DYN_LENGTH /* @min:%2elength */]; lp++) {\r\n            var fallback = fallbacks[lp];\r\n            var fbValue = theConfig[fallback];\r\n            if (isDefaultValid(fbValue)) {\r\n                defValue = fbValue;\r\n            }\r\n            else if (dynamicHandler) {\r\n                // Needed to ensure that the fallback value (and potentially) new field is also dynamic even if null/undefined\r\n                fbValue = dynamicHandler.cfg[fallback];\r\n                if (isDefaultValid(fbValue)) {\r\n                    defValue = fbValue;\r\n                }\r\n                // Needed to ensure that the fallback value (and potentially) new field is also dynamic even if null/undefined\r\n                dynamicHandler.set(dynamicHandler.cfg, asString(fallback), fbValue);\r\n            }\r\n            if (isDefaultValid(defValue)) {\r\n                // We have a valid default so break out of the look\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // If the value is still not defined and we have a default value then use that\r\n    if (!isDefaultValid(defValue) && isDefaultValid(cfgDefaults.v)) {\r\n        defValue = cfgDefaults.v;\r\n    }\r\n    return defValue;\r\n}\r\n/**\r\n * Recursively resolve the default value\r\n * @param dynamicHandler\r\n * @param theConfig\r\n * @param cfgDefaults\r\n * @returns\r\n */\r\nfunction _resolveDefaultValue(dynamicHandler, theConfig, cfgDefaults) {\r\n    var theValue = cfgDefaults;\r\n    if (cfgDefaults && _isConfigDefaults(cfgDefaults)) {\r\n        theValue = _getDefault(dynamicHandler, theConfig, cfgDefaults);\r\n    }\r\n    if (theValue) {\r\n        if (_isConfigDefaults(theValue)) {\r\n            theValue = _resolveDefaultValue(dynamicHandler, theConfig, theValue);\r\n        }\r\n        var newValue_1;\r\n        if (isArray(theValue)) {\r\n            newValue_1 = [];\r\n            newValue_1[_DYN_LENGTH /* @min:%2elength */] = theValue[_DYN_LENGTH /* @min:%2elength */];\r\n        }\r\n        else if (isPlainObject(theValue)) {\r\n            newValue_1 = {};\r\n        }\r\n        if (newValue_1) {\r\n            objForEachKey(theValue, function (key, value) {\r\n                if (value && _isConfigDefaults(value)) {\r\n                    value = _resolveDefaultValue(dynamicHandler, theConfig, value);\r\n                }\r\n                newValue_1[key] = value;\r\n            });\r\n            theValue = newValue_1;\r\n        }\r\n    }\r\n    return theValue;\r\n}\r\n/**\r\n * Applies the default value on the config property and makes sure that it's dynamic\r\n * @param theConfig\r\n * @param name\r\n * @param defaultValue\r\n */\r\nexport function _applyDefaultValue(dynamicHandler, theConfig, name, defaultValue) {\r\n    // Resolve the initial config value from the provided value or use the defined default\r\n    var isValid;\r\n    var setFn;\r\n    var defValue;\r\n    var cfgDefaults = defaultValue;\r\n    var mergeDf;\r\n    var reference;\r\n    var readOnly;\r\n    var blkDynamicValue;\r\n    if (_isConfigDefaults(cfgDefaults)) {\r\n        // looks like a IConfigDefault\r\n        isValid = cfgDefaults.isVal;\r\n        setFn = cfgDefaults.set;\r\n        readOnly = cfgDefaults.rdOnly;\r\n        blkDynamicValue = cfgDefaults.blkVal;\r\n        mergeDf = cfgDefaults.mrg;\r\n        reference = cfgDefaults.ref;\r\n        if (!reference && isUndefined(reference)) {\r\n            reference = !!mergeDf;\r\n        }\r\n        defValue = _getDefault(dynamicHandler, theConfig, cfgDefaults);\r\n    }\r\n    else {\r\n        defValue = defaultValue;\r\n    }\r\n    if (blkDynamicValue) {\r\n        // Mark the property so that any value assigned will be blocked from conversion, we need to do this\r\n        // before assigning or fetching the value to ensure it's not converted\r\n        dynamicHandler.blkVal(theConfig, name);\r\n    }\r\n    // Set the value to the default value;\r\n    var theValue;\r\n    var usingDefault = true;\r\n    var cfgValue = theConfig[name];\r\n    // try and get and user provided values\r\n    if (cfgValue || !isNullOrUndefined(cfgValue)) {\r\n        // Use the defined theConfig[name] value\r\n        theValue = cfgValue;\r\n        usingDefault = false;\r\n        // The values are different and we have a special default value check, which is used to\r\n        // override config values like empty strings to continue using the default\r\n        if (isValid && theValue !== defValue && !isValid(theValue)) {\r\n            theValue = defValue;\r\n            usingDefault = true;\r\n        }\r\n        if (setFn) {\r\n            theValue = setFn(theValue, defValue, theConfig);\r\n            usingDefault = theValue === defValue;\r\n        }\r\n    }\r\n    if (!usingDefault) {\r\n        if (isPlainObject(theValue) || isArray(defValue)) {\r\n            // we are using the user supplied value and it's an object\r\n            if (mergeDf && defValue && (isPlainObject(defValue) || isArray(defValue))) {\r\n                // Resolve/apply the defaults\r\n                objForEachKey(defValue, function (dfName, dfValue) {\r\n                    // Sets the value and makes it dynamic (if it doesn't already exist)\r\n                    _applyDefaultValue(dynamicHandler, theValue, dfName, dfValue);\r\n                });\r\n            }\r\n        }\r\n    }\r\n    else if (defValue) {\r\n        // Just resolve the default\r\n        theValue = _resolveDefaultValue(dynamicHandler, theConfig, defValue);\r\n    }\r\n    else {\r\n        theValue = defValue;\r\n    }\r\n    // if (theValue && usingDefault && (isPlainObject(theValue) || isArray(theValue))) {\r\n    //     theValue = _cfgDeepCopy(theValue);\r\n    // }\r\n    // Needed to ensure that the (potentially) new field is dynamic even if null/undefined\r\n    dynamicHandler.set(theConfig, name, theValue);\r\n    if (reference) {\r\n        dynamicHandler.ref(theConfig, name);\r\n    }\r\n    if (readOnly) {\r\n        dynamicHandler.rdOnly(theConfig, name);\r\n    }\r\n}\r\n//# sourceMappingURL=ConfigDefaults.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { isArray, isPlainObject, objForEachKey, symbolFor, throwTypeError } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH } from \"../__DynamicConstants\";\r\n// Using Symbol.for so that if the same symbol was already created it would be returned\r\n// To handle multiple instances using potentially different versions we are not using\r\n// createUniqueNamespace()\r\nexport var CFG_HANDLER_LINK = symbolFor(\"[[ai_dynCfg_1]]\");\r\n/**\r\n * @internal\r\n * @ignore\r\n * The symbol to tag objects / arrays with if they should not be converted\r\n */\r\nvar BLOCK_DYNAMIC = symbolFor(\"[[ai_blkDynCfg_1]]\");\r\n/**\r\n * @internal\r\n * @ignore\r\n * The symbol to tag objects to indicate that when included into the configuration that\r\n * they should be converted into a trackable dynamic object.\r\n */\r\nvar FORCE_DYNAMIC = symbolFor(\"[[ai_frcDynCfg_1]]\");\r\nexport function _cfgDeepCopy(source) {\r\n    if (source) {\r\n        var target_1;\r\n        if (isArray(source)) {\r\n            target_1 = [];\r\n            target_1[_DYN_LENGTH /* @min:%2elength */] = source[_DYN_LENGTH /* @min:%2elength */];\r\n        }\r\n        else if (isPlainObject(source)) {\r\n            target_1 = {};\r\n        }\r\n        if (target_1) {\r\n            // Copying index values by property name as the extensionConfig can be an array or object\r\n            objForEachKey(source, function (key, value) {\r\n                // Perform a deep copy of the object\r\n                target_1[key] = _cfgDeepCopy(value);\r\n            });\r\n            return target_1;\r\n        }\r\n    }\r\n    return source;\r\n}\r\n/**\r\n * @internal\r\n * Get the dynamic config handler if the value is already dynamic\r\n * @returns\r\n */\r\nexport function getDynamicConfigHandler(value) {\r\n    if (value) {\r\n        var handler = value[CFG_HANDLER_LINK] || value;\r\n        if (handler.cfg && (handler.cfg === value || handler.cfg[CFG_HANDLER_LINK] === handler)) {\r\n            return handler;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Mark the provided value so that if it's included into the configuration it will NOT have\r\n * its properties converted into a dynamic (reactive) object. If the object is not a plain object\r\n * or an array (ie. a class) this function has not affect as only Objects and Arrays are converted\r\n * into dynamic objects in the dynamic configuration.\r\n *\r\n * When you have tagged a value as both {@link forceDynamicConversion} and blocked force will take precedence.\r\n *\r\n * You should only need to use this function, if you are creating dynamic \"classes\" from objects\r\n * which confirm to the require interface. A common case for this is during unit testing where it's\r\n * easier to create mock extensions.\r\n *\r\n * If `value` is falsy (null / undefined / 0 / empty string etc) it will not be tagged and\r\n * if there is an exception adding the property to the value (because its frozen etc) the\r\n * exception will be swallowed\r\n *\r\n * @example\r\n * ```ts\r\n * // This is a valid \"extension\", but it is technically an object\r\n * // So when included in the config.extensions it WILL be cloned and then\r\n * // converted into a dynamic object, where all of its properties will become\r\n * // get/set object properties and will be tracked. While this WILL still\r\n * // function, when attempt to use a mocking framework on top of this the\r\n * // functions are now technically get accessors which return a function\r\n * // and this can cause some mocking frameworks to fail.\r\n * let mockChannel = {\r\n *      pause: () => { },\r\n*      resume: () => { },\r\n*      teardown: () => { },\r\n*      flush: (async: any, callBack: any) => { },\r\n*      processTelemetry: (env: any) => { },\r\n*      setNextPlugin: (next: any) => { },\r\n*      initialize: (config: any, core: any, extensions: any) => { },\r\n*      identifier: \"testChannel\",\r\n*      priority: 1003\r\n* };\r\n * ```\r\n * @param value - The object that you want to block from being converted into a\r\n * trackable dynamic object\r\n * @returns The original value\r\n */\r\nexport function blockDynamicConversion(value) {\r\n    if (value && (isPlainObject(value) || isArray(value))) {\r\n        try {\r\n            value[BLOCK_DYNAMIC] = true;\r\n        }\r\n        catch (e) {\r\n            // Don't throw for this case as it's an ask only\r\n        }\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * This is the reverse case of {@link blockDynamicConversion} in that this will tag an\r\n * object to indicate that it should always be converted into a dynamic trackable object\r\n * even when not an object or array. So all properties of this object will become\r\n * get / set accessor functions.\r\n *\r\n * When you have tagged a value as both {@link forceDynamicConversion} and blocked force will take precedence.\r\n *\r\n * If `value` is falsy (null / undefined / 0 / empty string etc) it will not be tagged and\r\n * if there is an exception adding the property to the value (because its frozen etc) the\r\n * exception will be swallowed.\r\n * @param value - The object that should be tagged and converted if included into a dynamic\r\n * configuration.\r\n * @returns The original value\r\n */\r\nexport function forceDynamicConversion(value) {\r\n    if (value) {\r\n        try {\r\n            value[FORCE_DYNAMIC] = true;\r\n        }\r\n        catch (e) {\r\n            // Don't throw for this case as it's an ask only\r\n        }\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * @internal\r\n * @ignore\r\n * Helper function to check whether an object can or should be converted into a dynamic\r\n * object.\r\n * @param value - The object to check whether it should be converted\r\n * @returns `true` if the value should be converted otherwise `false`.\r\n */\r\nexport function _canMakeDynamic(getFunc, state, value) {\r\n    var result = false;\r\n    // Object must exist and be truthy\r\n    if (value && !getFunc[state.blkVal]) {\r\n        // Tagged as always convert\r\n        result = value[FORCE_DYNAMIC];\r\n        // Check that it's not explicitly tagged as blocked\r\n        if (!result && !value[BLOCK_DYNAMIC]) {\r\n            // Only convert plain objects or arrays by default\r\n            result = isPlainObject(value) || isArray(value);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Throws an invalid access exception\r\n * @param message - The message to include in the exception\r\n */\r\nexport function throwInvalidAccess(message) {\r\n    throwTypeError(\"InvalidAccess:\" + message);\r\n}\r\n//# sourceMappingURL=DynamicSupport.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { arrForEach, arrIndexOf, dumpObj, isArray, objDefine, objDefineProp, objForEachKey, objGetOwnPropertyDescriptor } from \"@nevware21/ts-utils\";\r\nimport { UNDEFINED_VALUE } from \"../JavaScriptSDK/InternalConstants\";\r\nimport { _DYN_APPLY, _DYN_LOGGER, _DYN_PUSH, _DYN_SPLICE, _DYN_THROW_INTERNAL } from \"../__DynamicConstants\";\r\nimport { CFG_HANDLER_LINK, _canMakeDynamic, blockDynamicConversion, throwInvalidAccess } from \"./DynamicSupport\";\r\nvar arrayMethodsToPatch = [\r\n    \"push\",\r\n    \"pop\",\r\n    \"shift\",\r\n    \"unshift\",\r\n    \"splice\"\r\n];\r\nexport var _throwDynamicError = function (logger, name, desc, e) {\r\n    logger && logger[_DYN_THROW_INTERNAL /* @min:%2ethrowInternal */](3 /* eLoggingSeverity.DEBUG */, 108 /* _eInternalMessageId.DynamicConfigException */, \"\".concat(desc, \" [\").concat(name, \"] failed - \") + dumpObj(e));\r\n};\r\nfunction _patchArray(state, target, name) {\r\n    if (isArray(target)) {\r\n        // Monkey Patch the methods that might change the array\r\n        arrForEach(arrayMethodsToPatch, function (method) {\r\n            var orgMethod = target[method];\r\n            target[method] = function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var result = orgMethod[_DYN_APPLY /* @min:%2eapply */](this, args);\r\n                // items may be added, removed or moved so need to make some new dynamic properties\r\n                _makeDynamicObject(state, target, name, \"Patching\");\r\n                return result;\r\n            };\r\n        });\r\n    }\r\n}\r\nfunction _getOwnPropGetter(target, name) {\r\n    var propDesc = objGetOwnPropertyDescriptor(target, name);\r\n    return propDesc && propDesc.get;\r\n}\r\nfunction _createDynamicProperty(state, theConfig, name, value) {\r\n    // Does not appear to be dynamic so lets make it so\r\n    var detail = {\r\n        n: name,\r\n        h: [],\r\n        trk: function (handler) {\r\n            if (handler && handler.fn) {\r\n                if (arrIndexOf(detail.h, handler) === -1) {\r\n                    // Add this handler to the collection that should be notified when the value changes\r\n                    detail.h[_DYN_PUSH /* @min:%2epush */](handler);\r\n                }\r\n                state.trk(handler, detail);\r\n            }\r\n        },\r\n        clr: function (handler) {\r\n            var idx = arrIndexOf(detail.h, handler);\r\n            if (idx !== -1) {\r\n                detail.h[_DYN_SPLICE /* @min:%2esplice */](idx, 1);\r\n            }\r\n        }\r\n    };\r\n    // Flag to optimize lookup response time by avoiding additional function calls\r\n    var checkDynamic = true;\r\n    var isObjectOrArray = false;\r\n    function _getProperty() {\r\n        if (checkDynamic) {\r\n            isObjectOrArray = isObjectOrArray || _canMakeDynamic(_getProperty, state, value);\r\n            // Make sure that if it's an object that we make it dynamic\r\n            if (value && !value[CFG_HANDLER_LINK] && isObjectOrArray) {\r\n                // It doesn't look like it's already dynamic so lets make sure it's converted the object into a dynamic Config as well\r\n                value = _makeDynamicObject(state, value, name, \"Converting\");\r\n            }\r\n            // If it needed to be converted it now has been\r\n            checkDynamic = false;\r\n        }\r\n        // If there is an active handler then add it to the tracking set of handlers\r\n        var activeHandler = state.act;\r\n        if (activeHandler) {\r\n            detail.trk(activeHandler);\r\n        }\r\n        return value;\r\n    }\r\n    // Tag this getter as our dynamic property and provide shortcut for notifying a change\r\n    _getProperty[state.prop] = {\r\n        chng: function () {\r\n            state.add(detail);\r\n        }\r\n    };\r\n    function _setProperty(newValue) {\r\n        if (value !== newValue) {\r\n            if (!!_getProperty[state.ro] && !state.upd) {\r\n                // field is marked as readonly so return false\r\n                throwInvalidAccess(\"[\" + name + \"] is read-only:\" + dumpObj(theConfig));\r\n            }\r\n            if (checkDynamic) {\r\n                isObjectOrArray = isObjectOrArray || _canMakeDynamic(_getProperty, state, value);\r\n                checkDynamic = false;\r\n            }\r\n            // The value must be a plain object or an array to enforce the reference (in-place updates)\r\n            var isReferenced = isObjectOrArray && _getProperty[state.rf];\r\n            if (isObjectOrArray) {\r\n                // We are about to replace a plain object or an array\r\n                if (isReferenced) {\r\n                    // Reassign the properties from the current value to the same properties from the newValue\r\n                    // This will set properties not in the newValue to undefined\r\n                    objForEachKey(value, function (key) {\r\n                        value[key] = newValue ? newValue[key] : UNDEFINED_VALUE;\r\n                    });\r\n                    // Now assign / re-assign value with all of the keys from newValue\r\n                    try {\r\n                        objForEachKey(newValue, function (key, theValue) {\r\n                            _setDynamicProperty(state, value, key, theValue);\r\n                        });\r\n                        // Now drop newValue so when we assign value later it keeps the existing reference\r\n                        newValue = value;\r\n                    }\r\n                    catch (e) {\r\n                        // Unable to convert to dynamic property so just leave as non-dynamic\r\n                        _throwDynamicError((state.hdlr || {})[_DYN_LOGGER /* @min:%2elogger */], name, \"Assigning\", e);\r\n                        // Mark as not an object or array so we don't try and do this again\r\n                        isObjectOrArray = false;\r\n                    }\r\n                }\r\n                else if (value && value[CFG_HANDLER_LINK]) {\r\n                    // As we are replacing the value, if it's already dynamic then we need to notify the listeners\r\n                    // for every property it has already\r\n                    objForEachKey(value, function (key) {\r\n                        // Check if the value is dynamic\r\n                        var getter = _getOwnPropGetter(value, key);\r\n                        if (getter) {\r\n                            // And if it is tell it's listeners that the value has changed\r\n                            var valueState = getter[state.prop];\r\n                            valueState && valueState.chng();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (newValue !== value) {\r\n                var newIsObjectOrArray = newValue && _canMakeDynamic(_getProperty, state, newValue);\r\n                if (!isReferenced && newIsObjectOrArray) {\r\n                    // As the newValue is an object/array lets preemptively make it dynamic\r\n                    newValue = _makeDynamicObject(state, newValue, name, \"Converting\");\r\n                }\r\n                // Now assign the internal \"value\" to the newValue\r\n                value = newValue;\r\n                isObjectOrArray = newIsObjectOrArray;\r\n            }\r\n            // Cause any listeners to be scheduled for notification\r\n            state.add(detail);\r\n        }\r\n    }\r\n    objDefine(theConfig, detail.n, { g: _getProperty, s: _setProperty });\r\n}\r\nexport function _setDynamicProperty(state, target, name, value) {\r\n    if (target) {\r\n        // To be a dynamic property it needs to have a get function\r\n        var getter = _getOwnPropGetter(target, name);\r\n        var isDynamic = getter && !!getter[state.prop];\r\n        if (!isDynamic) {\r\n            _createDynamicProperty(state, target, name, value);\r\n        }\r\n        else {\r\n            // Looks like it's already dynamic just assign the new value\r\n            target[name] = value;\r\n        }\r\n    }\r\n    return target;\r\n}\r\nexport function _setDynamicPropertyState(state, target, name, flags) {\r\n    if (target) {\r\n        // To be a dynamic property it needs to have a get function\r\n        var getter = _getOwnPropGetter(target, name);\r\n        var isDynamic = getter && !!getter[state.prop];\r\n        var inPlace = flags && flags[0 /* _eSetDynamicPropertyFlags.inPlace */];\r\n        var rdOnly = flags && flags[1 /* _eSetDynamicPropertyFlags.readOnly */];\r\n        var blkProp = flags && flags[2 /* _eSetDynamicPropertyFlags.blockDynamicProperty */];\r\n        if (!isDynamic) {\r\n            if (blkProp) {\r\n                try {\r\n                    // Attempt to mark the target as blocked from conversion\r\n                    blockDynamicConversion(target);\r\n                }\r\n                catch (e) {\r\n                    _throwDynamicError((state.hdlr || {})[_DYN_LOGGER /* @min:%2elogger */], name, \"Blocking\", e);\r\n                }\r\n            }\r\n            try {\r\n                // Make sure it's dynamic so that we can tag the property as per the state\r\n                _setDynamicProperty(state, target, name, target[name]);\r\n                getter = _getOwnPropGetter(target, name);\r\n            }\r\n            catch (e) {\r\n                // Unable to convert to dynamic property so just leave as non-dynamic\r\n                _throwDynamicError((state.hdlr || {})[_DYN_LOGGER /* @min:%2elogger */], name, \"State\", e);\r\n            }\r\n        }\r\n        // Assign the optional flags if true\r\n        if (inPlace) {\r\n            getter[state.rf] = inPlace;\r\n        }\r\n        if (rdOnly) {\r\n            getter[state.ro] = rdOnly;\r\n        }\r\n        if (blkProp) {\r\n            getter[state.blkVal] = true;\r\n        }\r\n    }\r\n    return target;\r\n}\r\nexport function _makeDynamicObject(state, target, name, desc) {\r\n    try {\r\n        // Assign target with new value properties (converting into dynamic properties in the process)\r\n        objForEachKey(target, function (key, value) {\r\n            // Assign and/or make the property dynamic\r\n            _setDynamicProperty(state, target, key, value);\r\n        });\r\n        if (!target[CFG_HANDLER_LINK]) {\r\n            // Link the config back to the dynamic config details\r\n            objDefineProp(target, CFG_HANDLER_LINK, {\r\n                get: function () {\r\n                    return state.hdlr;\r\n                }\r\n            });\r\n            _patchArray(state, target, name);\r\n        }\r\n    }\r\n    catch (e) {\r\n        // Unable to convert to dynamic property so just leave as non-dynamic\r\n        _throwDynamicError((state.hdlr || {})[_DYN_LOGGER /* @min:%2elogger */], name, desc, e);\r\n    }\r\n    return target;\r\n}\r\n//# sourceMappingURL=DynamicProperty.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { arrForEach, arrIndexOf, dumpObj, newSymbol, scheduleTimeout } from \"@nevware21/ts-utils\";\r\nimport { throwAggregationError } from \"../JavaScriptSDK/AggregationError\";\r\nimport { _DYN_CANCEL, _DYN_LENGTH, _DYN_LOGGER, _DYN_PUSH, _DYN_THROW_INTERNAL } from \"../__DynamicConstants\";\r\nvar symPrefix = \"[[ai_\";\r\nvar symPostfix = \"]]\";\r\nexport function _createState(cfgHandler) {\r\n    var dynamicPropertySymbol = newSymbol(symPrefix + \"get\" + cfgHandler.uid + symPostfix);\r\n    var dynamicPropertyReadOnly = newSymbol(symPrefix + \"ro\" + cfgHandler.uid + symPostfix);\r\n    var dynamicPropertyReferenced = newSymbol(symPrefix + \"rf\" + cfgHandler.uid + symPostfix);\r\n    var dynamicPropertyBlockValue = newSymbol(symPrefix + \"blkVal\" + cfgHandler.uid + symPostfix);\r\n    var dynamicPropertyDetail = newSymbol(symPrefix + \"dtl\" + cfgHandler.uid + symPostfix);\r\n    var _waitingHandlers = null;\r\n    var _watcherTimer = null;\r\n    var theState;\r\n    function _useHandler(activeHandler, callback) {\r\n        var prevWatcher = theState.act;\r\n        try {\r\n            theState.act = activeHandler;\r\n            if (activeHandler && activeHandler[dynamicPropertyDetail]) {\r\n                // Clear out the previously tracked details for this handler, so that access are re-evaluated\r\n                arrForEach(activeHandler[dynamicPropertyDetail], function (detail) {\r\n                    detail.clr(activeHandler);\r\n                });\r\n                activeHandler[dynamicPropertyDetail] = [];\r\n            }\r\n            callback({\r\n                cfg: cfgHandler.cfg,\r\n                set: cfgHandler.set.bind(cfgHandler),\r\n                setDf: cfgHandler.setDf.bind(cfgHandler),\r\n                ref: cfgHandler.ref.bind(cfgHandler),\r\n                rdOnly: cfgHandler.rdOnly.bind(cfgHandler)\r\n            });\r\n        }\r\n        catch (e) {\r\n            var logger = cfgHandler[_DYN_LOGGER /* @min:%2elogger */];\r\n            if (logger) {\r\n                // Don't let one individual failure break everyone\r\n                logger[_DYN_THROW_INTERNAL /* @min:%2ethrowInternal */](1 /* eLoggingSeverity.CRITICAL */, 107 /* _eInternalMessageId.ConfigWatcherException */, dumpObj(e));\r\n            }\r\n            // Re-throw the exception so that any true \"error\" is reported back to the called\r\n            throw e;\r\n        }\r\n        finally {\r\n            theState.act = prevWatcher || null;\r\n        }\r\n    }\r\n    function _notifyWatchers() {\r\n        if (_waitingHandlers) {\r\n            var notifyHandlers = _waitingHandlers;\r\n            _waitingHandlers = null;\r\n            // Stop any timer as we are running them now anyway\r\n            _watcherTimer && _watcherTimer[_DYN_CANCEL /* @min:%2ecancel */]();\r\n            _watcherTimer = null;\r\n            var watcherFailures_1 = [];\r\n            // Now run the handlers\r\n            arrForEach(notifyHandlers, function (handler) {\r\n                if (handler) {\r\n                    if (handler[dynamicPropertyDetail]) {\r\n                        arrForEach(handler[dynamicPropertyDetail], function (detail) {\r\n                            // Clear out this handler from  previously tracked details, so that access are re-evaluated\r\n                            detail.clr(handler);\r\n                        });\r\n                        handler[dynamicPropertyDetail] = null;\r\n                    }\r\n                    // The handler may have self removed as part of another handler so re-check\r\n                    if (handler.fn) {\r\n                        try {\r\n                            _useHandler(handler, handler.fn);\r\n                        }\r\n                        catch (e) {\r\n                            // Don't let a single failing watcher cause other watches to fail\r\n                            watcherFailures_1[_DYN_PUSH /* @min:%2epush */](e);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            // During notification we may have had additional updates -- so notify those updates as well\r\n            if (_waitingHandlers) {\r\n                try {\r\n                    _notifyWatchers();\r\n                }\r\n                catch (e) {\r\n                    watcherFailures_1[_DYN_PUSH /* @min:%2epush */](e);\r\n                }\r\n            }\r\n            if (watcherFailures_1[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                throwAggregationError(\"Watcher error(s): \", watcherFailures_1);\r\n            }\r\n        }\r\n    }\r\n    function _addWatcher(detail) {\r\n        if (detail && detail.h[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n            if (!_waitingHandlers) {\r\n                _waitingHandlers = [];\r\n            }\r\n            if (!_watcherTimer) {\r\n                _watcherTimer = scheduleTimeout(function () {\r\n                    _watcherTimer = null;\r\n                    _notifyWatchers();\r\n                }, 0);\r\n            }\r\n            // Add all of the handlers for this detail (if not already present) - using normal for-loop for performance\r\n            for (var idx = 0; idx < detail.h[_DYN_LENGTH /* @min:%2elength */]; idx++) {\r\n                var handler = detail.h[idx];\r\n                // Add this handler to the collection of handlers to re-execute\r\n                if (handler && arrIndexOf(_waitingHandlers, handler) === -1) {\r\n                    _waitingHandlers[_DYN_PUSH /* @min:%2epush */](handler);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function _trackHandler(handler, detail) {\r\n        if (handler) {\r\n            var details = handler[dynamicPropertyDetail] = handler[dynamicPropertyDetail] || [];\r\n            if (arrIndexOf(details, detail) === -1) {\r\n                // If this detail is not already listed as tracked then add it so that we re-evaluate it's usage\r\n                details[_DYN_PUSH /* @min:%2epush */](detail);\r\n            }\r\n        }\r\n    }\r\n    theState = {\r\n        prop: dynamicPropertySymbol,\r\n        ro: dynamicPropertyReadOnly,\r\n        rf: dynamicPropertyReferenced,\r\n        blkVal: dynamicPropertyBlockValue,\r\n        hdlr: cfgHandler,\r\n        add: _addWatcher,\r\n        notify: _notifyWatchers,\r\n        use: _useHandler,\r\n        trk: _trackHandler\r\n    };\r\n    return theState;\r\n}\r\n//# sourceMappingURL=DynamicState.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { dumpObj, isUndefined, objDefine, objForEachKey } from \"@nevware21/ts-utils\";\r\nimport { createUniqueNamespace } from \"../JavaScriptSDK/DataCacheHelper\";\r\nimport { STR_NOT_DYNAMIC_ERROR } from \"../JavaScriptSDK/InternalConstants\";\r\nimport { _DYN_THROW_INTERNAL, _DYN_WARN_TO_CONSOLE, _DYN_WATCH } from \"../__DynamicConstants\";\r\nimport { _applyDefaultValue } from \"./ConfigDefaults\";\r\nimport { _makeDynamicObject, _setDynamicProperty, _setDynamicPropertyState, _throwDynamicError } from \"./DynamicProperty\";\r\nimport { _createState } from \"./DynamicState\";\r\nimport { CFG_HANDLER_LINK, _cfgDeepCopy, getDynamicConfigHandler, throwInvalidAccess } from \"./DynamicSupport\";\r\n/**\r\n * Identifies a function which will be re-called whenever any of it's accessed configuration values\r\n * change.\r\n * @param configHandler - The callback that will be called for the initial request and then whenever any\r\n * accessed configuration changes are identified.\r\n */\r\nfunction _createAndUseHandler(state, configHandler) {\r\n    var handler = {\r\n        fn: configHandler,\r\n        rm: function () {\r\n            // Clear all references to the handler so it can be garbage collected\r\n            // This will also cause this handler to never get called and eventually removed\r\n            handler.fn = null;\r\n            state = null;\r\n            configHandler = null;\r\n        }\r\n    };\r\n    objDefine(handler, \"toJSON\", { v: function () { return \"WatcherHandler\" + (handler.fn ? \"\" : \"[X]\"); } });\r\n    state.use(handler, configHandler);\r\n    return handler;\r\n}\r\n/**\r\n * Creates the dynamic config handler and associates with the target config as the root object\r\n * @param target - The config that you want to be root of the dynamic config\r\n * @param inPlace - Should the passed config be converted in-place or a new proxy returned\r\n * @returns The existing dynamic handler or a new instance with the provided config values\r\n */\r\nfunction _createDynamicHandler(logger, target, inPlace) {\r\n    var dynamicHandler = getDynamicConfigHandler(target);\r\n    if (dynamicHandler) {\r\n        // The passed config is already dynamic so return it's tracker\r\n        return dynamicHandler;\r\n    }\r\n    var uid = createUniqueNamespace(\"dyncfg\", true);\r\n    var newTarget = (target && inPlace !== false) ? target : _cfgDeepCopy(target);\r\n    var theState;\r\n    function _notifyWatchers() {\r\n        theState.notify();\r\n    }\r\n    function _setValue(target, name, value) {\r\n        try {\r\n            target = _setDynamicProperty(theState, target, name, value);\r\n        }\r\n        catch (e) {\r\n            // Unable to convert to dynamic property so just leave as non-dynamic\r\n            _throwDynamicError(logger, name, \"Setting value\", e);\r\n        }\r\n        return target[name];\r\n    }\r\n    function _watch(configHandler) {\r\n        return _createAndUseHandler(theState, configHandler);\r\n    }\r\n    function _block(configHandler, allowUpdate) {\r\n        theState.use(null, function (details) {\r\n            var prevUpd = theState.upd;\r\n            try {\r\n                if (!isUndefined(allowUpdate)) {\r\n                    theState.upd = allowUpdate;\r\n                }\r\n                configHandler(details);\r\n            }\r\n            finally {\r\n                theState.upd = prevUpd;\r\n            }\r\n        });\r\n    }\r\n    function _ref(target, name) {\r\n        var _a;\r\n        // Make sure it's dynamic and mark as referenced with it's current value\r\n        return _setDynamicPropertyState(theState, target, name, (_a = {}, _a[0 /* _eSetDynamicPropertyFlags.inPlace */] = true, _a))[name];\r\n    }\r\n    function _rdOnly(target, name) {\r\n        var _a;\r\n        // Make sure it's dynamic and mark as readonly with it's current value\r\n        return _setDynamicPropertyState(theState, target, name, (_a = {}, _a[1 /* _eSetDynamicPropertyFlags.readOnly */] = true, _a))[name];\r\n    }\r\n    function _blkPropValue(target, name) {\r\n        var _a;\r\n        // Make sure it's dynamic and mark as readonly with it's current value\r\n        return _setDynamicPropertyState(theState, target, name, (_a = {}, _a[2 /* _eSetDynamicPropertyFlags.blockDynamicProperty */] = true, _a))[name];\r\n    }\r\n    function _applyDefaults(theConfig, defaultValues) {\r\n        if (defaultValues) {\r\n            // Resolve/apply the defaults\r\n            objForEachKey(defaultValues, function (name, value) {\r\n                // Sets the value and makes it dynamic (if it doesn't already exist)\r\n                _applyDefaultValue(cfgHandler, theConfig, name, value);\r\n            });\r\n        }\r\n        return theConfig;\r\n    }\r\n    var cfgHandler = {\r\n        uid: null,\r\n        cfg: newTarget,\r\n        logger: logger,\r\n        notify: _notifyWatchers,\r\n        set: _setValue,\r\n        setDf: _applyDefaults,\r\n        watch: _watch,\r\n        ref: _ref,\r\n        rdOnly: _rdOnly,\r\n        blkVal: _blkPropValue,\r\n        _block: _block\r\n    };\r\n    objDefine(cfgHandler, \"uid\", {\r\n        c: false,\r\n        e: false,\r\n        w: false,\r\n        v: uid\r\n    });\r\n    theState = _createState(cfgHandler);\r\n    // Setup tracking for all defined default keys\r\n    _makeDynamicObject(theState, newTarget, \"config\", \"Creating\");\r\n    return cfgHandler;\r\n}\r\n/**\r\n * Log an invalid access message to the console\r\n */\r\nfunction _logInvalidAccess(logger, message) {\r\n    if (logger) {\r\n        logger[_DYN_WARN_TO_CONSOLE /* @min:%2ewarnToConsole */](message);\r\n        logger[_DYN_THROW_INTERNAL /* @min:%2ethrowInternal */](2 /* eLoggingSeverity.WARNING */, 108 /* _eInternalMessageId.DynamicConfigException */, message);\r\n    }\r\n    else {\r\n        // We don't have a logger so just throw an exception\r\n        throwInvalidAccess(message);\r\n    }\r\n}\r\n/**\r\n * Create or return a dynamic version of the passed config, if it is not already dynamic\r\n * @param config - The config to be converted into a dynamic config\r\n * @param defaultConfig - The default values to apply on the config if the properties don't already exist\r\n * @param inPlace - Should the config be converted in-place into a dynamic config or a new instance returned, defaults to true\r\n * @returns The dynamic config handler for the config (whether new or existing)\r\n */\r\nexport function createDynamicConfig(config, defaultConfig, logger, inPlace) {\r\n    var dynamicHandler = _createDynamicHandler(logger, config || {}, inPlace);\r\n    if (defaultConfig) {\r\n        dynamicHandler.setDf(dynamicHandler.cfg, defaultConfig);\r\n    }\r\n    return dynamicHandler;\r\n}\r\n/**\r\n * Watch and track changes for accesses to the current config, the provided config MUST already be\r\n * a dynamic config or a child accessed via the dynamic config\r\n * @param logger - The logger instance to use if there is no existing handler\r\n * @returns A watcher handler instance that can be used to remove itself when being unloaded\r\n * @throws TypeError if the provided config is not a dynamic config instance\r\n */\r\nexport function onConfigChange(config, configHandler, logger) {\r\n    var handler = config[CFG_HANDLER_LINK] || config;\r\n    if (handler.cfg && (handler.cfg === config || handler.cfg[CFG_HANDLER_LINK] === handler)) {\r\n        return handler[_DYN_WATCH /* @min:%2ewatch */](configHandler);\r\n    }\r\n    _logInvalidAccess(logger, STR_NOT_DYNAMIC_ERROR + dumpObj(config));\r\n    return createDynamicConfig(config, null, logger)[_DYN_WATCH /* @min:%2ewatch */](configHandler);\r\n}\r\n//# sourceMappingURL=DynamicConfig.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { getInst } from \"@nevware21/ts-utils\";\r\nimport { _DYN_APPLY, _DYN_LENGTH } from \"../__DynamicConstants\";\r\nimport { STR_EVENTS_DISCARDED, STR_EVENTS_SEND_REQUEST, STR_EVENTS_SENT, STR_PERF_EVENT } from \"./InternalConstants\";\r\nvar listenerFuncs = [STR_EVENTS_SENT, STR_EVENTS_DISCARDED, STR_EVENTS_SEND_REQUEST, STR_PERF_EVENT];\r\nvar _aiNamespace = null;\r\nvar _debugListener;\r\nfunction _listenerProxyFunc(name, config) {\r\n    return function () {\r\n        var args = arguments;\r\n        var dbgExt = getDebugExt(config);\r\n        if (dbgExt) {\r\n            var listener = dbgExt.listener;\r\n            if (listener && listener[name]) {\r\n                listener[name][_DYN_APPLY /* @min:%2eapply */](listener, args);\r\n            }\r\n        }\r\n    };\r\n}\r\nfunction _getExtensionNamespace() {\r\n    // Cache the lookup of the global namespace object\r\n    var target = getInst(\"Microsoft\");\r\n    if (target) {\r\n        _aiNamespace = target[\"ApplicationInsights\"];\r\n    }\r\n    return _aiNamespace;\r\n}\r\nexport function getDebugExt(config) {\r\n    var ns = _aiNamespace;\r\n    if (!ns && config.disableDbgExt !== true) {\r\n        ns = _aiNamespace || _getExtensionNamespace();\r\n    }\r\n    return ns ? ns[\"ChromeDbgExt\"] : null;\r\n}\r\nexport function getDebugListener(config) {\r\n    if (!_debugListener) {\r\n        _debugListener = {};\r\n        for (var lp = 0; lp < listenerFuncs[_DYN_LENGTH /* @min:%2elength */]; lp++) {\r\n            _debugListener[listenerFuncs[lp]] = _listenerProxyFunc(listenerFuncs[lp], config);\r\n        }\r\n    }\r\n    return _debugListener;\r\n}\r\n//# sourceMappingURL=DbgExtensionUtils.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nvar _a;\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { dumpObj, isFunction, isUndefined } from \"@nevware21/ts-utils\";\r\nimport { createDynamicConfig, onConfigChange } from \"../Config/DynamicConfig\";\r\nimport { _DYN_DIAG_LOG, _DYN_LOGGER, _DYN_LOGGING_LEVEL_CONSOL4, _DYN_MESSAGE, _DYN_MESSAGE_ID, _DYN_PUSH, _DYN_REPLACE, _DYN_THROW_INTERNAL, _DYN_UNLOAD, _DYN_WARN_TO_CONSOLE } from \"../__DynamicConstants\";\r\nimport { getDebugExt } from \"./DbgExtensionUtils\";\r\nimport { getConsole, getJSON, hasJSON } from \"./EnvUtils\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\nvar STR_WARN_TO_CONSOLE = \"warnToConsole\";\r\n/**\r\n * For user non actionable traces use AI Internal prefix.\r\n */\r\nvar AiNonUserActionablePrefix = \"AI (Internal): \";\r\n/**\r\n * Prefix of the traces in portal.\r\n */\r\nvar AiUserActionablePrefix = \"AI: \";\r\n/**\r\n *  Session storage key for the prefix for the key indicating message type already logged\r\n */\r\nvar AIInternalMessagePrefix = \"AITR_\";\r\nvar defaultValues = {\r\n    loggingLevelConsole: 0,\r\n    loggingLevelTelemetry: 1,\r\n    maxMessageLimit: 25,\r\n    enableDebug: false\r\n};\r\nvar _logFuncs = (_a = {},\r\n    _a[0 /* eLoggingSeverity.DISABLED */] = null,\r\n    _a[1 /* eLoggingSeverity.CRITICAL */] = \"errorToConsole\",\r\n    _a[2 /* eLoggingSeverity.WARNING */] = STR_WARN_TO_CONSOLE,\r\n    _a[3 /* eLoggingSeverity.DEBUG */] = \"debugToConsole\",\r\n    _a);\r\nfunction _sanitizeDiagnosticText(text) {\r\n    if (text) {\r\n        return \"\\\"\" + text[_DYN_REPLACE /* @min:%2ereplace */](/\\\"/g, STR_EMPTY) + \"\\\"\";\r\n    }\r\n    return STR_EMPTY;\r\n}\r\nfunction _logToConsole(func, message) {\r\n    var theConsole = getConsole();\r\n    if (!!theConsole) {\r\n        var logFunc = \"log\";\r\n        if (theConsole[func]) {\r\n            logFunc = func;\r\n        }\r\n        if (isFunction(theConsole[logFunc])) {\r\n            theConsole[logFunc](message);\r\n        }\r\n    }\r\n}\r\nvar _InternalLogMessage = /** @class */ (function () {\r\n    function _InternalLogMessage(msgId, msg, isUserAct, properties) {\r\n        if (isUserAct === void 0) { isUserAct = false; }\r\n        var _self = this;\r\n        _self[_DYN_MESSAGE_ID /* @min:%2emessageId */] = msgId;\r\n        _self[_DYN_MESSAGE /* @min:%2emessage */] =\r\n            (isUserAct ? AiUserActionablePrefix : AiNonUserActionablePrefix) +\r\n                msgId;\r\n        var strProps = STR_EMPTY;\r\n        if (hasJSON()) {\r\n            strProps = getJSON().stringify(properties);\r\n        }\r\n        var diagnosticText = (msg ? \" message:\" + _sanitizeDiagnosticText(msg) : STR_EMPTY) +\r\n            (properties ? \" props:\" + _sanitizeDiagnosticText(strProps) : STR_EMPTY);\r\n        _self[_DYN_MESSAGE /* @min:%2emessage */] += diagnosticText;\r\n    }\r\n    _InternalLogMessage.dataType = \"MessageData\";\r\n    return _InternalLogMessage;\r\n}());\r\nexport { _InternalLogMessage };\r\nexport function safeGetLogger(core, config) {\r\n    return (core || {})[_DYN_LOGGER /* @min:%2elogger */] || new DiagnosticLogger(config);\r\n}\r\nvar DiagnosticLogger = /** @class */ (function () {\r\n    function DiagnosticLogger(config) {\r\n        this.identifier = \"DiagnosticLogger\";\r\n        /**\r\n         * The internal logging queue\r\n         */\r\n        this.queue = [];\r\n        /**\r\n         * Count of internal messages sent\r\n         */\r\n        var _messageCount = 0;\r\n        /**\r\n         * Holds information about what message types were already logged to console or sent to server.\r\n         */\r\n        var _messageLogged = {};\r\n        var _loggingLevelConsole;\r\n        var _loggingLevelTelemetry;\r\n        var _maxInternalMessageLimit;\r\n        var _enableDebug;\r\n        var _unloadHandler;\r\n        dynamicProto(DiagnosticLogger, this, function (_self) {\r\n            _unloadHandler = _setDefaultsFromConfig(config || {});\r\n            _self.consoleLoggingLevel = function () { return _loggingLevelConsole; };\r\n            /**\r\n             * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n             * @param severity - The severity of the log message\r\n             * @param message  - The log message.\r\n             */\r\n            _self[_DYN_THROW_INTERNAL /* @min:%2ethrowInternal */] = function (severity, msgId, msg, properties, isUserAct) {\r\n                if (isUserAct === void 0) { isUserAct = false; }\r\n                var message = new _InternalLogMessage(msgId, msg, isUserAct, properties);\r\n                if (_enableDebug) {\r\n                    throw dumpObj(message);\r\n                }\r\n                else {\r\n                    // Get the logging function and fallback to warnToConsole of for some reason errorToConsole doesn't exist\r\n                    var logFunc = _logFuncs[severity] || STR_WARN_TO_CONSOLE;\r\n                    if (!isUndefined(message[_DYN_MESSAGE /* @min:%2emessage */])) {\r\n                        if (isUserAct) {\r\n                            // check if this message type was already logged to console for this page view and if so, don't log it again\r\n                            var messageKey = +message[_DYN_MESSAGE_ID /* @min:%2emessageId */];\r\n                            if (!_messageLogged[messageKey] && _loggingLevelConsole >= severity) {\r\n                                _self[logFunc](message[_DYN_MESSAGE /* @min:%2emessage */]);\r\n                                _messageLogged[messageKey] = true;\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Only log traces if the console Logging Level is >= the throwInternal severity level\r\n                            if (_loggingLevelConsole >= severity) {\r\n                                _self[logFunc](message[_DYN_MESSAGE /* @min:%2emessage */]);\r\n                            }\r\n                        }\r\n                        _logInternalMessage(severity, message);\r\n                    }\r\n                    else {\r\n                        _debugExtMsg(\"throw\" + (severity === 1 /* eLoggingSeverity.CRITICAL */ ? \"Critical\" : \"Warning\"), message);\r\n                    }\r\n                }\r\n            };\r\n            _self.debugToConsole = function (message) {\r\n                _logToConsole(\"debug\", message);\r\n                _debugExtMsg(\"warning\", message);\r\n            };\r\n            _self[_DYN_WARN_TO_CONSOLE /* @min:%2ewarnToConsole */] = function (message) {\r\n                _logToConsole(\"warn\", message);\r\n                _debugExtMsg(\"warning\", message);\r\n            };\r\n            _self.errorToConsole = function (message) {\r\n                _logToConsole(\"error\", message);\r\n                _debugExtMsg(\"error\", message);\r\n            };\r\n            _self.resetInternalMessageCount = function () {\r\n                _messageCount = 0;\r\n                _messageLogged = {};\r\n            };\r\n            _self.logInternalMessage = _logInternalMessage;\r\n            _self[_DYN_UNLOAD /* @min:%2eunload */] = function (isAsync) {\r\n                _unloadHandler && _unloadHandler.rm();\r\n                _unloadHandler = null;\r\n            };\r\n            function _logInternalMessage(severity, message) {\r\n                if (_areInternalMessagesThrottled()) {\r\n                    return;\r\n                }\r\n                // check if this message type was already logged for this session and if so, don't log it again\r\n                var logMessage = true;\r\n                var messageKey = AIInternalMessagePrefix + message[_DYN_MESSAGE_ID /* @min:%2emessageId */];\r\n                // if the session storage is not available, limit to only one message type per page view\r\n                if (_messageLogged[messageKey]) {\r\n                    logMessage = false;\r\n                }\r\n                else {\r\n                    _messageLogged[messageKey] = true;\r\n                }\r\n                if (logMessage) {\r\n                    // Push the event in the internal queue\r\n                    if (severity <= _loggingLevelTelemetry) {\r\n                        _self.queue[_DYN_PUSH /* @min:%2epush */](message);\r\n                        _messageCount++;\r\n                        _debugExtMsg((severity === 1 /* eLoggingSeverity.CRITICAL */ ? \"error\" : \"warn\"), message);\r\n                    }\r\n                    // When throttle limit reached, send a special event\r\n                    if (_messageCount === _maxInternalMessageLimit) {\r\n                        var throttleLimitMessage = \"Internal events throttle limit per PageView reached for this app.\";\r\n                        var throttleMessage = new _InternalLogMessage(23 /* _eInternalMessageId.MessageLimitPerPVExceeded */, throttleLimitMessage, false);\r\n                        _self.queue[_DYN_PUSH /* @min:%2epush */](throttleMessage);\r\n                        if (severity === 1 /* eLoggingSeverity.CRITICAL */) {\r\n                            _self.errorToConsole(throttleLimitMessage);\r\n                        }\r\n                        else {\r\n                            _self[_DYN_WARN_TO_CONSOLE /* @min:%2ewarnToConsole */](throttleLimitMessage);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            function _setDefaultsFromConfig(config) {\r\n                // make sure the config is dynamic\r\n                return onConfigChange(createDynamicConfig(config, defaultValues, _self).cfg, function (details) {\r\n                    var config = details.cfg;\r\n                    _loggingLevelConsole = config[_DYN_LOGGING_LEVEL_CONSOL4 /* @min:%2eloggingLevelConsole */];\r\n                    _loggingLevelTelemetry = config.loggingLevelTelemetry;\r\n                    _maxInternalMessageLimit = config.maxMessageLimit;\r\n                    _enableDebug = config.enableDebug;\r\n                });\r\n            }\r\n            function _areInternalMessagesThrottled() {\r\n                return _messageCount >= _maxInternalMessageLimit;\r\n            }\r\n            function _debugExtMsg(name, data) {\r\n                var dbgExt = getDebugExt(config || {});\r\n                if (dbgExt && dbgExt[_DYN_DIAG_LOG /* @min:%2ediagLog */]) {\r\n                    dbgExt[_DYN_DIAG_LOG /* @min:%2ediagLog */](name, data);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * 0: OFF (default)\r\n     * 1: CRITICAL\r\n     * 2: \\>= WARNING\r\n     */\r\n    DiagnosticLogger.prototype.consoleLoggingLevel = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return 0;\r\n    };\r\n    /**\r\n     * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n     * @param severity  - The severity of the log message\r\n     * @param message - The log message.\r\n     */\r\n    DiagnosticLogger.prototype.throwInternal = function (severity, msgId, msg, properties, isUserAct) {\r\n        if (isUserAct === void 0) { isUserAct = false; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * This will write a debug message to the console if possible\r\n     * @param message - The debug message\r\n     */\r\n    DiagnosticLogger.prototype.debugToConsole = function (message) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * This will write a warning to the console if possible\r\n     * @param message  - The warning message\r\n     */\r\n    DiagnosticLogger.prototype.warnToConsole = function (message) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * This will write an error to the console if possible\r\n     * @param message - The warning message\r\n     */\r\n    DiagnosticLogger.prototype.errorToConsole = function (message) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Resets the internal message count\r\n     */\r\n    DiagnosticLogger.prototype.resetInternalMessageCount = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Logs a message to the internal queue.\r\n     * @param severity - The severity of the log message\r\n     * @param message - The message to log.\r\n     */\r\n    DiagnosticLogger.prototype.logInternalMessage = function (severity, message) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Unload and remove any state that this IDiagnosticLogger may be holding, this is generally called when the\r\n     * owning SDK is being unloaded.\r\n     * @param isAsync - Can the unload be performed asynchronously (default)\r\n     * @returns If the unload occurs synchronously then nothing should be returned, if happening asynchronously then\r\n     * the function should return an [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n     * / Promise to allow any listeners to wait for the operation to complete.\r\n     */\r\n    DiagnosticLogger.prototype.unload = function (isAsync) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return DiagnosticLogger;\r\n}());\r\nexport { DiagnosticLogger };\r\nfunction _getLogger(logger) {\r\n    return (logger || new DiagnosticLogger());\r\n}\r\n/**\r\n * This is a helper method which will call throwInternal on the passed logger, will throw exceptions in\r\n * debug mode or attempt to log the error as a console warning. This helper is provided mostly to better\r\n * support minification as logger.throwInternal() will not compress the publish \"throwInternal\" used throughout\r\n * the code.\r\n * @param logger - The Diagnostic Logger instance to use.\r\n * @param severity - The severity of the log message\r\n * @param message  - The log message.\r\n */\r\nexport function _throwInternal(logger, severity, msgId, msg, properties, isUserAct) {\r\n    if (isUserAct === void 0) { isUserAct = false; }\r\n    _getLogger(logger)[_DYN_THROW_INTERNAL /* @min:%2ethrowInternal */](severity, msgId, msg, properties, isUserAct);\r\n}\r\n/**\r\n * This is a helper method which will call warnToConsole on the passed logger with the provided message.\r\n * @param logger - The Diagnostic Logger instance to use.\r\n * @param message  - The log message.\r\n */\r\nexport function _warnToConsole(logger, message) {\r\n    _getLogger(logger)[_DYN_WARN_TO_CONSOLE /* @min:%2ewarnToConsole */](message);\r\n}\r\n/**\r\n * Logs a message to the internal queue.\r\n * @param logger - The Diagnostic Logger instance to use.\r\n * @param severity  - The severity of the log message\r\n * @param message - The message to log.\r\n */\r\nexport function _logInternalMessage(logger, severity, message) {\r\n    _getLogger(logger).logInternalMessage(severity, message);\r\n}\r\n//# sourceMappingURL=DiagnosticLogger.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { isArray, isFunction, objDefine, utcNow } from \"@nevware21/ts-utils\";\r\nimport { _DYN_GET_CTX, _DYN_IS_CHILD_EVT, _DYN_LENGTH, _DYN_NAME, _DYN_PUSH, _DYN_SET_CTX } from \"../__DynamicConstants\";\r\nimport { STR_GET_PERF_MGR, STR_PERF_EVENT } from \"./InternalConstants\";\r\nvar strExecutionContextKey = \"ctx\";\r\nvar strParentContextKey = \"ParentContextKey\";\r\nvar strChildrenContextKey = \"ChildrenContextKey\";\r\nvar _defaultPerfManager = null;\r\nvar PerfEvent = /** @class */ (function () {\r\n    function PerfEvent(name, payloadDetails, isAsync) {\r\n        var _self = this;\r\n        _self.start = utcNow();\r\n        _self[_DYN_NAME /* @min:%2ename */] = name;\r\n        _self.isAsync = isAsync;\r\n        _self[_DYN_IS_CHILD_EVT /* @min:%2eisChildEvt */] = function () { return false; };\r\n        if (isFunction(payloadDetails)) {\r\n            // Create an accessor to minimize the potential performance impact of executing the payloadDetails callback\r\n            var theDetails_1;\r\n            objDefine(_self, \"payload\", {\r\n                g: function () {\r\n                    // Delay the execution of the payloadDetails until needed\r\n                    if (!theDetails_1 && isFunction(payloadDetails)) {\r\n                        theDetails_1 = payloadDetails();\r\n                        // clear it out now so the referenced objects can be garbage collected\r\n                        payloadDetails = null;\r\n                    }\r\n                    return theDetails_1;\r\n                }\r\n            });\r\n        }\r\n        _self[_DYN_GET_CTX /* @min:%2egetCtx */] = function (key) {\r\n            if (key) {\r\n                // The parent and child links are located directly on the object (for better viewing in the DebugPlugin)\r\n                if (key === PerfEvent[strParentContextKey] || key === PerfEvent[strChildrenContextKey]) {\r\n                    return _self[key];\r\n                }\r\n                return (_self[strExecutionContextKey] || {})[key];\r\n            }\r\n            return null;\r\n        };\r\n        _self[_DYN_SET_CTX /* @min:%2esetCtx */] = function (key, value) {\r\n            if (key) {\r\n                // Put the parent and child links directly on the object (for better viewing in the DebugPlugin)\r\n                if (key === PerfEvent[strParentContextKey]) {\r\n                    // Simple assumption, if we are setting a parent then we must be a child\r\n                    if (!_self[key]) {\r\n                        _self[_DYN_IS_CHILD_EVT /* @min:%2eisChildEvt */] = function () { return true; };\r\n                    }\r\n                    _self[key] = value;\r\n                }\r\n                else if (key === PerfEvent[strChildrenContextKey]) {\r\n                    _self[key] = value;\r\n                }\r\n                else {\r\n                    var ctx = _self[strExecutionContextKey] = _self[strExecutionContextKey] || {};\r\n                    ctx[key] = value;\r\n                }\r\n            }\r\n        };\r\n        _self.complete = function () {\r\n            var childTime = 0;\r\n            var childEvts = _self[_DYN_GET_CTX /* @min:%2egetCtx */](PerfEvent[strChildrenContextKey]);\r\n            if (isArray(childEvts)) {\r\n                for (var lp = 0; lp < childEvts[_DYN_LENGTH /* @min:%2elength */]; lp++) {\r\n                    var childEvt = childEvts[lp];\r\n                    if (childEvt) {\r\n                        childTime += childEvt.time;\r\n                    }\r\n                }\r\n            }\r\n            _self.time = utcNow() - _self.start;\r\n            _self.exTime = _self.time - childTime;\r\n            _self.complete = function () { };\r\n        };\r\n    }\r\n    PerfEvent.ParentContextKey = \"parent\";\r\n    PerfEvent.ChildrenContextKey = \"childEvts\";\r\n    return PerfEvent;\r\n}());\r\nexport { PerfEvent };\r\nvar PerfManager = /** @class */ (function () {\r\n    function PerfManager(manager) {\r\n        /**\r\n         * General bucket used for execution context set and retrieved via setCtx() and getCtx.\r\n         * Defined as private so it can be visualized via the DebugPlugin\r\n         */\r\n        this.ctx = {};\r\n        dynamicProto(PerfManager, this, function (_self) {\r\n            _self.create = function (src, payloadDetails, isAsync) {\r\n                // TODO (@MSNev): at some point we will want to add additional configuration to \"select\" which events to instrument\r\n                // for now this is just a simple do everything.\r\n                return new PerfEvent(src, payloadDetails, isAsync);\r\n            };\r\n            _self.fire = function (perfEvent) {\r\n                if (perfEvent) {\r\n                    perfEvent.complete();\r\n                    if (manager && isFunction(manager[STR_PERF_EVENT /* @min:%2eperfEvent */])) {\r\n                        manager[STR_PERF_EVENT /* @min:%2eperfEvent */](perfEvent);\r\n                    }\r\n                }\r\n            };\r\n            _self[_DYN_SET_CTX /* @min:%2esetCtx */] = function (key, value) {\r\n                if (key) {\r\n                    var ctx = _self[strExecutionContextKey] = _self[strExecutionContextKey] || {};\r\n                    ctx[key] = value;\r\n                }\r\n            };\r\n            _self[_DYN_GET_CTX /* @min:%2egetCtx */] = function (key) {\r\n                return (_self[strExecutionContextKey] || {})[key];\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Create a new event and start timing, the manager may return null/undefined to indicate that it does not\r\n     * want to monitor this source event.\r\n     * @param src - The source name of the event\r\n     * @param payloadDetails - An optional callback function to fetch the payload details for the event.\r\n     * @param isAsync - Is the event occurring from a async event\r\n     */\r\n    PerfManager.prototype.create = function (src, payload, isAsync) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Complete the perfEvent and fire any notifications.\r\n     * @param perfEvent - Fire the event which will also complete the passed event\r\n     */\r\n    PerfManager.prototype.fire = function (perfEvent) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Set an execution context value\r\n     * @param key - The context key name\r\n     * @param value - The value\r\n     */\r\n    PerfManager.prototype.setCtx = function (key, value) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Get the execution context value\r\n     * @param key - The context key\r\n     */\r\n    PerfManager.prototype.getCtx = function (key) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return PerfManager;\r\n}());\r\nexport { PerfManager };\r\nvar doPerfActiveKey = \"CoreUtils.doPerf\";\r\n/**\r\n * Helper function to wrap a function with a perf event\r\n * @param mgrSource - The Performance Manager or a Performance provider source (may be null)\r\n * @param getSource - The callback to create the source name for the event (if perf monitoring is enabled)\r\n * @param func - The function to call and measure\r\n * @param details - A function to return the payload details\r\n * @param isAsync - Is the event / function being call asynchronously or synchronously\r\n */\r\nexport function doPerf(mgrSource, getSource, func, details, isAsync) {\r\n    if (mgrSource) {\r\n        var perfMgr = mgrSource;\r\n        if (perfMgr[STR_GET_PERF_MGR]) {\r\n            // Looks like a perf manager provider object\r\n            perfMgr = perfMgr[STR_GET_PERF_MGR]();\r\n        }\r\n        if (perfMgr) {\r\n            var perfEvt = void 0;\r\n            var currentActive = perfMgr[_DYN_GET_CTX /* @min:%2egetCtx */](doPerfActiveKey);\r\n            try {\r\n                perfEvt = perfMgr.create(getSource(), details, isAsync);\r\n                if (perfEvt) {\r\n                    if (currentActive && perfEvt[_DYN_SET_CTX /* @min:%2esetCtx */]) {\r\n                        perfEvt[_DYN_SET_CTX /* @min:%2esetCtx */](PerfEvent[strParentContextKey], currentActive);\r\n                        if (currentActive[_DYN_GET_CTX /* @min:%2egetCtx */] && currentActive[_DYN_SET_CTX /* @min:%2esetCtx */]) {\r\n                            var children = currentActive[_DYN_GET_CTX /* @min:%2egetCtx */](PerfEvent[strChildrenContextKey]);\r\n                            if (!children) {\r\n                                children = [];\r\n                                currentActive[_DYN_SET_CTX /* @min:%2esetCtx */](PerfEvent[strChildrenContextKey], children);\r\n                            }\r\n                            children[_DYN_PUSH /* @min:%2epush */](perfEvt);\r\n                        }\r\n                    }\r\n                    // Set this event as the active event now\r\n                    perfMgr[_DYN_SET_CTX /* @min:%2esetCtx */](doPerfActiveKey, perfEvt);\r\n                    return func(perfEvt);\r\n                }\r\n            }\r\n            catch (ex) {\r\n                if (perfEvt && perfEvt[_DYN_SET_CTX /* @min:%2esetCtx */]) {\r\n                    perfEvt[_DYN_SET_CTX /* @min:%2esetCtx */](\"exception\", ex);\r\n                }\r\n            }\r\n            finally {\r\n                // fire the perf event\r\n                if (perfEvt) {\r\n                    perfMgr.fire(perfEvt);\r\n                }\r\n                // Reset the active event to the previous value\r\n                perfMgr[_DYN_SET_CTX /* @min:%2esetCtx */](doPerfActiveKey, currentActive);\r\n            }\r\n        }\r\n    }\r\n    return func();\r\n}\r\n/**\r\n * Set the global performance manager to use when there is no core instance or it has not been initialized yet.\r\n * @param perfManager - The IPerfManager instance to use when no performance manager is supplied.\r\n */\r\nexport function setGblPerfMgr(perfManager) {\r\n    _defaultPerfManager = perfManager;\r\n}\r\n/**\r\n * Get the current global performance manager that will be used with no performance manager is supplied.\r\n * @returns - The current default manager\r\n */\r\nexport function getGblPerfMgr() {\r\n    return _defaultPerfManager;\r\n}\r\n//# sourceMappingURL=PerfManager.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { arrForEach, isFunction } from \"@nevware21/ts-utils\";\r\nimport { _DYN_GET_NEXT, _DYN_GET_PLUGIN, _DYN_INITIALIZE, _DYN_IS_INITIALIZED, _DYN_LENGTH, _DYN_NAME, _DYN_PUSH, _DYN_SET_NEXT_PLUGIN, _DYN_TEARDOWN, _DYN_TRACE_FLAGS, _DYN__DO_TEARDOWN } from \"../__DynamicConstants\";\r\nimport { createElmNodeData } from \"./DataCacheHelper\";\r\nimport { STR_CORE, STR_PRIORITY, STR_PROCESS_TELEMETRY } from \"./InternalConstants\";\r\nimport { isValidSpanId, isValidTraceId } from \"./W3cTraceParent\";\r\nvar pluginStateData = createElmNodeData(\"plugin\");\r\nexport function _getPluginState(plugin) {\r\n    return pluginStateData.get(plugin, \"state\", {}, true);\r\n}\r\n/**\r\n * Initialize the queue of plugins\r\n * @param plugins - The array of plugins to initialize and setting of the next plugin\r\n * @param config - The current config for the instance\r\n * @param core - THe current core instance\r\n * @param extensions - The extensions\r\n */\r\nexport function initializePlugins(processContext, extensions) {\r\n    // Set the next plugin and identified the uninitialized plugins\r\n    var initPlugins = [];\r\n    var lastPlugin = null;\r\n    var proxy = processContext[_DYN_GET_NEXT /* @min:%2egetNext */]();\r\n    var pluginState;\r\n    while (proxy) {\r\n        var thePlugin = proxy[_DYN_GET_PLUGIN /* @min:%2egetPlugin */]();\r\n        if (thePlugin) {\r\n            if (lastPlugin && lastPlugin[_DYN_SET_NEXT_PLUGIN /* @min:%2esetNextPlugin */] && thePlugin[STR_PROCESS_TELEMETRY /* @min:%2eprocessTelemetry */]) {\r\n                // Set this plugin as the next for the previous one\r\n                lastPlugin[_DYN_SET_NEXT_PLUGIN /* @min:%2esetNextPlugin */](thePlugin);\r\n            }\r\n            pluginState = _getPluginState(thePlugin);\r\n            var isInitialized = !!pluginState[_DYN_IS_INITIALIZED /* @min:%2eisInitialized */];\r\n            if (thePlugin[_DYN_IS_INITIALIZED /* @min:%2eisInitialized */]) {\r\n                isInitialized = thePlugin[_DYN_IS_INITIALIZED /* @min:%2eisInitialized */]();\r\n            }\r\n            if (!isInitialized) {\r\n                initPlugins[_DYN_PUSH /* @min:%2epush */](thePlugin);\r\n            }\r\n            lastPlugin = thePlugin;\r\n            proxy = proxy[_DYN_GET_NEXT /* @min:%2egetNext */]();\r\n        }\r\n    }\r\n    // Now initialize the plugins\r\n    arrForEach(initPlugins, function (thePlugin) {\r\n        var core = processContext[STR_CORE /* @min:%2ecore */]();\r\n        thePlugin[_DYN_INITIALIZE /* @min:%2einitialize */](processContext.getCfg(), core, extensions, processContext[_DYN_GET_NEXT /* @min:%2egetNext */]());\r\n        pluginState = _getPluginState(thePlugin);\r\n        // Only add the core to the state if the plugin didn't set it (doesn't extend from BaseTelemetryPlugin)\r\n        if (!thePlugin[STR_CORE] && !pluginState[STR_CORE]) {\r\n            pluginState[STR_CORE] = core;\r\n        }\r\n        pluginState[_DYN_IS_INITIALIZED /* @min:%2eisInitialized */] = true;\r\n        delete pluginState[_DYN_TEARDOWN /* @min:%2eteardown */];\r\n    });\r\n}\r\nexport function sortPlugins(plugins) {\r\n    // Sort by priority\r\n    return plugins.sort(function (extA, extB) {\r\n        var result = 0;\r\n        if (extB) {\r\n            var bHasProcess = extB[STR_PROCESS_TELEMETRY];\r\n            if (extA[STR_PROCESS_TELEMETRY]) {\r\n                result = bHasProcess ? extA[STR_PRIORITY] - extB[STR_PRIORITY] : 1;\r\n            }\r\n            else if (bHasProcess) {\r\n                result = -1;\r\n            }\r\n        }\r\n        else {\r\n            result = extA ? 1 : -1;\r\n        }\r\n        return result;\r\n    });\r\n    // sort complete\r\n}\r\n/**\r\n * Teardown / Unload helper to perform teardown/unloading operations for the provided components synchronously or asynchronously, this will call any\r\n * _doTeardown() or _doUnload() functions on the provided components to allow them to finish removal.\r\n * @param components - The components you want to unload\r\n * @param unloadCtx - This is the context that should be used during unloading.\r\n * @param unloadState - The details / state of the unload process, it holds details like whether it should be unloaded synchronously or asynchronously and the reason for the unload.\r\n * @param asyncCallback - An optional callback that the plugin must call if it returns true to inform the caller that it has completed any async unload/teardown operations.\r\n * @returns boolean - true if the plugin has or will call asyncCallback, this allows the plugin to perform any asynchronous operations.\r\n */\r\nexport function unloadComponents(components, unloadCtx, unloadState, asyncCallback) {\r\n    var idx = 0;\r\n    function _doUnload() {\r\n        while (idx < components[_DYN_LENGTH /* @min:%2elength */]) {\r\n            var component = components[idx++];\r\n            if (component) {\r\n                var func = component._doUnload || component[_DYN__DO_TEARDOWN /* @min:%2e_doTeardown */];\r\n                if (isFunction(func)) {\r\n                    if (func.call(component, unloadCtx, unloadState, _doUnload) === true) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return _doUnload();\r\n}\r\n/**\r\n * Creates a IDistributedTraceContext which optionally also \"sets\" the value on a parent\r\n * @param parentCtx - An optional parent distributed trace instance\r\n * @returns A new IDistributedTraceContext instance that uses an internal temporary object\r\n */\r\nexport function createDistributedTraceContext(parentCtx) {\r\n    var trace = {};\r\n    return {\r\n        getName: function () {\r\n            return trace[_DYN_NAME /* @min:%2ename */];\r\n        },\r\n        setName: function (newValue) {\r\n            parentCtx && parentCtx.setName(newValue);\r\n            trace[_DYN_NAME /* @min:%2ename */] = newValue;\r\n        },\r\n        getTraceId: function () {\r\n            return trace.traceId;\r\n        },\r\n        setTraceId: function (newValue) {\r\n            parentCtx && parentCtx.setTraceId(newValue);\r\n            if (isValidTraceId(newValue)) {\r\n                trace.traceId = newValue;\r\n            }\r\n        },\r\n        getSpanId: function () {\r\n            return trace.spanId;\r\n        },\r\n        setSpanId: function (newValue) {\r\n            parentCtx && parentCtx.setSpanId(newValue);\r\n            if (isValidSpanId(newValue)) {\r\n                trace.spanId = newValue;\r\n            }\r\n        },\r\n        getTraceFlags: function () {\r\n            return trace[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\r\n        },\r\n        setTraceFlags: function (newTraceFlags) {\r\n            parentCtx && parentCtx.setTraceFlags(newTraceFlags);\r\n            trace[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = newTraceFlags;\r\n        }\r\n    };\r\n}\r\n//# sourceMappingURL=TelemetryHelpers.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nimport { arrForEach, dumpObj, isArray, isFunction, isNullOrUndefined, isUndefined, objForEachKey, objFreeze, objKeys } from \"@nevware21/ts-utils\";\r\nimport { _applyDefaultValue } from \"../Config/ConfigDefaults\";\r\nimport { createDynamicConfig } from \"../Config/DynamicConfig\";\r\nimport { _DYN_CREATE_NEW, _DYN_DIAG_LOG, _DYN_GET_NEXT, _DYN_GET_PLUGIN, _DYN_IDENTIFIER, _DYN_IS_INITIALIZED, _DYN_LENGTH, _DYN_LOGGER, _DYN_PROCESS_NEXT, _DYN_PUSH, _DYN_SET_NEXT_PLUGIN, _DYN_TEARDOWN, _DYN_UNLOAD, _DYN_UPDATE } from \"../__DynamicConstants\";\r\nimport { _throwInternal, safeGetLogger } from \"./DiagnosticLogger\";\r\nimport { proxyFunctions } from \"./HelperFuncs\";\r\nimport { STR_CORE, STR_DISABLED, STR_EMPTY, STR_EXTENSION_CONFIG, STR_PRIORITY, STR_PROCESS_TELEMETRY } from \"./InternalConstants\";\r\nimport { doPerf } from \"./PerfManager\";\r\nimport { _getPluginState } from \"./TelemetryHelpers\";\r\nvar strTelemetryPluginChain = \"TelemetryPluginChain\";\r\nvar strHasRunFlags = \"_hasRun\";\r\nvar strGetTelCtx = \"_getTelCtx\";\r\nvar _chainId = 0;\r\nfunction _getNextProxyStart(proxy, core, startAt) {\r\n    while (proxy) {\r\n        if (proxy[_DYN_GET_PLUGIN /* @min:%2egetPlugin */]() === startAt) {\r\n            return proxy;\r\n        }\r\n        proxy = proxy[_DYN_GET_NEXT /* @min:%2egetNext */]();\r\n    }\r\n    // This wasn't found in the existing chain so create an isolated one with just this plugin\r\n    return createTelemetryProxyChain([startAt], core.config || {}, core);\r\n}\r\n/**\r\n * @ignore\r\n * @param telemetryChain\r\n * @param dynamicHandler\r\n * @param core\r\n * @param startAt - Identifies the next plugin to execute, if null there is no \"next\" plugin and if undefined it should assume the start of the chain\r\n * @returns\r\n */\r\nfunction _createInternalContext(telemetryChain, dynamicHandler, core, startAt) {\r\n    // We have a special case where we want to start execution from this specific plugin\r\n    // or we simply reuse the existing telemetry plugin chain (normal execution case)\r\n    var _nextProxy = null; // By Default set as no next plugin\r\n    var _onComplete = [];\r\n    if (!dynamicHandler) {\r\n        dynamicHandler = createDynamicConfig({}, null, core[_DYN_LOGGER /* @min:%2elogger */]);\r\n    }\r\n    if (startAt !== null) {\r\n        // There is no next element (null) vs not defined (undefined) so use the full chain\r\n        _nextProxy = startAt ? _getNextProxyStart(telemetryChain, core, startAt) : telemetryChain;\r\n    }\r\n    var context = {\r\n        _next: _moveNext,\r\n        ctx: {\r\n            core: function () {\r\n                return core;\r\n            },\r\n            diagLog: function () {\r\n                return safeGetLogger(core, dynamicHandler.cfg);\r\n            },\r\n            getCfg: function () {\r\n                return dynamicHandler.cfg;\r\n            },\r\n            getExtCfg: _resolveExtCfg,\r\n            getConfig: _getConfig,\r\n            hasNext: function () {\r\n                return !!_nextProxy;\r\n            },\r\n            getNext: function () {\r\n                return _nextProxy;\r\n            },\r\n            setNext: function (nextPlugin) {\r\n                _nextProxy = nextPlugin;\r\n            },\r\n            iterate: _iterateChain,\r\n            onComplete: _addOnComplete\r\n        }\r\n    };\r\n    function _addOnComplete(onComplete, that) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        if (onComplete) {\r\n            _onComplete[_DYN_PUSH /* @min:%2epush */]({\r\n                func: onComplete,\r\n                self: !isUndefined(that) ? that : context.ctx,\r\n                args: args\r\n            });\r\n        }\r\n    }\r\n    function _moveNext() {\r\n        var nextProxy = _nextProxy;\r\n        // Automatically move to the next plugin\r\n        _nextProxy = nextProxy ? nextProxy[_DYN_GET_NEXT /* @min:%2egetNext */]() : null;\r\n        if (!nextProxy) {\r\n            var onComplete = _onComplete;\r\n            if (onComplete && onComplete[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                arrForEach(onComplete, function (completeDetails) {\r\n                    try {\r\n                        completeDetails.func.call(completeDetails.self, completeDetails.args);\r\n                    }\r\n                    catch (e) {\r\n                        _throwInternal(core[_DYN_LOGGER /* @min:%2elogger */], 2 /* eLoggingSeverity.WARNING */, 73 /* _eInternalMessageId.PluginException */, \"Unexpected Exception during onComplete - \" + dumpObj(e));\r\n                    }\r\n                });\r\n                _onComplete = [];\r\n            }\r\n        }\r\n        return nextProxy;\r\n    }\r\n    function _getExtCfg(identifier, createIfMissing) {\r\n        var idCfg = null;\r\n        var cfg = dynamicHandler.cfg;\r\n        if (cfg && identifier) {\r\n            var extCfg = cfg[STR_EXTENSION_CONFIG /* @min:%2eextensionConfig */];\r\n            if (!extCfg && createIfMissing) {\r\n                extCfg = {};\r\n            }\r\n            // Always set the value so that the property always exists\r\n            cfg[STR_EXTENSION_CONFIG] = extCfg; // Note: it is valid for the \"value\" to be undefined\r\n            // Calling `ref()` has a side effect of causing the referenced property to become dynamic  (if not already)\r\n            extCfg = dynamicHandler.ref(cfg, STR_EXTENSION_CONFIG);\r\n            if (extCfg) {\r\n                idCfg = extCfg[identifier];\r\n                if (!idCfg && createIfMissing) {\r\n                    idCfg = {};\r\n                }\r\n                // Always set the value so that the property always exists\r\n                extCfg[identifier] = idCfg; // Note: it is valid for the \"value\" to be undefined\r\n                // Calling `ref()` has a side effect of causing the referenced property to become dynamic  (if not already)\r\n                idCfg = dynamicHandler.ref(extCfg, identifier);\r\n            }\r\n        }\r\n        return idCfg;\r\n    }\r\n    function _resolveExtCfg(identifier, defaultValues) {\r\n        var newConfig = _getExtCfg(identifier, true);\r\n        if (defaultValues) {\r\n            // Enumerate over the defaultValues and if not already populated attempt to\r\n            // find a value from the root config or use the default value\r\n            objForEachKey(defaultValues, function (field, defaultValue) {\r\n                // for each unspecified field, set the default value\r\n                if (isNullOrUndefined(newConfig[field])) {\r\n                    var cfgValue = dynamicHandler.cfg[field];\r\n                    if (cfgValue || !isNullOrUndefined(cfgValue)) {\r\n                        newConfig[field] = cfgValue;\r\n                    }\r\n                }\r\n                _applyDefaultValue(dynamicHandler, newConfig, field, defaultValue);\r\n            });\r\n        }\r\n        return dynamicHandler.setDf(newConfig, defaultValues);\r\n    }\r\n    function _getConfig(identifier, field, defaultValue) {\r\n        if (defaultValue === void 0) { defaultValue = false; }\r\n        var theValue;\r\n        var extConfig = _getExtCfg(identifier, false);\r\n        var rootConfig = dynamicHandler.cfg;\r\n        if (extConfig && (extConfig[field] || !isNullOrUndefined(extConfig[field]))) {\r\n            theValue = extConfig[field];\r\n        }\r\n        else if (rootConfig[field] || !isNullOrUndefined(rootConfig[field])) {\r\n            theValue = rootConfig[field];\r\n        }\r\n        return (theValue || !isNullOrUndefined(theValue)) ? theValue : defaultValue;\r\n    }\r\n    function _iterateChain(cb) {\r\n        // Keep processing until we reach the end of the chain\r\n        var nextPlugin;\r\n        while (!!(nextPlugin = context._next())) {\r\n            var plugin = nextPlugin[_DYN_GET_PLUGIN /* @min:%2egetPlugin */]();\r\n            if (plugin) {\r\n                // callback with the current on\r\n                cb(plugin);\r\n            }\r\n        }\r\n    }\r\n    return context;\r\n}\r\n/**\r\n * Creates a new Telemetry Item context with the current config, core and plugin execution chain\r\n * @param plugins - The plugin instances that will be executed\r\n * @param config - The current config\r\n * @param core - The current core instance\r\n * @param startAt - Identifies the next plugin to execute, if null there is no \"next\" plugin and if undefined it should assume the start of the chain\r\n */\r\nexport function createProcessTelemetryContext(telemetryChain, cfg, core, startAt) {\r\n    var config = createDynamicConfig(cfg);\r\n    var internalContext = _createInternalContext(telemetryChain, config, core, startAt);\r\n    var context = internalContext.ctx;\r\n    function _processNext(env) {\r\n        var nextPlugin = internalContext._next();\r\n        if (nextPlugin) {\r\n            // Run the next plugin which will call \"processNext()\"\r\n            nextPlugin[STR_PROCESS_TELEMETRY /* @min:%2eprocessTelemetry */](env, context);\r\n        }\r\n        return !nextPlugin;\r\n    }\r\n    function _createNew(plugins, startAt) {\r\n        if (plugins === void 0) { plugins = null; }\r\n        if (isArray(plugins)) {\r\n            plugins = createTelemetryProxyChain(plugins, config.cfg, core, startAt);\r\n        }\r\n        return createProcessTelemetryContext(plugins || context[_DYN_GET_NEXT /* @min:%2egetNext */](), config.cfg, core, startAt);\r\n    }\r\n    context[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */] = _processNext;\r\n    context[_DYN_CREATE_NEW /* @min:%2ecreateNew */] = _createNew;\r\n    return context;\r\n}\r\n/**\r\n * Creates a new Telemetry Item context with the current config, core and plugin execution chain for handling the unloading of the chain\r\n * @param plugins - The plugin instances that will be executed\r\n * @param config - The current config\r\n * @param core - The current core instance\r\n * @param startAt - Identifies the next plugin to execute, if null there is no \"next\" plugin and if undefined it should assume the start of the chain\r\n */\r\nexport function createProcessTelemetryUnloadContext(telemetryChain, core, startAt) {\r\n    var config = createDynamicConfig(core.config);\r\n    var internalContext = _createInternalContext(telemetryChain, config, core, startAt);\r\n    var context = internalContext.ctx;\r\n    function _processNext(unloadState) {\r\n        var nextPlugin = internalContext._next();\r\n        nextPlugin && nextPlugin[_DYN_UNLOAD /* @min:%2eunload */](context, unloadState);\r\n        return !nextPlugin;\r\n    }\r\n    function _createNew(plugins, startAt) {\r\n        if (plugins === void 0) { plugins = null; }\r\n        if (isArray(plugins)) {\r\n            plugins = createTelemetryProxyChain(plugins, config.cfg, core, startAt);\r\n        }\r\n        return createProcessTelemetryUnloadContext(plugins || context[_DYN_GET_NEXT /* @min:%2egetNext */](), core, startAt);\r\n    }\r\n    context[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */] = _processNext;\r\n    context[_DYN_CREATE_NEW /* @min:%2ecreateNew */] = _createNew;\r\n    return context;\r\n}\r\n/**\r\n * Creates a new Telemetry Item context with the current config, core and plugin execution chain for updating the configuration\r\n * @param plugins - The plugin instances that will be executed\r\n * @param config - The current config\r\n * @param core - The current core instance\r\n * @param startAt - Identifies the next plugin to execute, if null there is no \"next\" plugin and if undefined it should assume the start of the chain\r\n */\r\nexport function createProcessTelemetryUpdateContext(telemetryChain, core, startAt) {\r\n    var config = createDynamicConfig(core.config);\r\n    var internalContext = _createInternalContext(telemetryChain, config, core, startAt);\r\n    var context = internalContext.ctx;\r\n    function _processNext(updateState) {\r\n        return context.iterate(function (plugin) {\r\n            if (isFunction(plugin[_DYN_UPDATE /* @min:%2eupdate */])) {\r\n                plugin[_DYN_UPDATE /* @min:%2eupdate */](context, updateState);\r\n            }\r\n        });\r\n    }\r\n    function _createNew(plugins, startAt) {\r\n        if (plugins === void 0) { plugins = null; }\r\n        if (isArray(plugins)) {\r\n            plugins = createTelemetryProxyChain(plugins, config.cfg, core, startAt);\r\n        }\r\n        return createProcessTelemetryUpdateContext(plugins || context[_DYN_GET_NEXT /* @min:%2egetNext */](), core, startAt);\r\n    }\r\n    context[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */] = _processNext;\r\n    context[_DYN_CREATE_NEW /* @min:%2ecreateNew */] = _createNew;\r\n    return context;\r\n}\r\n/**\r\n * Creates an execution chain from the array of plugins\r\n * @param plugins - The array of plugins that will be executed in this order\r\n * @param defItemCtx - The default execution context to use when no telemetry context is passed to processTelemetry(), this\r\n * should be for legacy plugins only. Currently, only used for passing the current core instance and to provide better error\r\n * reporting (hasRun) when errors occur.\r\n */\r\nexport function createTelemetryProxyChain(plugins, config, core, startAt) {\r\n    var firstProxy = null;\r\n    var add = startAt ? false : true;\r\n    if (isArray(plugins) && plugins[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n        // Create the proxies and wire up the next plugin chain\r\n        var lastProxy_1 = null;\r\n        arrForEach(plugins, function (thePlugin) {\r\n            if (!add && startAt === thePlugin) {\r\n                add = true;\r\n            }\r\n            if (add && thePlugin && isFunction(thePlugin[STR_PROCESS_TELEMETRY /* @min:%2eprocessTelemetry */])) {\r\n                // Only add plugins that are processors\r\n                var newProxy = createTelemetryPluginProxy(thePlugin, config, core);\r\n                if (!firstProxy) {\r\n                    firstProxy = newProxy;\r\n                }\r\n                if (lastProxy_1) {\r\n                    // Set this new proxy as the next for the previous one\r\n                    lastProxy_1._setNext(newProxy);\r\n                }\r\n                lastProxy_1 = newProxy;\r\n            }\r\n        });\r\n    }\r\n    if (startAt && !firstProxy) {\r\n        // Special case where the \"startAt\" was not in the original list of plugins\r\n        return createTelemetryProxyChain([startAt], config, core);\r\n    }\r\n    return firstProxy;\r\n}\r\n/**\r\n * Create the processing telemetry proxy instance, the proxy is used to abstract the current plugin to allow monitoring and\r\n * execution plugins while passing around the dynamic execution state (IProcessTelemetryContext), the proxy instance no longer\r\n * contains any execution state and can be reused between requests (this was not the case for 2.7.2 and earlier with the\r\n * TelemetryPluginChain class).\r\n * @param plugin - The plugin instance to proxy\r\n * @param config - The default execution context to use when no telemetry context is passed to processTelemetry(), this\r\n * should be for legacy plugins only. Currently, only used for passing the current core instance and to provide better error\r\n * reporting (hasRun) when errors occur.\r\n * @returns\r\n */\r\nexport function createTelemetryPluginProxy(plugin, config, core) {\r\n    var nextProxy = null;\r\n    var hasProcessTelemetry = isFunction(plugin[STR_PROCESS_TELEMETRY /* @min:%2eprocessTelemetry */]);\r\n    var hasSetNext = isFunction(plugin[_DYN_SET_NEXT_PLUGIN /* @min:%2esetNextPlugin */]);\r\n    var chainId;\r\n    if (plugin) {\r\n        chainId = plugin[_DYN_IDENTIFIER /* @min:%2eidentifier */] + \"-\" + plugin[STR_PRIORITY /* @min:%2epriority */] + \"-\" + _chainId++;\r\n    }\r\n    else {\r\n        chainId = \"Unknown-0-\" + _chainId++;\r\n    }\r\n    var proxyChain = {\r\n        getPlugin: function () {\r\n            return plugin;\r\n        },\r\n        getNext: function () {\r\n            return nextProxy;\r\n        },\r\n        processTelemetry: _processTelemetry,\r\n        unload: _unloadPlugin,\r\n        update: _updatePlugin,\r\n        _id: chainId,\r\n        _setNext: function (nextPlugin) {\r\n            nextProxy = nextPlugin;\r\n        }\r\n    };\r\n    function _getTelCtx() {\r\n        var itemCtx;\r\n        // Looks like a plugin didn't pass the (optional) context, so create a new one\r\n        if (plugin && isFunction(plugin[strGetTelCtx])) {\r\n            // This plugin extends from the BaseTelemetryPlugin so lets use it\r\n            itemCtx = plugin[strGetTelCtx]();\r\n        }\r\n        if (!itemCtx) {\r\n            // Create a temporary one\r\n            itemCtx = createProcessTelemetryContext(proxyChain, config, core);\r\n        }\r\n        return itemCtx;\r\n    }\r\n    function _processChain(itemCtx, processPluginFn, name, details, isAsync) {\r\n        var hasRun = false;\r\n        var identifier = plugin ? plugin[_DYN_IDENTIFIER /* @min:%2eidentifier */] : strTelemetryPluginChain;\r\n        var hasRunContext = itemCtx[strHasRunFlags];\r\n        if (!hasRunContext) {\r\n            // Assign and populate\r\n            hasRunContext = itemCtx[strHasRunFlags] = {};\r\n        }\r\n        // Ensure that we keep the context in sync\r\n        itemCtx.setNext(nextProxy);\r\n        if (plugin) {\r\n            doPerf(itemCtx[STR_CORE /* @min:%2ecore */](), function () { return identifier + \":\" + name; }, function () {\r\n                // Mark this component as having run\r\n                hasRunContext[chainId] = true;\r\n                try {\r\n                    // Set a flag on the next plugin so we know if it was attempted to be executed\r\n                    var nextId = nextProxy ? nextProxy._id : STR_EMPTY;\r\n                    if (nextId) {\r\n                        hasRunContext[nextId] = false;\r\n                    }\r\n                    hasRun = processPluginFn(itemCtx);\r\n                }\r\n                catch (error) {\r\n                    var hasNextRun = nextProxy ? hasRunContext[nextProxy._id] : true;\r\n                    if (hasNextRun) {\r\n                        // The next plugin after us has already run so set this one as complete\r\n                        hasRun = true;\r\n                    }\r\n                    if (!nextProxy || !hasNextRun) {\r\n                        // Either we have no next plugin or the current one did not attempt to call the next plugin\r\n                        // Which means the current one is the root of the failure so log/report this failure\r\n                        _throwInternal(itemCtx[_DYN_DIAG_LOG /* @min:%2ediagLog */](), 1 /* eLoggingSeverity.CRITICAL */, 73 /* _eInternalMessageId.PluginException */, \"Plugin [\" + identifier + \"] failed during \" + name + \" - \" + dumpObj(error) + \", run flags: \" + dumpObj(hasRunContext));\r\n                    }\r\n                }\r\n            }, details, isAsync);\r\n        }\r\n        return hasRun;\r\n    }\r\n    function _processTelemetry(env, itemCtx) {\r\n        itemCtx = itemCtx || _getTelCtx();\r\n        function _callProcessTelemetry(itemCtx) {\r\n            if (!plugin || !hasProcessTelemetry) {\r\n                return false;\r\n            }\r\n            var pluginState = _getPluginState(plugin);\r\n            if (pluginState[_DYN_TEARDOWN /* @min:%2eteardown */] || pluginState[STR_DISABLED]) {\r\n                return false;\r\n            }\r\n            // Ensure that we keep the context in sync (for processNext()), just in case a plugin\r\n            // doesn't calls processTelemetry() instead of itemContext.processNext() or some\r\n            // other form of error occurred\r\n            if (hasSetNext) {\r\n                // Backward compatibility setting the next plugin on the instance\r\n                plugin[_DYN_SET_NEXT_PLUGIN /* @min:%2esetNextPlugin */](nextProxy);\r\n            }\r\n            plugin[STR_PROCESS_TELEMETRY /* @min:%2eprocessTelemetry */](env, itemCtx);\r\n            // Process Telemetry is expected to call itemCtx.processNext() or nextPlugin.processTelemetry()\r\n            return true;\r\n        }\r\n        if (!_processChain(itemCtx, _callProcessTelemetry, \"processTelemetry\", function () { return ({ item: env }); }, !(env.sync))) {\r\n            // The underlying plugin is either not defined, not enabled or does not have a processTelemetry implementation\r\n            // so we still want the next plugin to be executed.\r\n            itemCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](env);\r\n        }\r\n    }\r\n    function _unloadPlugin(unloadCtx, unloadState) {\r\n        function _callTeardown() {\r\n            // Setting default of hasRun as false so the proxyProcessFn() is called as teardown() doesn't have to exist or call unloadNext().\r\n            var hasRun = false;\r\n            if (plugin) {\r\n                var pluginState = _getPluginState(plugin);\r\n                var pluginCore = plugin[STR_CORE] || pluginState[STR_CORE /* @min:%2ecore */];\r\n                // Only teardown the plugin if it was initialized by the current core (i.e. It's not a shared plugin)\r\n                if (plugin && (!pluginCore || pluginCore === unloadCtx.core()) && !pluginState[_DYN_TEARDOWN /* @min:%2eteardown */]) {\r\n                    // Handle plugins that don't extend from the BaseTelemetryPlugin\r\n                    pluginState[STR_CORE /* @min:%2ecore */] = null;\r\n                    pluginState[_DYN_TEARDOWN /* @min:%2eteardown */] = true;\r\n                    pluginState[_DYN_IS_INITIALIZED /* @min:%2eisInitialized */] = false;\r\n                    if (plugin[_DYN_TEARDOWN /* @min:%2eteardown */] && plugin[_DYN_TEARDOWN /* @min:%2eteardown */](unloadCtx, unloadState) === true) {\r\n                        // plugin told us that it was going to (or has) call unloadCtx.processNext()\r\n                        hasRun = true;\r\n                    }\r\n                }\r\n            }\r\n            return hasRun;\r\n        }\r\n        if (!_processChain(unloadCtx, _callTeardown, \"unload\", function () { }, unloadState.isAsync)) {\r\n            // Only called if we hasRun was not true\r\n            unloadCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](unloadState);\r\n        }\r\n    }\r\n    function _updatePlugin(updateCtx, updateState) {\r\n        function _callUpdate() {\r\n            // Setting default of hasRun as false so the proxyProcessFn() is called as teardown() doesn't have to exist or call unloadNext().\r\n            var hasRun = false;\r\n            if (plugin) {\r\n                var pluginState = _getPluginState(plugin);\r\n                var pluginCore = plugin[STR_CORE] || pluginState[STR_CORE /* @min:%2ecore */];\r\n                // Only update the plugin if it was initialized by the current core (i.e. It's not a shared plugin)\r\n                if (plugin && (!pluginCore || pluginCore === updateCtx.core()) && !pluginState[_DYN_TEARDOWN /* @min:%2eteardown */]) {\r\n                    if (plugin[_DYN_UPDATE /* @min:%2eupdate */] && plugin[_DYN_UPDATE /* @min:%2eupdate */](updateCtx, updateState) === true) {\r\n                        // plugin told us that it was going to (or has) call unloadCtx.processNext()\r\n                        hasRun = true;\r\n                    }\r\n                }\r\n            }\r\n            return hasRun;\r\n        }\r\n        if (!_processChain(updateCtx, _callUpdate, \"update\", function () { }, false)) {\r\n            // Only called if we hasRun was not true\r\n            updateCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](updateState);\r\n        }\r\n    }\r\n    return objFreeze(proxyChain);\r\n}\r\n/**\r\n * This class will be removed!\r\n * @deprecated use createProcessTelemetryContext() instead\r\n */\r\nvar ProcessTelemetryContext = /** @class */ (function () {\r\n    /**\r\n     * Creates a new Telemetry Item context with the current config, core and plugin execution chain\r\n     * @param plugins - The plugin instances that will be executed\r\n     * @param config - The current config\r\n     * @param core - The current core instance\r\n     */\r\n    function ProcessTelemetryContext(pluginChain, config, core, startAt) {\r\n        var _self = this;\r\n        var context = createProcessTelemetryContext(pluginChain, config, core, startAt);\r\n        // Proxy all functions of the context to this object\r\n        proxyFunctions(_self, context, objKeys(context));\r\n    }\r\n    return ProcessTelemetryContext;\r\n}());\r\nexport { ProcessTelemetryContext };\r\n//# sourceMappingURL=ProcessTelemetryContext.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { arrForEach, dumpObj } from \"@nevware21/ts-utils\";\r\nimport { _DYN_DIAG_LOG, _DYN_PUSH } from \"../__DynamicConstants\";\r\nimport { _throwInternal } from \"./DiagnosticLogger\";\r\nexport function createUnloadHandlerContainer() {\r\n    var handlers = [];\r\n    function _addHandler(handler) {\r\n        if (handler) {\r\n            handlers[_DYN_PUSH /* @min:%2epush */](handler);\r\n        }\r\n    }\r\n    function _runHandlers(unloadCtx, unloadState) {\r\n        arrForEach(handlers, function (handler) {\r\n            try {\r\n                handler(unloadCtx, unloadState);\r\n            }\r\n            catch (e) {\r\n                _throwInternal(unloadCtx[_DYN_DIAG_LOG /* @min:%2ediagLog */](), 2 /* eLoggingSeverity.WARNING */, 73 /* _eInternalMessageId.PluginException */, \"Unexpected error calling unload handler - \" + dumpObj(e));\r\n            }\r\n        });\r\n        handlers = [];\r\n    }\r\n    return {\r\n        add: _addHandler,\r\n        run: _runHandlers\r\n    };\r\n}\r\n//# sourceMappingURL=UnloadHandlerContainer.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { arrAppend, arrForEach, dumpObj } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH } from \"../__DynamicConstants\";\r\nimport { _throwInternal } from \"./DiagnosticLogger\";\r\nvar _maxHooks;\r\nvar _hookAddMonitor;\r\n/**\r\n * Test hook for setting the maximum number of unload hooks and calling a monitor function when the hooks are added or removed\r\n * This allows for automatic test failure when the maximum number of unload hooks is exceeded\r\n * @param maxHooks - The maximum number of unload hooks\r\n * @param addMonitor - The monitor function to call when hooks are added or removed\r\n */\r\nexport function _testHookMaxUnloadHooksCb(maxHooks, addMonitor) {\r\n    _maxHooks = maxHooks;\r\n    _hookAddMonitor = addMonitor;\r\n}\r\n/**\r\n * Create a IUnloadHookContainer which can be used to remember unload hook functions to be executed during the component unloading\r\n * process.\r\n * @returns A new IUnloadHookContainer instance\r\n */\r\nexport function createUnloadHookContainer() {\r\n    var _hooks = [];\r\n    function _doUnload(logger) {\r\n        var oldHooks = _hooks;\r\n        _hooks = [];\r\n        // Remove all registered unload hooks\r\n        arrForEach(oldHooks, function (fn) {\r\n            // allow either rm or remove callback function\r\n            try {\r\n                (fn.rm || fn.remove).call(fn);\r\n            }\r\n            catch (e) {\r\n                _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 73 /* _eInternalMessageId.PluginException */, \"Unloading:\" + dumpObj(e));\r\n            }\r\n        });\r\n        if (_maxHooks && oldHooks[_DYN_LENGTH /* @min:%2elength */] > _maxHooks) {\r\n            _hookAddMonitor ? _hookAddMonitor(\"doUnload\", oldHooks) : _throwInternal(null, 1 /* eLoggingSeverity.CRITICAL */, 48 /* _eInternalMessageId.MaxUnloadHookExceeded */, \"Max unload hooks exceeded. An excessive number of unload hooks has been detected.\");\r\n        }\r\n    }\r\n    function _addHook(hooks) {\r\n        if (hooks) {\r\n            arrAppend(_hooks, hooks);\r\n            if (_maxHooks && _hooks[_DYN_LENGTH /* @min:%2elength */] > _maxHooks) {\r\n                _hookAddMonitor ? _hookAddMonitor(\"Add\", _hooks) : _throwInternal(null, 1 /* eLoggingSeverity.CRITICAL */, 48 /* _eInternalMessageId.MaxUnloadHookExceeded */, \"Max unload hooks exceeded. An excessive number of unload hooks has been detected.\");\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        run: _doUnload,\r\n        add: _addHook\r\n    };\r\n}\r\n//# sourceMappingURL=UnloadHookContainer.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nvar _a;\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { isFunction, objDefine } from \"@nevware21/ts-utils\";\r\nimport { createDynamicConfig } from \"../Config/DynamicConfig\";\r\nimport { _DYN_CREATE_NEW, _DYN_DIAG_LOG, _DYN_GET_NEXT, _DYN_GET_PROCESS_TEL_CONT2, _DYN_INITIALIZE, _DYN_IS_INITIALIZED, _DYN_PROCESS_NEXT, _DYN_SET_NEXT_PLUGIN, _DYN_TEARDOWN, _DYN_UPDATE, _DYN__DO_TEARDOWN } from \"../__DynamicConstants\";\r\nimport { safeGetLogger } from \"./DiagnosticLogger\";\r\nimport { isNotNullOrUndefined, proxyFunctionAs } from \"./HelperFuncs\";\r\nimport { STR_CORE, STR_EXTENSION_CONFIG, STR_PROCESS_TELEMETRY } from \"./InternalConstants\";\r\nimport { createProcessTelemetryContext, createProcessTelemetryUnloadContext, createProcessTelemetryUpdateContext } from \"./ProcessTelemetryContext\";\r\nimport { createUnloadHandlerContainer } from \"./UnloadHandlerContainer\";\r\nimport { createUnloadHookContainer } from \"./UnloadHookContainer\";\r\nvar strGetPlugin = \"getPlugin\";\r\nvar defaultValues = (_a = {},\r\n    _a[STR_EXTENSION_CONFIG] = { isVal: isNotNullOrUndefined, v: {} },\r\n    _a);\r\n/**\r\n * BaseTelemetryPlugin provides a basic implementation of the ITelemetryPlugin interface so that plugins\r\n * can avoid implementation the same set of boiler plate code as well as provide a base\r\n * implementation so that new default implementations can be added without breaking all plugins.\r\n */\r\nvar BaseTelemetryPlugin = /** @class */ (function () {\r\n    function BaseTelemetryPlugin() {\r\n        var _self = this; // Setting _self here as it's used outside of the dynamicProto as well\r\n        // NOTE!: DON'T set default values here, instead set them in the _initDefaults() function as it is also called during teardown()\r\n        var _isinitialized;\r\n        var _rootCtx; // Used as the root context, holding the current config and initialized core\r\n        var _nextPlugin; // Used for backward compatibility where plugins don't call the main pipeline\r\n        var _unloadHandlerContainer;\r\n        var _hookContainer;\r\n        _initDefaults();\r\n        dynamicProto(BaseTelemetryPlugin, _self, function (_self) {\r\n            _self[_DYN_INITIALIZE /* @min:%2einitialize */] = function (config, core, extensions, pluginChain) {\r\n                _setDefaults(config, core, pluginChain);\r\n                _isinitialized = true;\r\n            };\r\n            _self[_DYN_TEARDOWN /* @min:%2eteardown */] = function (unloadCtx, unloadState) {\r\n                // If this plugin has already been torn down (not operational) or is not initialized (core is not set)\r\n                // or the core being used for unload was not the same core used for initialization.\r\n                var core = _self[STR_CORE /* @min:%2ecore */];\r\n                if (!core || (unloadCtx && core !== unloadCtx[STR_CORE /* @min:%2ecore */]())) {\r\n                    // Do Nothing as either the plugin is not initialized or was not initialized by the current core\r\n                    return;\r\n                }\r\n                var result;\r\n                var unloadDone = false;\r\n                var theUnloadCtx = unloadCtx || createProcessTelemetryUnloadContext(null, core, _nextPlugin && _nextPlugin[strGetPlugin] ? _nextPlugin[strGetPlugin]() : _nextPlugin);\r\n                var theUnloadState = unloadState || {\r\n                    reason: 0 /* TelemetryUnloadReason.ManualTeardown */,\r\n                    isAsync: false\r\n                };\r\n                function _unloadCallback() {\r\n                    if (!unloadDone) {\r\n                        unloadDone = true;\r\n                        _unloadHandlerContainer.run(theUnloadCtx, unloadState);\r\n                        _hookContainer.run(theUnloadCtx[_DYN_DIAG_LOG /* @min:%2ediagLog */]());\r\n                        if (result === true) {\r\n                            theUnloadCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](theUnloadState);\r\n                        }\r\n                        _initDefaults();\r\n                    }\r\n                }\r\n                if (!_self[_DYN__DO_TEARDOWN /* @min:%2e_doTeardown */] || _self[_DYN__DO_TEARDOWN /* @min:%2e_doTeardown */](theUnloadCtx, theUnloadState, _unloadCallback) !== true) {\r\n                    _unloadCallback();\r\n                }\r\n                else {\r\n                    // Tell the caller that we will be calling processNext()\r\n                    result = true;\r\n                }\r\n                return result;\r\n            };\r\n            _self[_DYN_UPDATE /* @min:%2eupdate */] = function (updateCtx, updateState) {\r\n                // If this plugin has already been torn down (not operational) or is not initialized (core is not set)\r\n                // or the core being used for unload was not the same core used for initialization.\r\n                var core = _self[STR_CORE /* @min:%2ecore */];\r\n                if (!core || (updateCtx && core !== updateCtx[STR_CORE /* @min:%2ecore */]())) {\r\n                    // Do Nothing\r\n                    return;\r\n                }\r\n                var result;\r\n                var updateDone = false;\r\n                var theUpdateCtx = updateCtx || createProcessTelemetryUpdateContext(null, core, _nextPlugin && _nextPlugin[strGetPlugin] ? _nextPlugin[strGetPlugin]() : _nextPlugin);\r\n                var theUpdateState = updateState || {\r\n                    reason: 0 /* TelemetryUpdateReason.Unknown */\r\n                };\r\n                function _updateCallback() {\r\n                    if (!updateDone) {\r\n                        updateDone = true;\r\n                        _setDefaults(theUpdateCtx.getCfg(), theUpdateCtx.core(), theUpdateCtx[_DYN_GET_NEXT /* @min:%2egetNext */]());\r\n                    }\r\n                }\r\n                if (!_self._doUpdate || _self._doUpdate(theUpdateCtx, theUpdateState, _updateCallback) !== true) {\r\n                    _updateCallback();\r\n                }\r\n                else {\r\n                    result = true;\r\n                }\r\n                return result;\r\n            };\r\n            proxyFunctionAs(_self, \"_addUnloadCb\", function () { return _unloadHandlerContainer; }, \"add\");\r\n            proxyFunctionAs(_self, \"_addHook\", function () { return _hookContainer; }, \"add\");\r\n            objDefine(_self, \"_unloadHooks\", { g: function () { return _hookContainer; } });\r\n        });\r\n        // These are added after the dynamicProto so that are not moved to the prototype\r\n        _self[_DYN_DIAG_LOG /* @min:%2ediagLog */] = function (itemCtx) {\r\n            return _getTelCtx(itemCtx)[_DYN_DIAG_LOG /* @min:%2ediagLog */]();\r\n        };\r\n        _self[_DYN_IS_INITIALIZED /* @min:%2eisInitialized */] = function () {\r\n            return _isinitialized;\r\n        };\r\n        _self.setInitialized = function (isInitialized) {\r\n            _isinitialized = isInitialized;\r\n        };\r\n        // _self.getNextPlugin = () => DO NOT IMPLEMENT\r\n        // Sub-classes of this base class *should* not be relying on this value and instead\r\n        // should use processNext() function. If you require access to the plugin use the\r\n        // IProcessTelemetryContext.getNext().getPlugin() while in the pipeline, Note getNext() may return null.\r\n        _self[_DYN_SET_NEXT_PLUGIN /* @min:%2esetNextPlugin */] = function (next) {\r\n            _nextPlugin = next;\r\n        };\r\n        _self[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */] = function (env, itemCtx) {\r\n            if (itemCtx) {\r\n                // Normal core execution sequence\r\n                itemCtx[_DYN_PROCESS_NEXT /* @min:%2eprocessNext */](env);\r\n            }\r\n            else if (_nextPlugin && isFunction(_nextPlugin[STR_PROCESS_TELEMETRY /* @min:%2eprocessTelemetry */])) {\r\n                // Looks like backward compatibility or out of band processing. And as it looks\r\n                // like a ITelemetryPlugin or ITelemetryPluginChain, just call processTelemetry\r\n                _nextPlugin[STR_PROCESS_TELEMETRY /* @min:%2eprocessTelemetry */](env, null);\r\n            }\r\n        };\r\n        _self._getTelCtx = _getTelCtx;\r\n        function _getTelCtx(currentCtx) {\r\n            if (currentCtx === void 0) { currentCtx = null; }\r\n            var itemCtx = currentCtx;\r\n            if (!itemCtx) {\r\n                var rootCtx = _rootCtx || createProcessTelemetryContext(null, {}, _self[STR_CORE /* @min:%2ecore */]);\r\n                // tslint:disable-next-line: prefer-conditional-expression\r\n                if (_nextPlugin && _nextPlugin[strGetPlugin]) {\r\n                    // Looks like a chain object\r\n                    itemCtx = rootCtx[_DYN_CREATE_NEW /* @min:%2ecreateNew */](null, _nextPlugin[strGetPlugin]);\r\n                }\r\n                else {\r\n                    itemCtx = rootCtx[_DYN_CREATE_NEW /* @min:%2ecreateNew */](null, _nextPlugin);\r\n                }\r\n            }\r\n            return itemCtx;\r\n        }\r\n        function _setDefaults(config, core, pluginChain) {\r\n            // Make sure the extensionConfig exists and the config is dynamic\r\n            createDynamicConfig(config, defaultValues, safeGetLogger(core));\r\n            if (!pluginChain && core) {\r\n                // Get the first plugin from the core\r\n                pluginChain = core[_DYN_GET_PROCESS_TEL_CONT2 /* @min:%2egetProcessTelContext */]()[_DYN_GET_NEXT /* @min:%2egetNext */]();\r\n            }\r\n            var nextPlugin = _nextPlugin;\r\n            if (_nextPlugin && _nextPlugin[strGetPlugin]) {\r\n                // If it looks like a proxy/chain then get the plugin\r\n                nextPlugin = _nextPlugin[strGetPlugin]();\r\n            }\r\n            // Support legacy plugins where core was defined as a property\r\n            _self[STR_CORE /* @min:%2ecore */] = core;\r\n            _rootCtx = createProcessTelemetryContext(pluginChain, config, core, nextPlugin);\r\n        }\r\n        function _initDefaults() {\r\n            _isinitialized = false;\r\n            _self[STR_CORE /* @min:%2ecore */] = null;\r\n            _rootCtx = null;\r\n            _nextPlugin = null;\r\n            _hookContainer = createUnloadHookContainer();\r\n            _unloadHandlerContainer = createUnloadHandlerContainer();\r\n        }\r\n    }\r\n    BaseTelemetryPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Tear down the plugin and remove any hooked value, the plugin should be removed so that it is no longer initialized and\r\n     * therefore could be re-initialized after being torn down. The plugin should ensure that once this has been called any further\r\n     * processTelemetry calls are ignored and it just calls the processNext() with the provided context.\r\n     * @param unloadCtx - This is the context that should be used during unloading.\r\n     * @param unloadState - The details / state of the unload process, it holds details like whether it should be unloaded synchronously or asynchronously and the reason for the unload.\r\n     * @returns boolean - true if the plugin has or will call processNext(), this for backward compatibility as previously teardown was synchronous and returned nothing.\r\n     */\r\n    BaseTelemetryPlugin.prototype.teardown = function (unloadCtx, unloadState) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return false;\r\n    };\r\n    /**\r\n     * The the plugin should re-evaluate configuration and update any cached configuration settings.\r\n     * @param updateCtx - This is the context that should be used during updating.\r\n     * @param updateState - The details / state of the update process, it holds details like the current and previous configuration.\r\n     * @returns boolean - true if the plugin has or will call updateCtx.processNext(), this allows the plugin to perform any asynchronous operations.\r\n     */\r\n    BaseTelemetryPlugin.prototype.update = function (updateCtx, updateState) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Add an unload handler that will be called when the SDK is being unloaded\r\n     * @param handler - the handler\r\n     */\r\n    BaseTelemetryPlugin.prototype._addUnloadCb = function (handler) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Add this hook so that it is automatically removed during unloading\r\n     * @param hooks - The single hook or an array of IInstrumentHook objects\r\n     */\r\n    BaseTelemetryPlugin.prototype._addHook = function (hooks) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return BaseTelemetryPlugin;\r\n}());\r\nexport { BaseTelemetryPlugin };\r\n//# sourceMappingURL=BaseTelemetryPlugin.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { arrForEach, arrIndexOf, getDocument, getWindow, isArray, objForEachKey, objKeys } from \"@nevware21/ts-utils\";\r\nimport { _DYN_EVT_NAME, _DYN_LENGTH, _DYN_PUSH, _DYN_REPLACE, _DYN_SPLICE, _DYN_SPLIT, _DYN_TYPE } from \"../__DynamicConstants\";\r\nimport { createElmNodeData, createUniqueNamespace } from \"./DataCacheHelper\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\n// Added to help with minfication\r\nvar strOnPrefix = \"on\";\r\nvar strAttachEvent = \"attachEvent\";\r\nvar strAddEventHelper = \"addEventListener\";\r\nvar strDetachEvent = \"detachEvent\";\r\nvar strRemoveEventListener = \"removeEventListener\";\r\nvar strEvents = \"events\";\r\nvar strVisibilityChangeEvt = \"visibilitychange\";\r\nvar strPageHide = \"pagehide\";\r\nvar strPageShow = \"pageshow\";\r\nvar strUnload = \"unload\";\r\nvar strBeforeUnload = \"beforeunload\";\r\nvar strPageHideNamespace = createUniqueNamespace(\"aiEvtPageHide\");\r\nvar strPageShowNamespace = createUniqueNamespace(\"aiEvtPageShow\");\r\nvar rRemoveEmptyNs = /\\.[\\.]+/g;\r\nvar rRemoveTrailingEmptyNs = /[\\.]+$/;\r\nvar _guid = 1;\r\nvar elmNodeData = createElmNodeData(\"events\");\r\nvar eventNamespace = /^([^.]*)(?:\\.(.+)|)/;\r\nfunction _normalizeNamespace(name) {\r\n    if (name && name[_DYN_REPLACE /* @min:%2ereplace */]) {\r\n        return name[_DYN_REPLACE /* @min:%2ereplace */](/^[\\s\\.]+|(?=[\\s\\.])[\\.\\s]+$/g, STR_EMPTY);\r\n    }\r\n    return name;\r\n}\r\nfunction _getEvtNamespace(eventName, evtNamespace) {\r\n    if (evtNamespace) {\r\n        var theNamespace_1 = STR_EMPTY;\r\n        if (isArray(evtNamespace)) {\r\n            theNamespace_1 = STR_EMPTY;\r\n            arrForEach(evtNamespace, function (name) {\r\n                name = _normalizeNamespace(name);\r\n                if (name) {\r\n                    if (name[0] !== \".\") {\r\n                        name = \".\" + name;\r\n                    }\r\n                    theNamespace_1 += name;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            theNamespace_1 = _normalizeNamespace(evtNamespace);\r\n        }\r\n        if (theNamespace_1) {\r\n            if (theNamespace_1[0] !== \".\") {\r\n                theNamespace_1 = \".\" + theNamespace_1;\r\n            }\r\n            // We may only have the namespace and not an eventName\r\n            eventName = (eventName || STR_EMPTY) + theNamespace_1;\r\n        }\r\n    }\r\n    var parsedEvent = (eventNamespace.exec(eventName || STR_EMPTY) || []);\r\n    return {\r\n        type: parsedEvent[1],\r\n        ns: ((parsedEvent[2] || STR_EMPTY).replace(rRemoveEmptyNs, \".\").replace(rRemoveTrailingEmptyNs, STR_EMPTY)[_DYN_SPLIT /* @min:%2esplit */](\".\").sort()).join(\".\")\r\n    };\r\n}\r\n/**\r\n * Get all of the registered events on the target object, this is primarily used for testing cleanup but may also be used by\r\n * applications to remove their own events\r\n * @param target - The EventTarget that has registered events\r\n * @param eventName - [Optional] The name of the event to return the registered handlers and full name (with namespaces)\r\n * @param evtNamespace - [Optional] Additional namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace,\r\n * if the eventName also includes a namespace the namespace(s) are merged into a single namespace\r\n */\r\nexport function __getRegisteredEvents(target, eventName, evtNamespace) {\r\n    var theEvents = [];\r\n    var eventCache = elmNodeData.get(target, strEvents, {}, false);\r\n    var evtName = _getEvtNamespace(eventName, evtNamespace);\r\n    objForEachKey(eventCache, function (evtType, registeredEvents) {\r\n        arrForEach(registeredEvents, function (value) {\r\n            if (!evtName[_DYN_TYPE /* @min:%2etype */] || evtName[_DYN_TYPE /* @min:%2etype */] === value[_DYN_EVT_NAME /* @min:%2eevtName */][_DYN_TYPE /* @min:%2etype */]) {\r\n                if (!evtName.ns || evtName.ns === evtName.ns) {\r\n                    theEvents[_DYN_PUSH /* @min:%2epush */]({\r\n                        name: value.evtName[_DYN_TYPE /* @min:%2etype */] + (value[_DYN_EVT_NAME /* @min:%2eevtName */].ns ? \".\" + value[_DYN_EVT_NAME /* @min:%2eevtName */].ns : STR_EMPTY),\r\n                        handler: value.handler\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    });\r\n    return theEvents;\r\n}\r\n// Exported for internal unit testing only\r\nfunction _getRegisteredEvents(target, evtName, addDefault) {\r\n    if (addDefault === void 0) { addDefault = true; }\r\n    var aiEvts = elmNodeData.get(target, strEvents, {}, addDefault);\r\n    var registeredEvents = aiEvts[evtName];\r\n    if (!registeredEvents) {\r\n        registeredEvents = aiEvts[evtName] = [];\r\n    }\r\n    return registeredEvents;\r\n}\r\nfunction _doDetach(obj, evtName, handlerRef, useCapture) {\r\n    if (obj && evtName && evtName[_DYN_TYPE /* @min:%2etype */]) {\r\n        if (obj[strRemoveEventListener]) {\r\n            obj[strRemoveEventListener](evtName[_DYN_TYPE /* @min:%2etype */], handlerRef, useCapture);\r\n        }\r\n        else if (obj[strDetachEvent]) {\r\n            obj[strDetachEvent](strOnPrefix + evtName[_DYN_TYPE /* @min:%2etype */], handlerRef);\r\n        }\r\n    }\r\n}\r\nfunction _doAttach(obj, evtName, handlerRef, useCapture) {\r\n    var result = false;\r\n    if (obj && evtName && evtName[_DYN_TYPE /* @min:%2etype */] && handlerRef) {\r\n        if (obj[strAddEventHelper]) {\r\n            // all browsers except IE before version 9\r\n            obj[strAddEventHelper](evtName[_DYN_TYPE /* @min:%2etype */], handlerRef, useCapture);\r\n            result = true;\r\n        }\r\n        else if (obj[strAttachEvent]) {\r\n            // IE before version 9\r\n            obj[strAttachEvent](strOnPrefix + evtName[_DYN_TYPE /* @min:%2etype */], handlerRef);\r\n            result = true;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction _doUnregister(target, events, evtName, unRegFn) {\r\n    var idx = events[_DYN_LENGTH /* @min:%2elength */];\r\n    while (idx--) {\r\n        var theEvent = events[idx];\r\n        if (theEvent) {\r\n            if (!evtName.ns || evtName.ns === theEvent[_DYN_EVT_NAME /* @min:%2eevtName */].ns) {\r\n                if (!unRegFn || unRegFn(theEvent)) {\r\n                    _doDetach(target, theEvent[_DYN_EVT_NAME /* @min:%2eevtName */], theEvent.handler, theEvent.capture);\r\n                    // Remove the registered event\r\n                    events[_DYN_SPLICE /* @min:%2esplice */](idx, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction _unregisterEvents(target, evtName, unRegFn) {\r\n    if (evtName[_DYN_TYPE /* @min:%2etype */]) {\r\n        _doUnregister(target, _getRegisteredEvents(target, evtName[_DYN_TYPE /* @min:%2etype */]), evtName, unRegFn);\r\n    }\r\n    else {\r\n        var eventCache = elmNodeData.get(target, strEvents, {});\r\n        objForEachKey(eventCache, function (evtType, events) {\r\n            _doUnregister(target, events, evtName, unRegFn);\r\n        });\r\n        // Cleanup\r\n        if (objKeys(eventCache)[_DYN_LENGTH /* @min:%2elength */] === 0) {\r\n            elmNodeData.kill(target, strEvents);\r\n        }\r\n    }\r\n}\r\nexport function mergeEvtNamespace(theNamespace, namespaces) {\r\n    var newNamespaces;\r\n    if (namespaces) {\r\n        if (isArray(namespaces)) {\r\n            newNamespaces = [theNamespace].concat(namespaces);\r\n        }\r\n        else {\r\n            newNamespaces = [theNamespace, namespaces];\r\n        }\r\n        // resort the namespaces so they are always in order\r\n        newNamespaces = (_getEvtNamespace(\"xx\", newNamespaces).ns)[_DYN_SPLIT /* @min:%2esplit */](\".\");\r\n    }\r\n    else {\r\n        newNamespaces = theNamespace;\r\n    }\r\n    return newNamespaces;\r\n}\r\n/**\r\n * Binds the specified function to an event, so that the function gets called whenever the event fires on the object\r\n * @param obj - Object to add the event too.\r\n * @param eventName - String that specifies any of the standard DHTML Events without \"on\" prefix, if may also include an optional (dot \".\" prefixed)\r\n * namespaces \"click\" \"click.mynamespace\" in addition to specific namespaces.\r\n * @param handlerRef - Pointer that specifies the function to call when event fires\r\n * @param evtNamespace - [Optional] Additional namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace,\r\n * if the eventName also includes a namespace the namespace(s) are merged into a single namespace\r\n * @param useCapture - [Optional] Defaults to false\r\n * @returns True if the function was bound successfully to the event, otherwise false\r\n */\r\nexport function eventOn(target, eventName, handlerRef, evtNamespace, useCapture) {\r\n    if (useCapture === void 0) { useCapture = false; }\r\n    var result = false;\r\n    if (target) {\r\n        try {\r\n            var evtName = _getEvtNamespace(eventName, evtNamespace);\r\n            result = _doAttach(target, evtName, handlerRef, useCapture);\r\n            if (result && elmNodeData.accept(target)) {\r\n                var registeredEvent = {\r\n                    guid: _guid++,\r\n                    evtName: evtName,\r\n                    handler: handlerRef,\r\n                    capture: useCapture\r\n                };\r\n                _getRegisteredEvents(target, evtName.type)[_DYN_PUSH /* @min:%2epush */](registeredEvent);\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Just Ignore any error so that we don't break any execution path\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Removes an event handler for the specified event\r\n * @param Object - to remove the event from\r\n * @param eventName - The name of the event, with optional namespaces or just the namespaces,\r\n * such as \"click\", \"click.mynamespace\" or \".mynamespace\"\r\n * @param handlerRef - The callback function that needs to be removed from the given event, when using a\r\n * namespace (with or without a qualifying event) this may be null to remove all previously attached event handlers\r\n * otherwise this will only remove events with this specific handler.\r\n * @param evtNamespace - [Optional] Additional namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace,\r\n * if the eventName also includes a namespace the namespace(s) are merged into a single namespace\r\n * @param useCapture - [Optional] Defaults to false\r\n */\r\nexport function eventOff(target, eventName, handlerRef, evtNamespace, useCapture) {\r\n    if (useCapture === void 0) { useCapture = false; }\r\n    if (target) {\r\n        try {\r\n            var evtName_1 = _getEvtNamespace(eventName, evtNamespace);\r\n            var found_1 = false;\r\n            _unregisterEvents(target, evtName_1, function (regEvent) {\r\n                if ((evtName_1.ns && !handlerRef) || regEvent.handler === handlerRef) {\r\n                    found_1 = true;\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n            if (!found_1) {\r\n                // fallback to try and remove as requested\r\n                _doDetach(target, evtName_1, handlerRef, useCapture);\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Just Ignore any error so that we don't break any execution path\r\n        }\r\n    }\r\n}\r\n/**\r\n * Binds the specified function to an event, so that the function gets called whenever the event fires on the object\r\n * @param obj - Object to add the event too.\r\n * @param eventNameWithoutOn - String that specifies any of the standard DHTML Events without \"on\" prefix and optional (dot \".\" prefixed) namespaces \"click\" \"click.mynamespace\".\r\n * @param handlerRef - Pointer that specifies the function to call when event fires\r\n * @param useCapture - [Optional] Defaults to false\r\n * @returns True if the function was bound successfully to the event, otherwise false\r\n */\r\nexport function attachEvent(obj, eventNameWithoutOn, handlerRef, useCapture) {\r\n    if (useCapture === void 0) { useCapture = false; }\r\n    return eventOn(obj, eventNameWithoutOn, handlerRef, null, useCapture);\r\n}\r\n/**\r\n * Removes an event handler for the specified event\r\n * @param Object - to remove the event from\r\n * @param eventNameWithoutOn  - The name of the event, with optional namespaces or just the namespaces,\r\n * such as \"click\", \"click.mynamespace\" or \".mynamespace\"\r\n * @param handlerRef - The callback function that needs to be removed from the given event, when using a\r\n * namespace (with or without a qualifying event) this may be null to remove all previously attached event handlers\r\n * otherwise this will only remove events with this specific handler.\r\n * @param useCapture - [Optional] Defaults to false\r\n */\r\nexport function detachEvent(obj, eventNameWithoutOn, handlerRef, useCapture) {\r\n    if (useCapture === void 0) { useCapture = false; }\r\n    eventOff(obj, eventNameWithoutOn, handlerRef, null, useCapture);\r\n}\r\n/**\r\n * Trys to add an event handler for the specified event to the window, body and document\r\n * @param eventName  - The name of the event\r\n * @param callback  - The callback function that needs to be executed for the given event\r\n * @param evtNamespace - [Optional] Namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace.\r\n * @returns - true if the handler was successfully added\r\n */\r\nexport function addEventHandler(eventName, callback, evtNamespace) {\r\n    var result = false;\r\n    var w = getWindow();\r\n    if (w) {\r\n        result = eventOn(w, eventName, callback, evtNamespace);\r\n        result = eventOn(w[\"body\"], eventName, callback, evtNamespace) || result;\r\n    }\r\n    var doc = getDocument();\r\n    if (doc) {\r\n        result = eventOn(doc, eventName, callback, evtNamespace) || result;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Trys to remove event handler(s) for the specified event/namespace to the window, body and document\r\n * @param eventName - The name of the event, with optional namespaces or just the namespaces,\r\n * such as \"click\", \"click.mynamespace\" or \".mynamespace\"\r\n * @param callback - The callback function that needs to be removed from the given event, when using a\r\n * namespace (with or without a qualifying event) this may be null to remove all previously attached event handlers\r\n * otherwise this will only remove events with this specific handler.\r\n * @param evtNamespace - [Optional] Namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace.\r\n */\r\nexport function removeEventHandler(eventName, callback, evtNamespace) {\r\n    var w = getWindow();\r\n    if (w) {\r\n        eventOff(w, eventName, callback, evtNamespace);\r\n        eventOff(w[\"body\"], eventName, callback, evtNamespace);\r\n    }\r\n    var doc = getDocument();\r\n    if (doc) {\r\n        eventOff(doc, eventName, callback, evtNamespace);\r\n    }\r\n}\r\n/**\r\n * Bind the listener to the array of events\r\n * @param events - An string array of event names to bind the listener to\r\n * @param listener - The event callback to call when the event is triggered\r\n * @param excludeEvents - [Optional] An array of events that should not be hooked (if possible), unless no other events can be.\r\n * @param evtNamespace - [Optional] Namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace.\r\n * @returns true - when at least one of the events was registered otherwise false\r\n */\r\nfunction _addEventListeners(events, listener, excludeEvents, evtNamespace) {\r\n    var added = false;\r\n    if (listener && events && events[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n        arrForEach(events, function (name) {\r\n            if (name) {\r\n                if (!excludeEvents || arrIndexOf(excludeEvents, name) === -1) {\r\n                    added = addEventHandler(name, listener, evtNamespace) || added;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return added;\r\n}\r\n/**\r\n * Bind the listener to the array of events\r\n * @param events - An string array of event names to bind the listener to\r\n * @param listener - The event callback to call when the event is triggered\r\n * @param excludeEvents - [Optional] An array of events that should not be hooked (if possible), unless no other events can be.\r\n * @param evtNamespace - [Optional] Namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace.\r\n * @returns true - when at least one of the events was registered otherwise false\r\n */\r\nexport function addEventListeners(events, listener, excludeEvents, evtNamespace) {\r\n    var added = false;\r\n    if (listener && events && isArray(events)) {\r\n        added = _addEventListeners(events, listener, excludeEvents, evtNamespace);\r\n        if (!added && excludeEvents && excludeEvents[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n            // Failed to add any listeners and we excluded some, so just attempt to add the excluded events\r\n            added = _addEventListeners(events, listener, null, evtNamespace);\r\n        }\r\n    }\r\n    return added;\r\n}\r\n/**\r\n * Remove the listener from the array of events\r\n * @param events - An string array of event names to bind the listener to\r\n * @param listener - The event callback to call when the event is triggered\r\n * @param evtNamespace - [Optional] Namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace.\r\n */\r\nexport function removeEventListeners(events, listener, evtNamespace) {\r\n    if (events && isArray(events)) {\r\n        arrForEach(events, function (name) {\r\n            if (name) {\r\n                removeEventHandler(name, listener, evtNamespace);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Listen to the 'beforeunload', 'unload' and 'pagehide' events which indicates a page unload is occurring,\r\n * this does NOT listen to the 'visibilitychange' event as while it does indicate that the page is being hidden\r\n * it does not *necessarily* mean that the page is being completely unloaded, it can mean that the user is\r\n * just navigating to a different Tab and may come back (without unloading the page). As such you may also\r\n * need to listen to the 'addPageHideEventListener' and 'addPageShowEventListener' events.\r\n * @param listener - The event callback to call when a page unload event is triggered\r\n * @param excludeEvents - [Optional] An array of events that should not be hooked, unless no other events can be.\r\n * @param evtNamespace - [Optional] Namespace(s) to append to the event listeners so they can be uniquely identified and removed based on this namespace.\r\n * @returns true - when at least one of the events was registered otherwise false\r\n */\r\nexport function addPageUnloadEventListener(listener, excludeEvents, evtNamespace) {\r\n    // Hook the unload event for the document, window and body to ensure that the client events are flushed to the server\r\n    // As just hooking the window does not always fire (on chrome) for page navigation's.\r\n    return addEventListeners([strBeforeUnload, strUnload, strPageHide], listener, excludeEvents, evtNamespace);\r\n}\r\n/**\r\n * Remove any matching 'beforeunload', 'unload' and 'pagehide' events that may have been added via addEventListener,\r\n * addEventListeners, addPageUnloadEventListener or addPageHideEventListener.\r\n * @param listener - The specific event callback to to be removed\r\n * @param evtNamespace - [Optional] Namespace(s) uniquely identified and removed based on this namespace.\r\n * @returns true - when at least one of the events was registered otherwise false\r\n */\r\nexport function removePageUnloadEventListener(listener, evtNamespace) {\r\n    removeEventListeners([strBeforeUnload, strUnload, strPageHide], listener, evtNamespace);\r\n}\r\n/**\r\n * Listen to the pagehide and visibility changing to 'hidden' events, because the 'visibilitychange' uses\r\n * an internal proxy to detect the visibility state you SHOULD use a unique namespace when if you plan to call\r\n * removePageShowEventListener as the remove ignores the listener argument for the 'visibilitychange' event.\r\n * @param listener - The event callback to call when a page hide event is triggered\r\n * @param excludeEvents - [Optional] An array of events that should not be hooked (if possible), unless no other events can be.\r\n * @param evtNamespace - [Optional] A Namespace to append to the event listeners so they can be uniquely identified and removed\r\n * based on this namespace. This call also adds an additional unique \"pageshow\" namespace to the events\r\n * so that only the matching \"removePageHideEventListener\" can remove these events.\r\n * Suggestion: pass as true if you are also calling addPageUnloadEventListener as that also hooks pagehide\r\n * @returns true - when at least one of the events was registered otherwise false\r\n */\r\nexport function addPageHideEventListener(listener, excludeEvents, evtNamespace) {\r\n    function _handlePageVisibility(evt) {\r\n        var doc = getDocument();\r\n        if (listener && doc && doc.visibilityState === \"hidden\") {\r\n            listener(evt);\r\n        }\r\n    }\r\n    // add the unique page show namespace to any provided namespace so we can only remove the ones added by \"pagehide\"\r\n    var newNamespaces = mergeEvtNamespace(strPageHideNamespace, evtNamespace);\r\n    var pageUnloadAdded = _addEventListeners([strPageHide], listener, excludeEvents, newNamespaces);\r\n    if (!excludeEvents || arrIndexOf(excludeEvents, strVisibilityChangeEvt) === -1) {\r\n        pageUnloadAdded = _addEventListeners([strVisibilityChangeEvt], _handlePageVisibility, excludeEvents, newNamespaces) || pageUnloadAdded;\r\n    }\r\n    if (!pageUnloadAdded && excludeEvents) {\r\n        // Failed to add any listeners and we where requested to exclude some, so just call again without excluding anything\r\n        pageUnloadAdded = addPageHideEventListener(listener, null, evtNamespace);\r\n    }\r\n    return pageUnloadAdded;\r\n}\r\n/**\r\n * Removes the pageHide event listeners added by addPageHideEventListener, because the 'visibilitychange' uses\r\n * an internal proxy to detect the visibility state you SHOULD use a unique namespace when calling addPageHideEventListener\r\n * as the remove ignores the listener argument for the 'visibilitychange' event.\r\n * @param listener - The specific listener to remove for the 'pageshow' event only (ignored for 'visibilitychange')\r\n * @param evtNamespace - The unique namespace used when calling addPageShowEventListener\r\n */\r\nexport function removePageHideEventListener(listener, evtNamespace) {\r\n    // add the unique page show namespace to any provided namespace so we only remove the ones added by \"pagehide\"\r\n    var newNamespaces = mergeEvtNamespace(strPageHideNamespace, evtNamespace);\r\n    removeEventListeners([strPageHide], listener, newNamespaces);\r\n    removeEventListeners([strVisibilityChangeEvt], null, newNamespaces);\r\n}\r\n/**\r\n * Listen to the pageshow and visibility changing to 'visible' events, because the 'visibilitychange' uses\r\n * an internal proxy to detect the visibility state you SHOULD use a unique namespace when if you plan to call\r\n * removePageShowEventListener as the remove ignores the listener argument for the 'visibilitychange' event.\r\n * @param listener - The event callback to call when a page is show event is triggered\r\n * @param excludeEvents - [Optional] An array of events that should not be hooked (if possible), unless no other events can be.\r\n * @param evtNamespace - [Optional/Recommended] A Namespace to append to the event listeners so they can be uniquely\r\n * identified and removed based on this namespace. This call also adds an additional unique \"pageshow\" namespace to the events\r\n * so that only the matching \"removePageShowEventListener\" can remove these events.\r\n * @returns true - when at least one of the events was registered otherwise false\r\n */\r\nexport function addPageShowEventListener(listener, excludeEvents, evtNamespace) {\r\n    function _handlePageVisibility(evt) {\r\n        var doc = getDocument();\r\n        if (listener && doc && doc.visibilityState === \"visible\") {\r\n            listener(evt);\r\n        }\r\n    }\r\n    // add the unique page show namespace to any provided namespace so we can only remove the ones added by \"pageshow\"\r\n    var newNamespaces = mergeEvtNamespace(strPageShowNamespace, evtNamespace);\r\n    var pageShowAdded = _addEventListeners([strPageShow], listener, excludeEvents, newNamespaces);\r\n    pageShowAdded = _addEventListeners([strVisibilityChangeEvt], _handlePageVisibility, excludeEvents, newNamespaces) || pageShowAdded;\r\n    if (!pageShowAdded && excludeEvents) {\r\n        // Failed to add any listeners and we where requested to exclude some, so just call again without excluding anything\r\n        pageShowAdded = addPageShowEventListener(listener, null, evtNamespace);\r\n    }\r\n    return pageShowAdded;\r\n}\r\n/**\r\n * Removes the pageShow event listeners added by addPageShowEventListener, because the 'visibilitychange' uses\r\n * an internal proxy to detect the visibility state you SHOULD use a unique namespace when calling addPageShowEventListener\r\n * as the remove ignores the listener argument for the 'visibilitychange' event.\r\n * @param listener - The specific listener to remove for the 'pageshow' event only (ignored for 'visibilitychange')\r\n * @param evtNamespace - The unique namespace used when calling addPageShowEventListener\r\n */\r\nexport function removePageShowEventListener(listener, evtNamespace) {\r\n    // add the unique page show namespace to any provided namespace so we only remove the ones added by \"pageshow\"\r\n    var newNamespaces = mergeEvtNamespace(strPageShowNamespace, evtNamespace);\r\n    removeEventListeners([strPageShow], listener, newNamespaces);\r\n    removeEventListeners([strVisibilityChangeEvt], null, newNamespaces);\r\n}\r\n//# sourceMappingURL=EventHelpers.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * This is an internal property used to cause internal (reporting) requests to be ignored from reporting\r\n * additional telemetry, to handle polyfil implementations ALL urls used with a disabled request will\r\n * also be ignored for future requests even when this property is not provided.\r\n * Tagging as Ignore as this is an internal value and is not expected to be used outside of the SDK\r\n * @ignore\r\n */\r\nexport var DisabledPropertyName = \"Microsoft_ApplicationInsights_BypassAjaxInstrumentation\";\r\nexport var SampleRate = \"sampleRate\";\r\nexport var ProcessLegacy = \"ProcessLegacy\";\r\nexport var HttpMethod = \"http.method\";\r\nexport var DEFAULT_BREEZE_ENDPOINT = \"https://dc.services.visualstudio.com\";\r\nexport var DEFAULT_BREEZE_PATH = \"/v2/track\";\r\nexport var strNotSpecified = \"not_specified\";\r\nexport var strIkey = \"iKey\";\r\n//# sourceMappingURL=Constants.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// @skip-file-minify\r\n// ##############################################################\r\n// AUTO GENERATED FILE: This file is Auto Generated during build.\r\n// ##############################################################\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// Note: DON'T Export these const from the package as we are still targeting ES5 which can result in a mutable variables that someone could change!!!\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\nexport var _DYN_FEATURE_OPT_IN = \"featureOptIn\"; // Count: 4\r\nexport var _DYN_SCHEDULE_FETCH_TIMEO0 = \"scheduleFetchTimeout\"; // Count: 2\r\n//# sourceMappingURL=__DynamicConstants.js.map","import { isNullOrUndefined, isObject, objExtend, objForEachKey, setValueByKey } from \"@nevware21/ts-utils\";\r\nimport { _DYN_FEATURE_OPT_IN } from \"./__DynamicConstants\";\r\n/**\r\n * Delete a config key in the given cfg, if the config key exists in nonOverrideConfigs and its value is set to true\r\n * @param cfg - cfg to modify\r\n * @param nonOverrideConfigs - nonOverrideConfigs\r\n * @param curLevel - cur config level, starting at 0\r\n * @param maxLevel - max config level\r\n * @returns new copy of modified configs\r\n */\r\nexport function replaceByNonOverrideCfg(cfg, nonOverrideConfigs, curLevel, maxLevel) {\r\n    try {\r\n        var exceedMaxLevel = curLevel > maxLevel;\r\n        if (exceedMaxLevel) {\r\n            cfg = null;\r\n        }\r\n        var curCfg_1 = curLevel == 0 ? objExtend({}, cfg) : cfg; // only copy cfg at the begining level\r\n        if (curCfg_1 && nonOverrideConfigs && !exceedMaxLevel) {\r\n            objForEachKey(curCfg_1, function (key) {\r\n                var nonOverrideVal = nonOverrideConfigs[key];\r\n                if (!!nonOverrideVal) {\r\n                    if (isObject(curCfg_1[key]) && isObject(nonOverrideVal)) {\r\n                        curCfg_1[key] = replaceByNonOverrideCfg(curCfg_1[key], nonOverrideVal, ++curLevel, maxLevel);\r\n                    }\r\n                    else {\r\n                        delete curCfg_1[key];\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return curCfg_1;\r\n    }\r\n    catch (e) {\r\n        // eslint-disable-next-line no-empty\r\n    }\r\n    // if errors happen, do nothing\r\n    return cfg;\r\n}\r\n//                                                     CDN Mode, value = B (CDN value = B)\r\n//                                |--------------------------------------------------------------------------|-----------|\r\n//                                |                    | none        | disabled    | enabled     | forceOn   | forceOff  |\r\n//                                | ------------------ | ----------- | ----------- | ----------- | --------- | --------- |\r\n// | User Mode, value = A         | none               | none        | disabled    | enabled     | enabled   | disabled  |\r\n// (user Value = A)               | disabled           | disabled    | disabled    | disabled    | enabled   | disabled  |\r\n//                                | enabled            | enabled     | disabled    | enabled     | enabled   | disabled  |\r\n//                                | none(blockCdn)     | none        | none        | none        | none      | none      |\r\n//                                | disabled(blockCdn) | disabled    | disabled    | disabled    | disabled  | disabled  |\r\n//                                | enabled(blockCdn)  | enabled     | enabled     | enabled     | enabled   | enabled   |\r\n// This matrix identifies how feature based overrides are selected (if present)\r\n//                                cdn Mode (cdn Value = B)\r\n//                   |---------------------------------------------------------------------------|\r\n//                   |                    | none     | disabled | enabled  | forceOn  | forceOff |\r\n//                   | ------------------ | ---------| ---------| ---------| ---------|----------|\r\n// | User Mode       | none               | A        | A        | A || B   | B || A   | B || A   |\r\n// (user Value = A)  | disabled           | A        | A        | A        | B || A   | B || A   |\r\n//                   | enabled            | A        | A        | A || B   | B || A   | B || A   |\r\n//                   | none(blockCdn)     | A        | A        | A        | A        | A        |\r\n//                   | disabled(blockCdn) | A        | A        | A        | A        | A        |\r\n//                   | enabled(blockCdn)  | A        | A        | A        | A        | A        |\r\n// Note:\r\n// Where the \"value\" is an object (map) of encoded key/values which will be used to override the real configuration\r\n// A = either the user supplied enable/disable value (via the `config.featureOptIn[name]`) or if not defined by the user the SDK defaults of the same.\r\n// B = The enable/disable value obtained from the CDN for the named feature\r\n// These are evaluated based on the above matrix to either\r\n// - A (Always the user/sdk value)\r\n// - B (Always the value from the CDN)\r\n// - A || B (If A is null or undefined use the value from the CDN (B) otherwise A)\r\n// - B || A (If B is null or undefined use the user/SDK value otherwise use the value from the CDN)\r\n//\r\n// The result of the value may also be null / undefined, which means there are no overrides to apply when the feature is enabled\r\nvar F = \"featureOptIn.\";\r\nvar M = \".mode\";\r\nvar ON = \".onCfg\";\r\nvar OFF = \".offCfg\";\r\nexport function resolveCdnFeatureCfg(field, cdnCfg, userOptInDetails) {\r\n    var _a;\r\n    // cdn conifg value\r\n    if (!cdnCfg || !cdnCfg.enabled) {\r\n        return null;\r\n    }\r\n    var cdnFt = (cdnCfg[_DYN_FEATURE_OPT_IN /* @min:%2efeatureOptIn */] || {})[field] || { mode: 1 /* CdnFeatureMode.none */ };\r\n    var cdnM = cdnFt.mode;\r\n    var cdnOnV = cdnFt.onCfg;\r\n    var cdnOffV = cdnFt.offCfg;\r\n    var userFt = (userOptInDetails || {})[field] || { mode: 2 /* FeatureOptInMode.disable */ }; // default user mode is disable\r\n    var userM = userFt.mode;\r\n    var userOnV = userFt.onCfg;\r\n    var userOffV = userFt.offCfg;\r\n    var blockCdn = !!userFt.blockCdnCfg;\r\n    var mFld = F + field + M;\r\n    var onFld = F + field + ON;\r\n    var offFld = F + field + OFF;\r\n    var mode = userM;\r\n    var onV = userOnV;\r\n    var offV = userOffV;\r\n    if (!blockCdn) {\r\n        if (cdnM === 4 /* CdnFeatureMode.forceOn */ || cdnM === 5 /* CdnFeatureMode.forceOff */) {\r\n            mode = (cdnM == 4 /* CdnFeatureMode.forceOn */ ? 3 /* FeatureOptInMode.enable */ : 2 /* FeatureOptInMode.disable */);\r\n            onV = cdnOnV || userOnV;\r\n            offV = cdnOffV || userOffV;\r\n        }\r\n        else if (cdnM === 2 /* CdnFeatureMode.disable */ || userM === 2 /* FeatureOptInMode.disable */) {\r\n            mode = 2 /* FeatureOptInMode.disable */;\r\n            onV = userOnV || cdnOnV;\r\n            offV = userOffV || cdnOffV;\r\n        }\r\n        else if (cdnM === 3 /* CdnFeatureMode.enable */) {\r\n            mode = 3 /* FeatureOptInMode.enable */;\r\n            onV = userOnV || cdnOnV;\r\n            offV = userOffV || cdnOffV;\r\n        }\r\n        else if (cdnM === 1 /* CdnFeatureMode.none */ && userM === 1 /* FeatureOptInMode.none */) {\r\n            mode = 1 /* FeatureOptInMode.none */;\r\n        }\r\n    }\r\n    return _a = {},\r\n        _a[mFld] = mode,\r\n        _a[onFld] = onV,\r\n        _a[offFld] = offV,\r\n        _a;\r\n}\r\n// helper function to get cdn config with opt-in features\r\nexport function applyCdnfeatureCfg(cdnCfg, core) {\r\n    try {\r\n        if (!cdnCfg || !cdnCfg.enabled) {\r\n            return null;\r\n        }\r\n        if (!cdnCfg[_DYN_FEATURE_OPT_IN /* @min:%2efeatureOptIn */]) {\r\n            return cdnCfg.config;\r\n        }\r\n        var optInMap = cdnCfg[_DYN_FEATURE_OPT_IN /* @min:%2efeatureOptIn */];\r\n        var cdnConfig_1 = cdnCfg.config || {};\r\n        objForEachKey(optInMap, function (key) {\r\n            var featureVal = resolveCdnFeatureCfg(key, cdnCfg, core.config[_DYN_FEATURE_OPT_IN /* @min:%2efeatureOptIn */]);\r\n            if (!isNullOrUndefined(featureVal)) {\r\n                objForEachKey(featureVal, function (config, val) {\r\n                    setValueByKey(cdnConfig_1, config, val);\r\n                });\r\n                _overrideCdnCfgByFeature(key, featureVal, cdnConfig_1);\r\n            }\r\n        });\r\n        return cdnConfig_1;\r\n    }\r\n    catch (e) {\r\n        // eslint-disable-next-line no-empty\r\n    }\r\n    return null;\r\n}\r\nfunction _overrideCdnCfgByFeature(field, ftVal, config) {\r\n    var mode = ftVal[F + field + M];\r\n    var val = ftVal[F + field + ON];\r\n    var dVal = ftVal[F + field + OFF];\r\n    var target = null;\r\n    if (mode === 3 /* FeatureOptInMode.enable */) {\r\n        target = val;\r\n    }\r\n    if (mode === 2 /* FeatureOptInMode.disable */) {\r\n        target = dVal;\r\n    }\r\n    if (target) {\r\n        objForEachKey(target, function (key, cfg) {\r\n            setValueByKey(config, key, cfg);\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=CfgSyncHelperFuncs.js.map","/**\r\n* CfgSyncPlugin.ts\r\n* @copyright Microsoft 2018\r\n*/\r\nvar _a;\r\nimport { __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { DisabledPropertyName } from \"@microsoft/applicationinsights-common\";\r\nimport { BaseTelemetryPlugin, createProcessTelemetryContext, createUniqueNamespace, eventOff, eventOn, getGlobal, getJSON, isFetchSupported, isXhrSupported, mergeEvtNamespace, onConfigChange, sendCustomEvent } from \"@microsoft/applicationinsights-core-js\";\r\nimport { doAwaitResponse } from \"@nevware21/ts-async\";\r\nimport { isFunction, isNullOrUndefined, isPlainObject, objDeepFreeze, scheduleTimeout } from \"@nevware21/ts-utils\";\r\nimport { applyCdnfeatureCfg, replaceByNonOverrideCfg } from \"./CfgSyncHelperFuncs\";\r\nimport { _DYN_SCHEDULE_FETCH_TIMEO0 } from \"./__DynamicConstants\";\r\nvar EVENT_NAME = \"ai_cfgsync\";\r\nvar STR_GET_METHOD = \"GET\";\r\nvar FETCH_TIMEOUT = 1800000; // 30 minutes\r\nvar udfVal = undefined;\r\nvar defaultNonOverrideCfg = { instrumentationKey: true, connectionString: true, endpointUrl: true };\r\nvar _defaultConfig = objDeepFreeze((_a = {\r\n        syncMode: 1 /* ICfgSyncMode.Broadcast */,\r\n        blkCdnCfg: udfVal,\r\n        customEvtName: udfVal,\r\n        cfgUrl: udfVal,\r\n        overrideSyncFn: udfVal,\r\n        overrideFetchFn: udfVal,\r\n        onCfgChangeReceive: udfVal\r\n    },\r\n    _a[_DYN_SCHEDULE_FETCH_TIMEO0 /* @min:scheduleFetchTimeout */] = FETCH_TIMEOUT,\r\n    _a.nonOverrideConfigs = defaultNonOverrideCfg,\r\n    _a.enableAjax = false,\r\n    _a));\r\nvar CfgSyncPlugin = /** @class */ (function (_super) {\r\n    __extends(CfgSyncPlugin, _super);\r\n    function CfgSyncPlugin() {\r\n        var _this = _super.call(this) || this;\r\n        _this.priority = 198;\r\n        _this.identifier = \"AppInsightsCfgSyncPlugin\";\r\n        var _extensionConfig;\r\n        var _mainConfig; // throttle config should be wrapped in IConfiguration\r\n        var _evtName;\r\n        var _evtNamespace;\r\n        var _cfgUrl;\r\n        var _timeoutHandle;\r\n        var _receiveChanges;\r\n        var _broadcastChanges;\r\n        var _blkCdnCfg;\r\n        var _fetchTimeout;\r\n        var _retryCnt;\r\n        var _onCfgChangeReceive;\r\n        var _nonOverrideConfigs;\r\n        var _fetchFn;\r\n        var _overrideFetchFn;\r\n        var _overrideSyncFn;\r\n        var _paused = false;\r\n        var _enableAjax;\r\n        dynamicProto(CfgSyncPlugin, _this, function (_self, _base) {\r\n            _initDefaults();\r\n            _self.initialize = function (config, core, extensions, pluginChain) {\r\n                _base.initialize(config, core, extensions, pluginChain);\r\n                _evtNamespace = mergeEvtNamespace(createUniqueNamespace(_self.identifier), core.evtNamespace && core.evtNamespace());\r\n                _populateDefaults(config);\r\n            };\r\n            _self.getCfg = function () {\r\n                return _mainConfig;\r\n            };\r\n            _self.pause = function () {\r\n                _paused = true;\r\n                _clearScheduledTimer();\r\n            };\r\n            _self.resume = function () {\r\n                _paused = false;\r\n                _setupTimer();\r\n            };\r\n            // used for V2 to manaully trigger config udpate\r\n            _self.setCfg = function (config) {\r\n                return _setCfg(config);\r\n            };\r\n            _self.sync = function (customDetails) {\r\n                return _sendCfgsyncEvents(customDetails);\r\n            };\r\n            _self.updateEventListenerName = function (eventName) {\r\n                return _updateEventListenerName(eventName);\r\n            };\r\n            _self._doTeardown = function (unloadCtx, unloadState) {\r\n                _eventOff();\r\n                _clearScheduledTimer();\r\n                _initDefaults();\r\n            };\r\n            _self[\"_getDbgPlgTargets\"] = function () {\r\n                return [_broadcastChanges, _receiveChanges, _evtName, _blkCdnCfg, _nonOverrideConfigs];\r\n            };\r\n            function _initDefaults() {\r\n                _mainConfig = null;\r\n                _evtName = null;\r\n                _evtNamespace = null;\r\n                _cfgUrl = null;\r\n                _receiveChanges = null;\r\n                _broadcastChanges = null;\r\n                _nonOverrideConfigs = null;\r\n                _timeoutHandle = null;\r\n                _fetchTimeout = null;\r\n                _retryCnt = null;\r\n                _blkCdnCfg = null;\r\n                _enableAjax = false;\r\n                _overrideFetchFn = null;\r\n                _overrideSyncFn = null;\r\n                _onCfgChangeReceive = null;\r\n            }\r\n            function _populateDefaults(config) {\r\n                var identifier = _self.identifier;\r\n                var core = _self.core;\r\n                _self._addHook(onConfigChange(config, function () {\r\n                    var ctx = createProcessTelemetryContext(null, config, core);\r\n                    _extensionConfig = ctx.getExtCfg(identifier, _defaultConfig);\r\n                    var preBlkCdn = _blkCdnCfg;\r\n                    _blkCdnCfg = !!_extensionConfig.blkCdnCfg;\r\n                    _enableAjax = !!_extensionConfig.enableAjax;\r\n                    // avoid initial call\r\n                    if (!isNullOrUndefined(preBlkCdn) && preBlkCdn !== _blkCdnCfg) {\r\n                        if (!_blkCdnCfg && _cfgUrl) {\r\n                            _fetchFn && _fetchFn(_cfgUrl, _onFetchComplete, _broadcastChanges);\r\n                        }\r\n                        else {\r\n                            _clearScheduledTimer();\r\n                        }\r\n                    }\r\n                    if (isNullOrUndefined(_receiveChanges)) {\r\n                        _receiveChanges = _extensionConfig.syncMode === 2 /* ICfgSyncMode.Receive */;\r\n                    }\r\n                    if (isNullOrUndefined(_broadcastChanges)) {\r\n                        _broadcastChanges = _extensionConfig.syncMode === 1 /* ICfgSyncMode.Broadcast */;\r\n                    }\r\n                    var newEvtName = _extensionConfig.customEvtName || EVENT_NAME;\r\n                    if (_evtName !== newEvtName) {\r\n                        if (_receiveChanges) {\r\n                            _updateEventListenerName(newEvtName);\r\n                        }\r\n                        else {\r\n                            _eventOff();\r\n                            _evtName = newEvtName;\r\n                        }\r\n                    }\r\n                    if (isNullOrUndefined(_cfgUrl)) {\r\n                        _cfgUrl = _extensionConfig.cfgUrl;\r\n                    }\r\n                    // if cfgUrl is set, we will ignore core config change\r\n                    if (!_cfgUrl) {\r\n                        _mainConfig = config;\r\n                        if (_broadcastChanges) {\r\n                            _sendCfgsyncEvents();\r\n                        }\r\n                    }\r\n                }));\r\n                _overrideSyncFn = _extensionConfig.overrideSyncFn;\r\n                _overrideFetchFn = _extensionConfig.overrideFetchFn;\r\n                _onCfgChangeReceive = _extensionConfig.onCfgChangeReceive;\r\n                _nonOverrideConfigs = _extensionConfig.nonOverrideConfigs; // override values should not be changed\r\n                _fetchTimeout = _extensionConfig[_DYN_SCHEDULE_FETCH_TIMEO0 /* @min:%2escheduleFetchTimeout */];\r\n                _fetchFn = _getFetchFnInterface();\r\n                _retryCnt = 0;\r\n                // NOT support cfgURL change to avoid mutiple fetch calls\r\n                if (_cfgUrl && !_blkCdnCfg) {\r\n                    _fetchFn && _fetchFn(_cfgUrl, _onFetchComplete, _broadcastChanges);\r\n                }\r\n            }\r\n            function _setCfg(config, isAutoSync) {\r\n                if (config) {\r\n                    _mainConfig = config;\r\n                    if (!!isAutoSync && !_paused) {\r\n                        return _sendCfgsyncEvents();\r\n                    }\r\n                    if (_receiveChanges && !_paused) {\r\n                        _self.core.updateCfg(config);\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            function _eventOff() {\r\n                try {\r\n                    var global_1 = getGlobal();\r\n                    if (global_1) {\r\n                        eventOff(global_1, null, null, _evtNamespace);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n            }\r\n            function _sendCfgsyncEvents(customDetails) {\r\n                try {\r\n                    if (!!_overrideSyncFn && isFunction(_overrideSyncFn)) {\r\n                        return _overrideSyncFn(_mainConfig, customDetails);\r\n                    }\r\n                    return sendCustomEvent(_evtName, _mainConfig, customDetails);\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n                return false;\r\n            }\r\n            function _updateEventListenerName(name) {\r\n                try {\r\n                    _eventOff();\r\n                    if (name) {\r\n                        _evtName = name;\r\n                        _addEventListener();\r\n                    }\r\n                    return true;\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n                return false;\r\n            }\r\n            function _getFetchFnInterface() {\r\n                var _fetchFn = _overrideFetchFn;\r\n                if (isNullOrUndefined(_fetchFn)) {\r\n                    if (isFetchSupported()) {\r\n                        _fetchFn = _fetchSender;\r\n                    }\r\n                    else if (isXhrSupported()) {\r\n                        _fetchFn = _xhrSender;\r\n                    }\r\n                }\r\n                return _fetchFn;\r\n            }\r\n            function _fetchSender(url, oncomplete, isAutoSync) {\r\n                var global = getGlobal();\r\n                var fetchFn = (global && global.fetch) || null;\r\n                if (url && fetchFn && isFunction(fetchFn)) {\r\n                    try {\r\n                        var init = {\r\n                            method: STR_GET_METHOD\r\n                        };\r\n                        if (!_enableAjax) {\r\n                            init[DisabledPropertyName] = true;\r\n                        }\r\n                        var request = new Request(url, init);\r\n                        if (!_enableAjax) {\r\n                            try {\r\n                                // Also try and tag the request (just in case the value in init is not copied over)\r\n                                request[DisabledPropertyName] = true;\r\n                            }\r\n                            catch (e) {\r\n                                // If the environment has locked down the XMLHttpRequest (preventExtensions and/or freeze), this would\r\n                                // cause the request to fail and we no telemetry would be sent\r\n                            }\r\n                        }\r\n                        doAwaitResponse(fetch(request), function (result) {\r\n                            var response = result.value;\r\n                            if (!result.rejected) {\r\n                                if (response.ok) {\r\n                                    doAwaitResponse(response.text(), function (res) {\r\n                                        _doOnComplete(oncomplete, response.status, res.value, isAutoSync);\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    _doOnComplete(oncomplete, response.status, null, isAutoSync);\r\n                                }\r\n                            }\r\n                            else {\r\n                                _doOnComplete(oncomplete, 400);\r\n                            }\r\n                        });\r\n                    }\r\n                    catch (e) {\r\n                        // eslint-disable-next-line no-empty\r\n                    }\r\n                }\r\n            }\r\n            function _xhrSender(url, oncomplete, isAutoSync) {\r\n                try {\r\n                    var xhr_1 = new XMLHttpRequest();\r\n                    if (!_enableAjax) {\r\n                        xhr_1[DisabledPropertyName] = true;\r\n                    }\r\n                    xhr_1.open(STR_GET_METHOD, url);\r\n                    xhr_1.onreadystatechange = function () {\r\n                        if (xhr_1.readyState === XMLHttpRequest.DONE) {\r\n                            _doOnComplete(oncomplete, xhr_1.status, xhr_1.responseText, isAutoSync);\r\n                        }\r\n                    };\r\n                    xhr_1.onerror = function () {\r\n                        _doOnComplete(oncomplete, 400);\r\n                    };\r\n                    xhr_1.ontimeout = function () {\r\n                        _doOnComplete(oncomplete, 400);\r\n                    };\r\n                    xhr_1.send();\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n            }\r\n            function _onFetchComplete(status, response, isAutoSync) {\r\n                try {\r\n                    if (status >= 200 && status < 400 && response) {\r\n                        _retryCnt = 0; // any successful response will reset retry count to 0\r\n                        var JSON_1 = getJSON();\r\n                        if (JSON_1) {\r\n                            var cdnCfg = JSON_1.parse(response); //comments are not allowed\r\n                            var cfg = applyCdnfeatureCfg(cdnCfg, _self.core);\r\n                            var newCfg = cfg && isPlainObject(cfg) && _replaceTartgetByKeys(cfg);\r\n                            newCfg && _setCfg(newCfg, isAutoSync);\r\n                            //cfg && _setCfg(cfg, isAutoSync);\r\n                        }\r\n                    }\r\n                    else {\r\n                        _retryCnt++;\r\n                    }\r\n                    if (_retryCnt < 3) {\r\n                        _setupTimer();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n            }\r\n            function _doOnComplete(oncomplete, status, response, isAutoSync) {\r\n                try {\r\n                    oncomplete(status, response, isAutoSync);\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n            }\r\n            function _addEventListener() {\r\n                if (_receiveChanges) {\r\n                    var global_2 = getGlobal();\r\n                    if (global_2) {\r\n                        try {\r\n                            eventOn(global_2, _evtName, function (event) {\r\n                                // TODO: add more validation here\r\n                                // may include a \"name\" or some other features to check\r\n                                var cfgEvent = event && event.detail;\r\n                                if (_onCfgChangeReceive && cfgEvent) {\r\n                                    _onCfgChangeReceive(cfgEvent);\r\n                                }\r\n                                else {\r\n                                    var cfg = cfgEvent && cfgEvent.cfg;\r\n                                    var newCfg = cfg && isPlainObject(cfg) && _replaceTartgetByKeys(cfg);\r\n                                    newCfg && _setCfg(newCfg);\r\n                                }\r\n                            }, _evtNamespace, true);\r\n                        }\r\n                        catch (e) {\r\n                            // eslint-disable-next-line no-empty\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // 4 levels\r\n            function _replaceTartgetByKeys(cfg, level) {\r\n                var _cfg = null;\r\n                try {\r\n                    if (cfg) {\r\n                        _cfg = replaceByNonOverrideCfg(cfg, _nonOverrideConfigs, 0, 5);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n                return _cfg;\r\n            }\r\n            /**\r\n             * Sets up the timer which triggers fetching cdn every 30mins after inital call\r\n             */\r\n            function _setupTimer() {\r\n                if (!_timeoutHandle && _fetchTimeout) {\r\n                    _timeoutHandle = scheduleTimeout(function () {\r\n                        _timeoutHandle = null;\r\n                        _fetchFn(_cfgUrl, _onFetchComplete, _broadcastChanges);\r\n                    }, _fetchTimeout);\r\n                    _timeoutHandle.unref();\r\n                }\r\n            }\r\n            function _clearScheduledTimer() {\r\n                _timeoutHandle && _timeoutHandle.cancel();\r\n                _timeoutHandle = null;\r\n                _retryCnt = 0;\r\n            }\r\n            _self.processTelemetry = function (env, itemCtx) {\r\n                _self.processNext(env, itemCtx);\r\n            };\r\n        });\r\n        return _this;\r\n    }\r\n    CfgSyncPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Get current configs of current instance.\r\n     * @param config - current configs\r\n     */\r\n    CfgSyncPlugin.prototype.getCfg = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Manually set configs of current instance.\r\n     * @param config - new configs\r\n    */\r\n    CfgSyncPlugin.prototype.setCfg = function (config) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Manually broadcast configs of current instance to all other instances.\r\n     * @param customDetails - additional details should also be sent out to other instances\r\n    */\r\n    CfgSyncPlugin.prototype.sync = function (customDetails) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Manually update event name.\r\n     * If current instance is the main instance, then following config changes will be sent out under this new event name.\r\n     * If current instance is listener instances, it will listen to event details under this new name.\r\n     * @param eventName - new event name\r\n     */\r\n    CfgSyncPlugin.prototype.updateEventListenerName = function (eventName) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Pause the sending/receiving of events\r\n     */\r\n    CfgSyncPlugin.prototype.pause = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Resume the sending/receiving of events\r\n     */\r\n    CfgSyncPlugin.prototype.resume = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    // /**\r\n    //  * Add Part A fields to the event\r\n    //  * @param event - The event that needs to be processed\r\n    //  */\r\n    CfgSyncPlugin.prototype.processTelemetry = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return CfgSyncPlugin;\r\n}(BaseTelemetryPlugin));\r\nexport { CfgSyncPlugin };\r\n//# sourceMappingURL=CfgSyncPlugin.js.map"],"names":["ObjClass","_objGetOwnPropertyDescriptor","_iterSymbol","_a","defaultValues","__extends"],"mappings":"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","x_google_ignoreList":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,54,55]}